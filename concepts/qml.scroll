import ../header.scroll
baseUrl https://pldb.com/concepts/
title QML

title QML - Programming language
 hidden

html
 <a class="trueBaseThemePreviousItem" href="scilab.html">&lt;</a>
 <a class="trueBaseThemeNextItem" href="postcss.html">&gt;</a>

viewSourceUrl https://github.com/breck7/pldb/blob/main/concepts/qml.pldb

startColumns 4

<div class="trueBaseThemeQuickLinks"><a href="http://qt-project.org/doc/qt-5/qmlapplications.html" class="material-symbols-outlined">home</a> <a href="https://doc.qt.io/qt-6/qtqml-documents-topic.html" class="material-symbols-outlined">menu_book</a> <a href="https://en.wikipedia.org/wiki/QML"><svg version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="98.05px" height="98.05px" viewBox="0 0 98.05 98.05" style="enable-background:new 0 0 98.05 98.05;" xml:space="preserve"><path d="M98.023,17.465l-19.584-0.056c-0.004,0.711-0.006,1.563-0.017,2.121c1.664,0.039,5.922,0.822,7.257,4.327L66.92,67.155 c-0.919-2.149-9.643-21.528-10.639-24.02l9.072-18.818c1.873-2.863,5.455-4.709,8.918-4.843l-0.01-1.968L55.42,17.489 c-0.045,0.499,0.001,1.548-0.068,2.069c5.315,0.144,7.215,1.334,5.941,4.508c-2.102,4.776-6.51,13.824-7.372,15.475 c-2.696-5.635-4.41-9.972-7.345-16.064c-1.266-2.823,1.529-3.922,4.485-4.004v-1.981l-21.82-0.067 c0.016,0.93-0.021,1.451-0.021,2.131c3.041,0.046,6.988,0.371,8.562,3.019c2.087,4.063,9.044,20.194,11.149,24.514 c-2.685,5.153-9.207,17.341-11.544,21.913c-3.348-7.43-15.732-36.689-19.232-44.241c-1.304-3.218,3.732-5.077,6.646-5.213 l0.019-2.148L0,17.398c0.005,0.646,0.027,1.71,0.029,2.187c4.025-0.037,9.908,6.573,11.588,10.683 c7.244,16.811,14.719,33.524,21.928,50.349c0.002,0.029,2.256,0.059,2.281,0.008c4.717-9.653,10.229-19.797,15.206-29.56 L63.588,80.64c0.005,0.004,2.082,0.016,2.093,0.007c7.962-18.196,19.892-46.118,23.794-54.933c1.588-3.767,4.245-6.064,8.543-6.194 l0.032-1.956L98.023,17.465z"/></svg></a> <a href="/edit.html?id=qml" class="material-symbols-outlined">edit</a></div>

* QML, aka Qt Modeling Language, is a <a href="/search.html?q=select+type%0D%0Awhere+type+%3D+pl">programming language</a> created in 2009.
 link /search.html?q=select+type+appeared%0D%0Awhere+appeared+%3D+2009 2009

dashboard
 #208 <span title="TotalRank: 558 Jobs: 103 Users: 507 Facts: 66 Links: 389">on PLDB</span>
 15 Years Old
 15k <span title="QML repos on GitHub.">Repos</span>

* QML (Qt Modeling Language) is a user interface markup language. It is a declarative language (similar to CSS and JSON) for designing user interfaceâ€“centric applications. Inline JavaScript code handles imperative aspects. Read more on Wikipedia...
 https://en.wikipedia.org/wiki/QML Read more on Wikipedia...

- QML website
 http://qt-project.org/doc/qt-5/qmlapplications.html
- QML Wikipedia page
 https://en.wikipedia.org/wiki/QML
- QML docs
 https://doc.qt.io/qt-6/qtqml-documents-topic.html
- There are at least 14,755 QML repos on <a href="https://github.com/search?q=language:QML">GitHub</a>
- QML first developed in <a href="../lists/originCommunities.html#qtGroupPlc">Qt Group plc</a>
- file extensions for QML include qml and qbs
- The  Google BigQuery Public Dataset GitHub snapshot shows 4k users using QML in 5k repos on <a href="https://api.github.com/search/repositories?q=language:QML">GitHub</a>
- <a href="pygments.html">Pygments</a> supports <a href="https://github.com/pygments/pygments/blob/master/pygments/lexers/webmisc.py">syntax highlighting</a> for QML
- GitHub supports <a href="https://github.com/skozlovf/Sublime-QML" title="The package used for syntax highlighting by GitHub Linguist.">syntax highlighting</a> for QML
- See also: (3 related languages)<a href="json.html">JSON</a>, <a href="javascript.html">JavaScript</a>, <a href="ring.html">Ring</a>

<br>

codeWithHeader Example from the web:
 Item {
     Rectangle {
         id: myRect
         width: 120
         height: 100
     }
     Rectangle {
         width: myRect.width
         height: 200
     }
 }

codeWithHeader Example from <a href='https://github.com/skozlovf/Sublime-QML'>Linguist</a>:
 /****************************************************************************
 **
 ** Copyright (C) 2015 The Qt Company Ltd.
 ** Contact: http://www.qt.io/licensing
 **
 ** This file is part of the Qt Build Suite.
 **
 ** Commercial License Usage
 ** Licensees holding valid commercial Qt licenses may use this file in
 ** accordance with the commercial license agreement provided with the
 ** Software or, alternatively, in accordance with the terms contained in
 ** a written agreement between you and The Qt Company. For licensing terms and
 ** conditions see http://www.qt.io/terms-conditions. For further information
 ** use the contact form at http://www.qt.io/contact-us.
 **
 ** GNU Lesser General Public License Usage
 ** Alternatively, this file may be used under the terms of the GNU Lesser
 ** General Public License version 2.1 or version 3 as published by the Free
 ** Software Foundation and appearing in the file LICENSE.LGPLv21 and
 ** LICENSE.LGPLv3 included in the packaging of this file.  Please review the
 ** following information to ensure the GNU Lesser General Public License
 ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and
 ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
 **
 ** In addition, as a special exception, The Qt Company gives you certain additional
 ** rights.  These rights are described in The Qt Company LGPL Exception
 ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package.
 **
 ****************************************************************************/
 
 import qbs 1.0
 import qbs.FileInfo
 import qbs.ModUtils
 
 Module {
     property string buildVariant: &quot;debug&quot;
     property bool enableDebugCode: buildVariant == &quot;debug&quot;
     property bool debugInformation: (buildVariant == &quot;debug&quot;)
     property string optimization: (buildVariant == &quot;debug&quot; ? &quot;none&quot; : &quot;fast&quot;)
     readonly property stringList hostOS: undefined // set internally
     property string hostOSVersion: {
         if (hostOS &amp;&amp; hostOS.contains(&quot;osx&quot;)) {
             return getNativeSetting(&quot;/System/Library/CoreServices/ServerVersion.plist&quot;, &quot;ProductVersion&quot;) ||
                    getNativeSetting(&quot;/System/Library/CoreServices/SystemVersion.plist&quot;, &quot;ProductVersion&quot;);
         } else if (hostOS &amp;&amp; hostOS.contains(&quot;windows&quot;)) {
             var version = getNativeSetting(&quot;HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion&quot;, &quot;CurrentVersion&quot;);
             return version + &quot;.&quot; + hostOSBuildVersion;
         }
     }
 
     property string hostOSBuildVersion: {
         if (hostOS.contains(&quot;osx&quot;)) {
             return getNativeSetting(&quot;/System/Library/CoreServices/ServerVersion.plist&quot;, &quot;ProductBuildVersion&quot;) ||
                    getNativeSetting(&quot;/System/Library/CoreServices/SystemVersion.plist&quot;, &quot;ProductBuildVersion&quot;);
         } else if (hostOS.contains(&quot;windows&quot;)) {
             return getNativeSetting(&quot;HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion&quot;, &quot;CurrentBuildNumber&quot;);
         }
     }
 
     readonly property var hostOSVersionParts: hostOSVersion ? hostOSVersion.split(&#39;.&#39;).map(function(item) { return parseInt(item, 10); }) : []
     readonly property int hostOSVersionMajor: hostOSVersionParts[0] || 0
     readonly property int hostOSVersionMinor: hostOSVersionParts[1] || 0
     readonly property int hostOSVersionPatch: hostOSVersionParts[2] || 0
 
     property stringList targetOS: hostOS
     property string pathListSeparator: hostOS.contains(&quot;windows&quot;) ? &quot;;&quot; : &quot;:&quot;
     property string pathSeparator: hostOS.contains(&quot;windows&quot;) ? &quot;\\&quot; : &quot;/&quot;
     property string profile
     property stringList toolchain
     property string architecture
     property bool install: false
     property string installSourceBase
     readonly property string installRoot: undefined
     property string installDir
     property string installPrefix: &quot;&quot;
     property path sysroot
 
     PropertyOptions {
         name: &quot;buildVariant&quot;
         allowedValues: [&#39;debug&#39;, &#39;release&#39;]
         description: &quot;name of the build variant&quot;
     }
 
     PropertyOptions {
         name: &quot;optimization&quot;
         allowedValues: [&#39;none&#39;, &#39;fast&#39;, &#39;small&#39;]
         description: &quot;optimization level&quot;
     }
 
     validate: {
         var validator = new ModUtils.PropertyValidator(&quot;qbs&quot;);
         validator.setRequiredProperty(&quot;architecture&quot;, architecture,
                                       &quot;you might want to re-run &#39;qbs-setup-toolchains&#39;&quot;);
         validator.setRequiredProperty(&quot;hostOS&quot;, hostOS);
         validator.setRequiredProperty(&quot;targetOS&quot;, targetOS);
         if (hostOS &amp;&amp; (hostOS.contains(&quot;windows&quot;) || hostOS.contains(&quot;osx&quot;))) {
             validator.setRequiredProperty(&quot;hostOSVersion&quot;, hostOSVersion,
                                           &quot;could not detect host operating system version; &quot; +
                                           &quot;verify that system files and registry keys have not &quot; +
                                           &quot;been modified.&quot;);
             if (hostOSVersion)
                 validator.addVersionValidator(&quot;hostOSVersion&quot;, hostOSVersion, 2, 4);
 
             validator.setRequiredProperty(&quot;hostOSBuildVersion&quot;, hostOSBuildVersion,
                                           &quot;could not detect host operating system build version; &quot; +
                                           &quot;verify that system files or registry have not been &quot; +
                                           &quot;tampered with.&quot;);
         }
 
         validator.addCustomValidator(&quot;architecture&quot;, architecture, function (value) {
             return architecture === canonicalArchitecture(architecture);
         }, &quot;&#39;&quot; + architecture + &quot;&#39; is invalid. You must use the canonical name &#39;&quot; +
         canonicalArchitecture(architecture) + &quot;&#39;&quot;);
 
         validator.validate();
     }
 
     // private properties
     property var commonRunEnvironment: {
         var env = {};
         if (targetOS.contains(&quot;windows&quot;)) {
             env[&quot;PATH&quot;] = [
                 FileInfo.joinPaths(installRoot, installPrefix)
             ];
         } else if (hostOS.contains(&quot;darwin&quot;) &amp;&amp; targetOS.contains(&quot;darwin&quot;)) {
             env[&quot;DYLD_FRAMEWORK_PATH&quot;] = [
                 FileInfo.joinPaths(installRoot, installPrefix, &quot;Library&quot;, &quot;Frameworks&quot;),
                 FileInfo.joinPaths(installRoot, installPrefix, &quot;lib&quot;),
                 FileInfo.joinPaths(installRoot, installPrefix)
             ].join(pathListSeparator);
 
             env[&quot;DYLD_LIBRARY_PATH&quot;] = [
                 FileInfo.joinPaths(installRoot, installPrefix, &quot;lib&quot;),
                 FileInfo.joinPaths(installRoot, installPrefix, &quot;Library&quot;, &quot;Frameworks&quot;),
                 FileInfo.joinPaths(installRoot, installPrefix)
             ].join(pathListSeparator);
 
             if (targetOS.contains(&quot;ios-simulator&quot;) &amp;&amp; sysroot) {
                 env[&quot;DYLD_ROOT_PATH&quot;] = [sysroot];
             }
         } else if (hostOS.contains(&quot;unix&quot;) &amp;&amp; targetOS.contains(&quot;unix&quot;)) {
             env[&quot;LD_LIBRARY_PATH&quot;] = [
                 FileInfo.joinPaths(installRoot, installPrefix, &quot;lib&quot;)
             ];
         }
 
         return env;
     }
 
     // internal properties
     readonly property string version: [versionMajor, versionMinor, versionPatch].join(&quot;.&quot;)
     readonly property int versionMajor: undefined // set internally
     readonly property int versionMinor: undefined // set internally
     readonly property int versionPatch: undefined // set internally
 }
 

codeWithHeader Example from <a href='https://en.wikipedia.org/wiki/QML'>Wikipedia</a>:
 MouseArea {
      onPressed: console.log(&quot;mouse button pressed&quot;)
  }

endColumns

## Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature Integers
  FeatureLink ../features/hasIntegers.html
  Supported <span class="hasFeature">âœ“</span>
  Token 
  Example
   // [0-9]+
 row
  Feature Floats
  FeatureLink ../features/hasFloats.html
  Supported <span class="hasFeature">âœ“</span>
  Token 
  Example
   // [0-9][0-9]*\.[0-9]+([eE][0-9]+)?[fd]?
 row
  Feature Hexadecimals
  FeatureLink ../features/hasHexadecimals.html
  Supported <span class="hasFeature">âœ“</span>
  Token 
  Example
   // 0x[0-9a-fA-F]+
 row
  Feature MultiLine Comments
  FeatureLink ../features/hasMultiLineComments.html
  Supported <span class="hasFeature">âœ“</span>
  Token /* */
  Example
   /* A comment
   */
 row
  Feature Comments
  FeatureLink ../features/hasComments.html
  Supported <span class="hasFeature">âœ“</span>
  Token 
  Example
   // A comment
 row
  Feature Line Comments
  FeatureLink ../features/hasLineComments.html
  Supported <span class="hasFeature">âœ“</span>
  Token //
  Example
   // A comment
 row
  Feature Semantic Indentation
  FeatureLink ../features/hasSemanticIndentation.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example

keyboardNav scilab.html postcss.html

import ../footer.scroll
