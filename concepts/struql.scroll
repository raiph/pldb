import ../header.scroll
baseUrl https://pldb.com/concepts/
title StruQL

title StruQL - Query language
 hidden

html
 <a class="trueBaseThemePreviousItem" href="soy.html">&lt;</a>
 <a class="trueBaseThemeNextItem" href="balanced-ternary-notation.html">&gt;</a>

viewSourceUrl https://github.com/breck7/pldb/blob/main/concepts/struql.pldb

startColumns 4

<div class="trueBaseThemeQuickLinks"><a href="/edit.html?id=struql" class="material-symbols-outlined">edit</a></div>

* StruQL is a <a href="/search.html?q=select+type%0D%0Awhere+type+%3D+queryLanguage">query language</a> created in 1999 by Mary Fernández and Dan Suciu and and Igor Tatarinov.
 link /search.html?q=select+type+appeared%0D%0Awhere+appeared+%3D+1999 1999
 link ../lists/creators.html#maryFernandez Mary Fernández
 link ../lists/creators.html#danSuciu Dan Suciu
 link ../lists/creators.html#andIgorTatarinov and Igor Tatarinov

dashboard
 #1430 <span title="TotalRank: 1951 Jobs: 103 Users: 2829 Facts: 862 Links: 986">on PLDB</span>
 25 Years Old

* A StruQL query is a function from a set of input graphs to an output graph.

- StruQL first developed in <a href="../lists/originCommunities.html#atTLabsAndNorthDakotaStateUniversity">AT&T Labs and North Dakota State University</a>
- Read more about StruQL on the web: 1.
 https://www.usenix.org/legacy/events/dsl99/full_papers/fernandez/fernandez.pdf 1.

<br>

codeWithHeader Example from the web:
  // Link root page to page of all accounts
  link Root() -&gt; &quot;Accounts&quot; -&gt; AccountsPage()
  // AccountsPage refers to each account in account database and its associated page
  { where (acct, name, street, city, state, zip) in SQL.query(&quot;AccountDB&quot;, &quot;select acct ...&quot;)
  link AccountsPage() -&gt; &quot;Info&quot; -&gt; Info(acct),
  Info(acct) -&gt; { &quot;Acct&quot; acct, &quot;Name&quot; name, &quot;Street&quot; street,
  &quot;City&quot; city, &quot;State&quot; state, &quot;Zip&quot; zip,
  &quot;AcctPage&quot; AcctPage(acct) },
  AcctPage(acct) -&gt; &quot;Info&quot; -&gt; Info(acct)
  
   // AcctPage refers to non-zero usage records in the usage database.
   { where (date, dom is int, intl is int) in SQL.query(&quot;UsageDB&quot;, &quot;select date ...&quot;, acct)
   dom + intl &gt; 0
   link AcctPage(acct) -&gt; &quot;UsageData&quot; -&gt; UsageData(acct),
   UsageData(acct) -&gt; &quot;Entry&quot; -&gt; UsageEntry(acct, date),
   UsageEntry(acct, date) -&gt; { &quot;Date&quot; date, &quot;Total&quot; (dom + intl) }
   }
   // Query postal database to determine possible aliases for account
   { where XMLRoot{root}, root -&gt; &quot;addresses&quot;.&quot;entry&quot; -&gt; addr,
   addr -&gt; { &quot;name&quot; alias, &quot;address&quot;.&quot;street&quot; street1, &quot;address&quot;.&quot;zip&quot; zip },
   street1 = street
   link Info(acct) -&gt; &quot;Alias&quot; -&gt; alias
   }
   }

endColumns

## Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature Comments
  FeatureLink ../features/hasComments.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   // A comment
 row
  Feature Line Comments
  FeatureLink ../features/hasLineComments.html
  Supported <span class="hasFeature">✓</span>
  Token //
  Example
   // A comment
 row
  Feature Semantic Indentation
  FeatureLink ../features/hasSemanticIndentation.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example

keyboardNav soy.html balanced-ternary-notation.html

import ../footer.scroll
