import ../header.scroll
baseUrl https://pldb.com/concepts/
title High Level Assembly

title High Level Assembly - Assembly language
 hidden

html
 <a class="trueBaseThemePreviousItem" href="ghostscript.html">&lt;</a>
 <a class="trueBaseThemeNextItem" href="emojicode.html">&gt;</a>

viewSourceUrl https://github.com/breck7/pldb/blob/main/concepts/hla.pldb

startColumns 4

<div class="trueBaseThemeQuickLinks"><a href="https://plantation-productions.com/Webster/HighLevelAsm/index.html" class="material-symbols-outlined">home</a> <a href="https://en.wikipedia.org/wiki/High_Level_Assembly"><svg version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="98.05px" height="98.05px" viewBox="0 0 98.05 98.05" style="enable-background:new 0 0 98.05 98.05;" xml:space="preserve"><path d="M98.023,17.465l-19.584-0.056c-0.004,0.711-0.006,1.563-0.017,2.121c1.664,0.039,5.922,0.822,7.257,4.327L66.92,67.155 c-0.919-2.149-9.643-21.528-10.639-24.02l9.072-18.818c1.873-2.863,5.455-4.709,8.918-4.843l-0.01-1.968L55.42,17.489 c-0.045,0.499,0.001,1.548-0.068,2.069c5.315,0.144,7.215,1.334,5.941,4.508c-2.102,4.776-6.51,13.824-7.372,15.475 c-2.696-5.635-4.41-9.972-7.345-16.064c-1.266-2.823,1.529-3.922,4.485-4.004v-1.981l-21.82-0.067 c0.016,0.93-0.021,1.451-0.021,2.131c3.041,0.046,6.988,0.371,8.562,3.019c2.087,4.063,9.044,20.194,11.149,24.514 c-2.685,5.153-9.207,17.341-11.544,21.913c-3.348-7.43-15.732-36.689-19.232-44.241c-1.304-3.218,3.732-5.077,6.646-5.213 l0.019-2.148L0,17.398c0.005,0.646,0.027,1.71,0.029,2.187c4.025-0.037,9.908,6.573,11.588,10.683 c7.244,16.811,14.719,33.524,21.928,50.349c0.002,0.029,2.256,0.059,2.281,0.008c4.717-9.653,10.229-19.797,15.206-29.56 L63.588,80.64c0.005,0.004,2.082,0.016,2.093,0.007c7.962-18.196,19.892-46.118,23.794-54.933c1.588-3.767,4.245-6.064,8.543-6.194 l0.032-1.956L98.023,17.465z"/></svg></a> <a href="/edit.html?id=hla" class="material-symbols-outlined">edit</a></div>

* High Level Assembly, aka High Level Assembly, is an open source <a href="/search.html?q=select+type%0D%0Awhere+type+%3D+assembly">assembly language</a> created in 2011 by Randall Hyde.
 link /search.html?q=select+type+appeared%0D%0Awhere+appeared+%3D+2011 2011
 link ../lists/creators.html#randallHyde Randall Hyde

dashboard
 #486 <span title="TotalRank: 1019 Jobs: 103 Users: 978 Facts: 250 Links: 666">on PLDB</span>
 13 Years Old

* High Level Assembly (HLA) is an high-level assembly language developed by Randall Hyde. It allows the use of higher-level language constructs to aid both beginners and advanced assembly developers. It fully supports advanced data types and object-oriented programming. Read more on Wikipedia...
 https://en.wikipedia.org/wiki/High_Level_Assembly Read more on Wikipedia...

- High Level Assembly website
 https://plantation-productions.com/Webster/HighLevelAsm/index.html
- High Level Assembly Wikipedia page
 https://en.wikipedia.org/wiki/High_Level_Assembly
- High Level Assembly first developed in <a href="../lists/originCommunities.html#plantationProductionsInc">Plantation Productions, Inc</a>
- Explore High Level Assembly snippets on <a href="http://www.rosettacode.org/wiki/Category:HLA">Rosetta Code</a>
- See also: (15 related languages)<a href="assembly-language.html">Assembly language</a>, <a href="linux.html">Linux</a>, <a href="freebsd.html">FreeBSD</a>, <a href="ia-32.html">IA-32</a>, <a href="pascal.html">Pascal</a>, <a href="ada.html">Ada</a>, <a href="modula-2.html">Modula-2</a>, <a href="microsoft-macro-assembler.html">Microsoft Macro Assembler</a>, <a href="turbo-assembler.html">Turbo Assembler</a>, <a href="x86-isa.html">X86</a>, <a href="c.html">C</a>, <a href="nasm.html">Netwide Assembler</a>, <a href="gas.html">GNU Assembler</a>, <a href="coff.html">Common Object File Format</a>, <a href="elf.html">Extensible Linking Format</a>
- Read more about High Level Assembly on the web: 1.
 https://sourceforge.net/projects/hlav1/ 1.

<br>

codeWithHeader Example from the web:
 procedure SetFormat;
 
 static
     chr     :w.CHARRANGE;
     chr2    :w.CHARRANGE;
     cf      :w.CHARFORMAT;
 
 begin SetFormat;
     
     w.SendMessage(hwnd, w.EM_GETMODIFY,0,0);
     push    (eax);
     
     w.SendMessage(hwnd, w.EM_EXGETSEL,0, &amp;chr);
     w.SendMessage(hwnd, w.EM_HIDESELECTION, true,0);
     mov (0, chr2.cpMin);
     mov (-1,chr2.cpMax);
     w.SendMessage(hwnd, w.EM_EXSETSEL,0,&amp;chr2);
     mov (@size(cf), cf.cbSize);
     mov (w.CFM_CHARSET | w.CFM_FACE | w.CFM_SIZE | w.CFM_COLOR, cf.dwMask);
     mov (logfont.lfCharSet, al);
     mov (al,cf.bCharSet);
     mov (logfont.lfPitchAndFamily, al);
     mov (al, cf.bPitchAndFamily);
     w.lstrcpyn(cf.szFaceName,&amp;logfont.lfFaceName,w.LF_FACESIZE);
     mov (logfont.lfHeight, eax);
     neg (eax);
     mov (15,ecx);
     mul     (ecx);
     mov (eax, cf.yHeight);
     mov (rgb, cf.crTextColor);
     w.SendMessage(hwnd, w.EM_SETCHARFORMAT, w.SCF_SELECTION,&amp;cf);
     w.SendMessage(hREd, w.WM_SETFONT, hFont, true);
     w.SendMessage(hREd, w.EM_SETMARGINS, w.EC_LEFTMARGIN,5); 
     pop (eax);
     w.SendMessage(hwnd, w.EM_SETMODIFY, eax,0);
     w.SendMessage(hwnd, w.EM_EXSETSEL,0,&amp;chr);
     w.SendMessage(hwnd,w.EM_HIDESELECTION, false, 0);
 
 end SetFormat;
 

endColumns

## Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature Macros
  FeatureLink ../features/hasMacros.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   // _SortCases_
   //
   //  This routine does a bubble sort on an array
   // of _caseRecord_ objects.  It sorts in ascending
   // order using the "value" field as the key.
   //
   // This is a good old fashioned bubble sort which
   // turns out to be very efficient because:
   //
   //  (1) The list of cases is usually quite small, and
   //  (2) The data is usually already sorted (or mostly sorted).
   
   macro _SortCases_( ary, size ):i, bnd, didswap, temp;
   
       ?bnd := size - 1;
       ?didswap := true;
       #while( didswap )
       
           ?didswap := false;
           ?i := 0;
           #while( i < bnd )
           
               #if( ary[i].value > ary[i+1].value )
               
                   ?temp := ary[i];
                   ?ary[i] := ary[i+1];
                   ?ary[i+1] := temp;
                   ?didswap := true;
                   
               #endif
               ?i := i + 1;
               
           #endwhile
           ?bnd := bnd - 1;
           
       #endwhile;
           
       
   endmacro;
 row
  Feature Line Comments
  FeatureLink ../features/hasLineComments.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   // comment
 row
  Feature Comments
  FeatureLink ../features/hasComments.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example

keyboardNav ghostscript.html emojicode.html

import ../footer.scroll
