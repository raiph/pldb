import ../header.scroll
baseUrl https://pldb.com/concepts/
title FaCT

title FaCT - Programming language
 hidden

html
 <a class="trueBaseThemePreviousItem" href="peoplecode.html">&lt;</a>
 <a class="trueBaseThemeNextItem" href="parenthetic.html">&gt;</a>

viewSourceUrl https://github.com/breck7/pldb/blob/main/concepts/fact-lang.pldb

startColumns 4

<div class="trueBaseThemeQuickLinks"><a href="https://github.com/PLSysSec/FaCT" class="material-symbols-outlined">code</a> <a href="/edit.html?id=fact-lang" class="material-symbols-outlined">edit</a></div>

* FaCT is an open source <a href="/search.html?q=select+type%0D%0Awhere+type+%3D+pl">programming language</a> created in 2017 by Deian Stefan.
 link /search.html?q=select+type+appeared%0D%0Awhere+appeared+%3D+2017 2017
 link ../lists/creators.html#deianStefan Deian Stefan

codeWithHeader Source code:
 git clone https://github.com/PLSysSec/FaCT

dashboard
 #1355 <span title="TotalRank: 1891 Jobs: 103 Users: 1349 Facts: 802 Links: 986">on PLDB</span>
 7 Years Old

* FaCT is a domain-specific language that aids you in writing constant-time code for cryptographic routines that need to be free from timing side channels. This is the compiler for the Flexible and Constant Time cryptographic programming language. Real-world cryptographic code is often written in a subset of C intended to execute in constant-time, thereby avoiding timing side channel vulnerabilities. This C subset eschews structured programming as we know it: if-statements, looping constructs, and procedural abstractions can leak timing information when handling sensitive data. The resulting obfuscation has led to subtle bugs, even in widely-used high-profile libraries like OpenSSL. To address the challenge of writing constant-time cryptographic code, we present FaCT, a crypto DSL that provides high-level but safe language constructs. The FaCT compiler uses a secrecy type system to automatically transform potentially timing-sensitive high-level code into low-level, constant-time LLVM bitcode. We develop the language and type system, formalize the constant-time transformation, and present an empirical evaluation that uses FaCT to implement core crypto routines from several open-source projects including OpenSSL, libsodium, and curve25519-donna. Our evaluation shows that FaCT's design makes it possible to write \emph{readable}, high-level cryptographic code, with \emph{efficient}, \emph{constant-time} behavior.

- FaCT is developed on <a href="https://github.com/PLSysSec/FaCT">GitHub</a> and has 92 stars
- FaCT first developed in <a href="../lists/originCommunities.html#universityOfCaliforniaSanDiego">University of California San Diego</a> and <a href="../lists/originCommunities.html#stanfordUniversity">Stanford University</a> and <a href="../lists/originCommunities.html#piForSecurityAndPrivacy">PI for Security and Privacy</a> and <a href="../lists/originCommunities.html#inriaSophiaAntipolis">Inria Sophia Antipolis</a> and <a href="../lists/originCommunities.html#imdeaSoftwareInstitute">IMDEA Software Institute</a>
- Read more about FaCT on the web: 1.
 https://ranjitjhala.github.io/static/fact_dsl.pdf 1.

<br>

codeWithHeader Example from the web:
 void
 swap_conditional(secret mut uint64[5] a, secret mut uint64[5] b, secret uint64 swapi) {
   if (swapi == 1) {
     for (uint32 i from 0 to 5) {
       secret uint64 x = a[i];
       a[i] = b[i];
       b[i] = x;
     }
   }
 }

endColumns

keyboardNav peoplecode.html parenthetic.html

import ../footer.scroll
