import ../header.scroll
baseUrl https://pldb.com/concepts/
title Multi-User Forth

title Multi-User Forth - Programming language
 hidden

html
 <a class="trueBaseThemePreviousItem" href="api-blueprint.html">&lt;</a>
 <a class="trueBaseThemeNextItem" href="wsdl.html">&gt;</a>

viewSourceUrl https://github.com/breck7/pldb/blob/main/concepts/muf.pldb

startColumns 4

<div class="trueBaseThemeQuickLinks"><a href="https://mud.fandom.com/wiki/MUF_(programming_language)" class="material-symbols-outlined">menu_book</a> <a href="https://en.wikipedia.org/wiki/MUF_(programming_language)"><svg version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="98.05px" height="98.05px" viewBox="0 0 98.05 98.05" style="enable-background:new 0 0 98.05 98.05;" xml:space="preserve"><path d="M98.023,17.465l-19.584-0.056c-0.004,0.711-0.006,1.563-0.017,2.121c1.664,0.039,5.922,0.822,7.257,4.327L66.92,67.155 c-0.919-2.149-9.643-21.528-10.639-24.02l9.072-18.818c1.873-2.863,5.455-4.709,8.918-4.843l-0.01-1.968L55.42,17.489 c-0.045,0.499,0.001,1.548-0.068,2.069c5.315,0.144,7.215,1.334,5.941,4.508c-2.102,4.776-6.51,13.824-7.372,15.475 c-2.696-5.635-4.41-9.972-7.345-16.064c-1.266-2.823,1.529-3.922,4.485-4.004v-1.981l-21.82-0.067 c0.016,0.93-0.021,1.451-0.021,2.131c3.041,0.046,6.988,0.371,8.562,3.019c2.087,4.063,9.044,20.194,11.149,24.514 c-2.685,5.153-9.207,17.341-11.544,21.913c-3.348-7.43-15.732-36.689-19.232-44.241c-1.304-3.218,3.732-5.077,6.646-5.213 l0.019-2.148L0,17.398c0.005,0.646,0.027,1.71,0.029,2.187c4.025-0.037,9.908,6.573,11.588,10.683 c7.244,16.811,14.719,33.524,21.928,50.349c0.002,0.029,2.256,0.059,2.281,0.008c4.717-9.653,10.229-19.797,15.206-29.56 L63.588,80.64c0.005,0.004,2.082,0.016,2.093,0.007c7.962-18.196,19.892-46.118,23.794-54.933c1.588-3.767,4.245-6.064,8.543-6.194 l0.032-1.956L98.023,17.465z"/></svg></a> <a href="/edit.html?id=muf" class="material-symbols-outlined">edit</a></div>

* Multi-User Forth, aka Multi-User Forth, is a <a href="/search.html?q=select+type%0D%0Awhere+type+%3D+pl">programming language</a> created in 1995.
 link /search.html?q=select+type+appeared%0D%0Awhere+appeared+%3D+1995 1995

dashboard
 #254 <span title="TotalRank: 632 Jobs: 103 Users: 2055 Facts: 38 Links: 491">on PLDB</span>
 29 Years Old
 0 <span title="Multi-User Forth repos on GitHub.">Repos</span>

* TinyMUCK or, more broadly, a MUCK, is a type of user-extendable online text-based role-playing game, designed for role playing and social interaction. Backronyms like "Multi-User Chat/Created/Computer/Character/Carnal Kingdom" and "Multi-User Construction Kit" are sometimes cited, but are not the actual origin of the term; "muck" is simply a play on the term MUD.. Read more on Wikipedia...
 https://en.wikipedia.org/wiki/MUF_(programming_language) Read more on Wikipedia...

- Multi-User Forth Wikipedia page
 https://en.wikipedia.org/wiki/MUF_(programming_language)
- Multi-User Forth docs
 https://mud.fandom.com/wiki/MUF_(programming_language)
- There are at least 0 Multi-User Forth repos on <a href="https://github.com/search?q=language:MUF">GitHub</a>
- Multi-User Forth first developed in <a href="../lists/originCommunities.html#universityOfCaliforniaBerkeley">University of California, Berkeley</a>
- file extensions for Multi-User Forth include muf and m
- Explore Multi-User Forth snippets on <a href="http://www.rosettacode.org/wiki/Category:MUF">Rosetta Code</a>
- See also: (2 related languages)<a href="muf.html">Multi-User Forth</a>, <a href="forth.html">Forth</a>

<br>

codeWithHeader Example from the web:
 $include $lib/strings
 $include $lib/match
 lvar check-obj-addr
    
 : check-next-loop (d -- )
    dup not if pop exit then
    dup exit? over thing? or
    me @ 3 pick .controls and if
       dup check-obj-addr @ execute
    then
    next check-next-loop
 ;
    
 : check-contents (d -- )
    contents check-next-loop
 ;
    
 : check-exits (d -- )
    exits check-next-loop
 ;
    
 : exec-err (d mtypestr warnstr -- )
    &quot;On &quot; 4 rotate unparseobj strcat
    &quot;, in it&#39;s &quot; strcat rot strcat
    &quot;, &quot; strcat swap strcat .tell
 ;
    
 : can-linkto? (player object -- i)
    dup &quot;link_ok&quot; flag? if pop pop 1 exit then
    .controls
 ;
    
 : check-exec (d mtype execstr -- )
    dup &quot;@&quot; 1 strncmp if pop pop pop exit then
    1 strcut swap pop
    &quot; &quot; .split pop
    dup &quot;$&quot; 1 strncmp not if
       dup match ok? not if
          &quot; is not a known registered program.&quot; strcat
          exec-err exit
       then
       dup match program? not if
          &quot; is not a program.&quot; strcat
          exec-err exit
       then
       3 pick owner over match can-linkto? not if
          &quot; is not Link_OK.&quot; strcat
          exec-err exit
       then
    else
       dup number? not if
          &quot; is not a program dbref.&quot; strcat
          &quot;@&quot; swap strcat exec-err exit
       then
       dup atoi dbref ok? not if
          &quot; is not a valid program reference.&quot; strcat
          &quot;@&quot; swap strcat exec-err exit
       then
       dup atoi dbref program? not if
          &quot; is not a valid program reference.&quot; strcat
          &quot;@&quot; swap strcat exec-err exit
       then
       3 pick owner over atoi dbref can-linkto? not if
          &quot; is not Link_OK.&quot; strcat
          &quot;@&quot; swap strcat exec-err exit
       then
    then
    pop pop pop
 ;
    
    
 : missing-err ( d s -- )
    swap unparseobj
    &quot; is missing an &quot;
    strcat swap strcat
    &quot; message.&quot; strcat .tell
 ;
    
 : colon-err ( d s -- )
    swap unparseobj
    &quot; has an unnecesary &#39;:&#39; at the start of its &quot;
    strcat swap strcat
    &quot; message.&quot; strcat .tell
 ;
    
 : check-desc (d -- )
    dup desc not if
       &quot;@description&quot; missing-err
    else
       &quot;@description&quot; over
       desc check-exec
    then
 ;
    
 : check-succ (d -- )
    dup succ not if
       &quot;@success&quot; missing-err
    else
       &quot;@success&quot; over
       succ check-exec
    then
 ;
    
 : check-fail (d -- )
    dup fail not if
       &quot;@fail&quot; missing-err
    else
       &quot;@fail&quot; over
       fail check-exec
    then
 ;
    
 : check-drop (d -- )
    dup drop not if
       &quot;@drop&quot; missing-err
    else
       &quot;@drop&quot; over
       drop check-exec
    then
 ;
    
 : check-osucc (d -- )
    dup osucc not if
       &quot;@osuccess&quot; missing-err
    else
       dup osucc &quot;:&quot; 1 strncmp not if
          &quot;@osuccess&quot; colon-err
       else pop
       then
    then
 ;
    
 : check-ofail (d -- )
    dup ofail not if
       &quot;@ofail&quot; missing-err
    else
       dup ofail &quot;:&quot; 1 strncmp not if
          &quot;@ofail&quot; colon-err
       else pop
       then
    then
 ;
    
 : check-odrop (d -- )
    dup odrop not if
       &quot;@odrop&quot; missing-err
    else
       dup odrop &quot;:&quot; 1 strncmp not if
          &quot;@odrop&quot; colon-err
       else pop
       then
    then
 ;
    
    
 $define islocked? (d -- i) getlockstr &quot;*UNLOCKED*&quot; stringcmp $enddef
    
 : islocked_always? (d -- i)
    getlockstr dup &quot;#0&quot; stringcmp not if pop 1 exit then
    dup &quot;#&quot; STRsplit swap pop atoi
    &quot;#&quot; swap intostr strcat
    (lockstr &quot;#dbref&quot;)
    dup &quot;&amp;!&quot; over strcat strcat
    3 pick stringcmp not if pop pop 1 exit then
    &quot;&amp;&quot; over strcat strcat &quot;!&quot; swap strcat
    stringcmp not if 1 exit then
    0
 ;
    
 : check-link ( d -- )
    dup getlink not if
       dup unparseobj &quot; is unlinked.&quot; strcat .tell
    else
       dup getlink over location dbcmp if
          dup islocked? not if
             dup unparseobj
             &quot; is linked to it&#39;s location, but is unlocked.&quot;
             strcat .tell
          then
       else (is not linked to it&#39;s location)
          dup getlink program? if
             dup dup owner swap getlink can-linkto? not if
                dup unparseobj
                &quot; is linked to a program which is not Link_OK.&quot;
                strcat .tell
             then
          then
       then
    then
    pop
 ;
          
 : check-room (d -- )
    dup check-desc
    dup islocked? if
       dup islocked_always? not if
          dup check-succ
       then
       dup check-fail
    then
    dup getlink if
       dup check-drop
       dup check-odrop
    then
    dup check-contents
    check-exits
 ;
    
 : check-exit ( d -- )
    dup check-link
    dup check-desc
    dup getlink dup ok? if
       program? not if
          dup islocked_always? not if
             dup check-succ
             dup check-osucc
             dup check-odrop
          then
          dup islocked? if
             dup check-fail
             dup check-ofail
          then
       then
    else pop
    then
    pop
 ;
    
 : check-thing ( d -- )
    dup check-desc
    dup islocked_always? not if
       dup check-succ
       dup check-osucc
    then
    dup islocked? if
       dup check-fail
       dup check-ofail
    then
    dup check-drop
    dup check-odrop
    check-exits
 ;
    
 : check-player ( d -- )
    dup check-desc
    dup islocked_always? not if
       dup check-succ
       dup check-osucc
    then
    dup islocked? if
       dup check-fail
       dup check-ofail
    then
    dup check-contents
    check-exits
 ;
    
 : check-program ( d -- )
    check-desc
 ;
    
 : check-obj (d -- )
    dup room?   if check-room   exit then
    dup exit?   if check-exit   exit then
    dup thing?  if check-thing  exit then
    dup player? if check-player exit then
    check-program
 ;
    
 : main
    &#39;check-obj check-obj-addr !
    .strip dup not if pop &quot;here&quot; then
    .match_controlled
    dup #-3 dbcmp if pop me @ getlink then
    dup ok? not if pop exit then
    check-obj
    me @ &quot;Check done.&quot; notify
 ;
 

codeWithHeader Example from <a href='https://github.com/leachim6/hello-world/blob/main/m/Muf.muf'>hello-world</a>:
 : main
     me @ &quot;Hello World&quot; notify
 ;
 

endColumns

## Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature Strings
  FeatureLink ../features/hasStrings.html
  Supported <span class="hasFeature">✓</span>
  Token "
  Example
   "Hello world"

keyboardNav api-blueprint.html wsdl.html

import ../footer.scroll
