import ../header.scroll
baseUrl https://pldb.com/concepts/
title Nearley

title Nearley - Grammar language
 hidden

html
 <a class="trueBaseThemePreviousItem" href="owl.html">&lt;</a>
 <a class="trueBaseThemeNextItem" href="moonscript.html">&gt;</a>

viewSourceUrl https://github.com/breck7/pldb/blob/main/concepts/nearley.pldb

startColumns 4

<div class="trueBaseThemeQuickLinks"><a href="https://nearley.js.org/" class="material-symbols-outlined">home</a> <a href="https://github.com/Hardmath123/nearley" class="material-symbols-outlined">code</a> <a href="https://nearley.js.org/docs/how-to-grammar-good" class="material-symbols-outlined">menu_book</a> <a href="/edit.html?id=nearley" class="material-symbols-outlined">edit</a></div>

* Nearley is an open source <a href="/search.html?q=select+type%0D%0Awhere+type+%3D+grammarLanguage">grammar language</a> created in 2014.
 link /search.html?q=select+type+appeared%0D%0Awhere+appeared+%3D+2014 2014

codeWithHeader Source code:
 git clone https://github.com/Hardmath123/nearley

dashboard
 #161 <span title="TotalRank: 459 Jobs: 103 Users: 229 Facts: 127 Links: 986">on PLDB</span>
 10 Years Old
 53 <span title="Nearley repos on GitHub.">Repos</span>

* ðŸ“œðŸ”œðŸŒ² Simple, fast, powerful parser toolkit for JavaScript.

- Nearley website
 https://nearley.js.org/
- Nearley is developed on <a href="https://github.com/Hardmath123/nearley">GitHub</a> and has 3,231 stars
- Nearley docs
 https://nearley.js.org/docs/how-to-grammar-good
- There are at least 53 Nearley repos on <a href="https://github.com/search?q=language:Nearley">GitHub</a>
- Nearley first developed in <a href="../lists/originCommunities.html#httpsGithubComKachNearleyIssues">https://github.com/kach/nearley/issues</a>
- file extensions for Nearley include ne and nearley
- Nearley is written in <a href="javascript.html">JavaScript</a>
- The  Google BigQuery Public Dataset GitHub snapshot shows 32 users using Nearley in 33 repos on <a href="https://api.github.com/search/repositories?q=language:Nearley">GitHub</a>
- GitHub supports <a href="https://github.com/Hardmath123/sublime-nearley" title="The package used for syntax highlighting by GitHub Linguist.">syntax highlighting</a> for Nearley

<br>

codeWithHeader Example from <a href='https://github.com/Hardmath123/sublime-nearley'>Linguist</a>:
 # nearley grammar
 @builtin &quot;string.ne&quot;
 
 @{%
 
 function insensitive(sl) {
     var s = sl.literal;
     result = [];
     for (var i=0; i&lt;s.length; i++) {
         var c = s.charAt(i);
         if (c.toUpperCase() !== c || c.toLowerCase() !== c) {
             result.push(new RegExp(&quot;[&quot; + c.toLowerCase() + c.toUpperCase() + &quot;]&quot;));
         } else {
             result.push({literal: c});
         }
     }
     return {subexpression: [{tokens: result, postprocess: function(d) {return d.join(&quot;&quot;); }}]};
 }
 
 %}
 
 final -&gt; whit? prog whit?  {% function(d) { return d[1]; } %}
 
 prog -&gt; prod  {% function(d) { return [d[0]]; } %}
       | prod whit prog  {% function(d) { return [d[0]].concat(d[2]); } %}
 
 prod -&gt; word whit? (&quot;-&quot;|&quot;=&quot;):+ &quot;&gt;&quot; whit? expression+  {% function(d) { return {name: d[0], rules: d[5]}; } %}
       | word &quot;[&quot; wordlist &quot;]&quot; whit? (&quot;-&quot;|&quot;=&quot;):+ &quot;&gt;&quot; whit? expression+ {% function(d) {return {macro: d[0], args: d[2], exprs: d[8]}} %}
       | &quot;@&quot; whit? js  {% function(d) { return {body: d[2]}; } %}
       | &quot;@&quot; word whit word  {% function(d) { return {config: d[1], value: d[3]}; } %}
       | &quot;@include&quot;  whit? string {% function(d) {return {include: d[2].literal, builtin: false}} %}
       | &quot;@builtin&quot;  whit? string {% function(d) {return {include: d[2].literal, builtin: true }} %}
 
 expression+ -&gt; completeexpression
              | expression+ whit? &quot;|&quot; whit? completeexpression  {% function(d) { return d[0].concat([d[4]]); } %}
 
 expressionlist -&gt; completeexpression
              | expressionlist whit? &quot;,&quot; whit? completeexpression {% function(d) { return d[0].concat([d[4]]); } %}
 
 wordlist -&gt; word
             | wordlist whit? &quot;,&quot; whit? word {% function(d) { return d[0].concat([d[4]]); } %}
 
 completeexpression -&gt; expr  {% function(d) { return {tokens: d[0]}; } %}
                     | expr whit? js  {% function(d) { return {tokens: d[0], postprocess: d[2]}; } %}
 
 expr_member -&gt;
       word {% id %}
     | &quot;$&quot; word {% function(d) {return {mixin: d[1]}} %}
     | word &quot;[&quot; expressionlist &quot;]&quot; {% function(d) {return {macrocall: d[0], args: d[2]}} %} 
     | string &quot;i&quot;:? {% function(d) { if (d[1]) {return insensitive(d[0]); } else {return d[0]; } } %}
     | &quot;%&quot; word {% function(d) {return {token: d[1]}} %}
     | charclass {% id %}
     | &quot;(&quot; whit? expression+ whit? &quot;)&quot; {% function(d) {return {&#39;subexpression&#39;: d[2]} ;} %}
     | expr_member whit? ebnf_modifier {% function(d) {return {&#39;ebnf&#39;: d[0], &#39;modifier&#39;: d[2]}; } %}
 
 ebnf_modifier -&gt; &quot;:+&quot; {% id %} | &quot;:*&quot; {% id %} | &quot;:?&quot; {% id %}
 
 expr -&gt; expr_member
       | expr whit expr_member  {% function(d){ return d[0].concat([d[2]]); } %}
 
 word -&gt; [\w\?\+]  {% function(d){ return d[0]; } %}
       | word [\w\?\+]  {% function(d){ return d[0]+d[1]; } %}
 
 string -&gt; dqstring {% function(d) {return { literal: d[0] }; } %}
 #string -&gt; &quot;\&quot;&quot; charset &quot;\&quot;&quot;  {% function(d) { return { literal: d[1].join(&quot;&quot;) }; } %}
 #
 #charset -&gt; null
 #         | charset char  {% function(d) { return d[0].concat([d[1]]); } %}
 #
 #char -&gt; [^\\&quot;]  {% function(d) { return d[0]; } %}
 #      | &quot;\\&quot; .  {% function(d) { return JSON.parse(&quot;\&quot;&quot;+&quot;\\&quot;+d[1]+&quot;\&quot;&quot;); } %}
 
 charclass -&gt; &quot;.&quot;  {% function(d) { return new RegExp(&quot;.&quot;); } %}
            | &quot;[&quot; charclassmembers &quot;]&quot;  {% function(d) { return new RegExp(&quot;[&quot; + d[1].join(&#39;&#39;) + &quot;]&quot;); } %}
 
 charclassmembers -&gt; null
                   | charclassmembers charclassmember  {% function(d) { return d[0].concat([d[1]]); } %}
 
 charclassmember -&gt; [^\\\]]  {% function(d) { return d[0]; } %}
                  | &quot;\\&quot; .  {% function(d) { return d[0] + d[1]; } %}
 
 js -&gt; &quot;{&quot; &quot;%&quot; jscode &quot;%&quot; &quot;}&quot;  {% function(d) { return d[2]; } %}
 
 jscode -&gt; null  {% function() {return &quot;&quot;;} %}
         | jscode [^%]  {% function(d) {return d[0] + d[1];} %}
         | jscode &quot;%&quot; [^}] {% function(d) {return d[0] + d[1] + d[2]; } %}
 
 # Whitespace with a comment
 whit -&gt; whitraw
       | whitraw? comment whit?
 
 # Optional whitespace with a comment
 whit? -&gt; null
        | whit
 
 # Literally a string of whitespace
 whitraw -&gt; [\s]
          | whitraw [\s]
 
 # A string of whitespace OR the empty string
 whitraw? -&gt; null
           | whitraw
 
 comment -&gt; &quot;#&quot; commentchars &quot;\n&quot;
 commentchars -&gt; null
               | commentchars [^\n]

endColumns

## Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature Booleans
  FeatureLink ../features/hasBooleans.html
  Supported <span class="hasFeature">âœ“</span>
  Token true false
  Example
 row
  Feature Comments
  FeatureLink ../features/hasComments.html
  Supported <span class="hasFeature">âœ“</span>
  Token 
  Example
   # A comment
 row
  Feature Line Comments
  FeatureLink ../features/hasLineComments.html
  Supported <span class="hasFeature">âœ“</span>
  Token #
  Example
   # A comment
 row
  Feature Semantic Indentation
  FeatureLink ../features/hasSemanticIndentation.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example

keyboardNav owl.html moonscript.html

import ../footer.scroll
