import ../header.scroll
baseUrl https://pldb.com/concepts/
title Real-Time Concurrent C

title Real-Time Concurrent C - Programming language
 hidden

html
 <a class="trueBaseThemePreviousItem" href="rdml.html">&lt;</a>
 <a class="trueBaseThemeNextItem" href="real-time-mentat.html">&gt;</a>

viewSourceUrl https://github.com/breck7/pldb/blob/main/concepts/real-time-concurrent-c.pldb

startColumns 4

<div class="trueBaseThemeQuickLinks"><a href="/edit.html?id=real-time-concurrent-c" class="material-symbols-outlined">edit</a></div>

* Real-Time Concurrent C is a <a href="/search.html?q=select+type%0D%0Awhere+type+%3D+pl">programming language</a> created in 1991.
 link /search.html?q=select+type+appeared%0D%0Awhere+appeared+%3D+1991 1991

dashboard
 #3116 <span title="TotalRank: 3899 Jobs: 103 Users: 2832 Facts: 2810 Links: 986">on PLDB</span>
 33 Years Old

* 

- Real-Time Concurrent C is a superset of <a href="/concepts/cpp.html">C++</a>
- Real-Time Concurrent C first developed in <a href="../lists/originCommunities.html#atT">AT&T</a>
- Real-Time Concurrent C on HOPL
 https://hopl.info/showlanguage.prx?exp=7878
- Read more about Real-Time Concurrent C on Semantic Scholar: 1.
 https://semanticscholar.org/paper/a99af939a0ed0b105862d6a569ad6f8864e0a4be 1.
- Read more about Real-Time Concurrent C on the web: 1.
 https://www-ccs.cs.umass.edu/spring/internal/rts_library/node35.html 1.

<br>

endColumns

## Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature Access Modifiers
  FeatureLink ../features/hasAccessModifiers.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Exceptions
  FeatureLink ../features/hasExceptions.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Classes
  FeatureLink ../features/hasClasses.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Threads
  FeatureLink ../features/hasThreads.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Virtual function
  FeatureLink ../features/hasVirtualFunctions.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   class Animal {
    public:
     // Intentionally not virtual:
     void Move(void) {
       std::cout << "This animal moves in some way" << std::endl;
     }
     virtual void Eat(void) = 0;
   };
   
   // The class "Animal" may possess a definition for Eat if desired.
   class Llama : public Animal {
    public:
     // The non virtual function Move is inherited but not overridden.
     void Eat(void) override {
       std::cout << "Llamas eat grass!" << std::endl;
     }
   };
 row
  Feature Templates
  FeatureLink ../features/hasTemplates.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   template <int length>
   Vector<length>& Vector<length>::operator+=(const Vector<length>& rhs)
   {
       for (int i = 0; i < length; ++i)
           value[i] += rhs.value[i];
       return *this;
   }
 row
  Feature Operator Overloading
  FeatureLink ../features/hasOperatorOverloading.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Multiple Inheritance
  FeatureLink ../features/hasMultipleInheritance.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Namespaces
  FeatureLink ../features/hasNamespaces.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   #include <iostream>
   using namespace std;
   
   // Variable created inside namespace
   namespace first
   {
     int val = 500;
   }
    
   // Global variable
   int val = 100;
   // Ways to do it: https://en.cppreference.com/w/cpp/language/namespace
   namespace ns_name { declarations }
   inline namespace ns_name { declarations }
   namespace { declarations }
   ns_name::name
   using namespace ns_name;
   using ns_name::name;
   namespace name = qualified-namespace ;
   namespace ns_name::inline(since C++20)(optional) name { declarations } 
 row
  Feature Function Overloading
  FeatureLink ../features/hasFunctionOverloading.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   // volume of a cube
   int volume(const int s) {
    return s*s*s;
   }
   // volume of a cylinder
   double volume(const double r, const int h) {
     return 3.1415926*r*r*static_cast<double>(h);
   }
 row
  Feature Iterators
  FeatureLink ../features/hasIterators.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   std::vector<int> items;
   items.push_back(5);  // Append integer value '5' to vector 'items'.
   items.push_back(2);  // Append integer value '2' to vector 'items'.
   items.push_back(9);  // Append integer value '9' to vector 'items'.
   
   for (auto it = items.begin(); it != items.end(); ++it) {  // Iterate through 'items'.
     std::cout << *it;  // And print value of 'items' for current index.
   }
 row
  Feature Constructors
  FeatureLink ../features/hasConstructors.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   class Foobar {
    public:
     Foobar(double r = 1.0,
            double alpha = 0.0)  // Constructor, parameters with default values.
         : x_(r * cos(alpha))    // <- Initializer list
     {
       y_ = r * sin(alpha);  // <- Normal assignment
     }
   
    private:
     double x_;
     double y_;
   };
   Foobar a,
          b(3),
          c(5, M_PI/4);
 row
  Feature Single Dispatch
  FeatureLink ../features/hasSingleDispatch.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Partial Application
  FeatureLink ../features/hasPartialApplication.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   // http://www.cplusplus.com/reference/functional/bind/
   // bind example
   #include <iostream>     // std::cout
   #include <functional>   // std::bind
   
   // a function: (also works with function object: std::divides<double> my_divide;)
   double my_divide (double x, double y) {return x/y;}
   
   struct MyPair {
     double a,b;
     double multiply() {return a*b;}
   };
   
   int main () {
     using namespace std::placeholders;    // adds visibility of _1, _2, _3,...
   
     // binding functions:
     auto fn_five = std::bind (my_divide,10,2);               // returns 10/2
     std::cout << fn_five() << '\n';                          // 5
   
     auto fn_half = std::bind (my_divide,_1,2);               // returns x/2
     std::cout << fn_half(10) << '\n';                        // 5
   
     auto fn_invert = std::bind (my_divide,_2,_1);            // returns y/x
     std::cout << fn_invert(10,2) << '\n';                    // 0.2
   
     auto fn_rounding = std::bind<int> (my_divide,_1,_2);     // returns int(x/y)
     std::cout << fn_rounding(10,3) << '\n';                  // 3
   
     MyPair ten_two {10,2};
   
     // binding members:
     auto bound_member_fn = std::bind (&MyPair::multiply,_1); // returns x.multiply()
     std::cout << bound_member_fn(ten_two) << '\n';           // 20
   
     auto bound_member_data = std::bind (&MyPair::a,ten_two); // returns ten_two.a
     std::cout << bound_member_data() << '\n';                // 10
   
     return 0;
   }
 row
  Feature Magic Getters and Setters
  FeatureLink ../features/hasMagicGettersAndSetters.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example

keyboardNav rdml.html real-time-mentat.html

import ../footer.scroll
