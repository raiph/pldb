import ../header.scroll
baseUrl https://pldb.com/concepts/
title LFE

title LFE - Programming language
 hidden

html
 <a class="trueBaseThemePreviousItem" href="antlr.html">&lt;</a>
 <a class="trueBaseThemeNextItem" href="fish.html">&gt;</a>

viewSourceUrl https://github.com/breck7/pldb/blob/main/concepts/lfe.pldb

startColumns 4

<div class="trueBaseThemeQuickLinks"><a href="http://docs.lfe.io/current/index.html" class="material-symbols-outlined">menu_book</a> <a href="https://en.wikipedia.org/wiki/LFE_(programming_language)"><svg version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="98.05px" height="98.05px" viewBox="0 0 98.05 98.05" style="enable-background:new 0 0 98.05 98.05;" xml:space="preserve"><path d="M98.023,17.465l-19.584-0.056c-0.004,0.711-0.006,1.563-0.017,2.121c1.664,0.039,5.922,0.822,7.257,4.327L66.92,67.155 c-0.919-2.149-9.643-21.528-10.639-24.02l9.072-18.818c1.873-2.863,5.455-4.709,8.918-4.843l-0.01-1.968L55.42,17.489 c-0.045,0.499,0.001,1.548-0.068,2.069c5.315,0.144,7.215,1.334,5.941,4.508c-2.102,4.776-6.51,13.824-7.372,15.475 c-2.696-5.635-4.41-9.972-7.345-16.064c-1.266-2.823,1.529-3.922,4.485-4.004v-1.981l-21.82-0.067 c0.016,0.93-0.021,1.451-0.021,2.131c3.041,0.046,6.988,0.371,8.562,3.019c2.087,4.063,9.044,20.194,11.149,24.514 c-2.685,5.153-9.207,17.341-11.544,21.913c-3.348-7.43-15.732-36.689-19.232-44.241c-1.304-3.218,3.732-5.077,6.646-5.213 l0.019-2.148L0,17.398c0.005,0.646,0.027,1.71,0.029,2.187c4.025-0.037,9.908,6.573,11.588,10.683 c7.244,16.811,14.719,33.524,21.928,50.349c0.002,0.029,2.256,0.059,2.281,0.008c4.717-9.653,10.229-19.797,15.206-29.56 L63.588,80.64c0.005,0.004,2.082,0.016,2.093,0.007c7.962-18.196,19.892-46.118,23.794-54.933c1.588-3.767,4.245-6.064,8.543-6.194 l0.032-1.956L98.023,17.465z"/></svg></a> <a href="/edit.html?id=lfe" class="material-symbols-outlined">edit</a></div>

* LFE, aka Lisp Flavored Erlang, is an open source <a href="/search.html?q=select+type%0D%0Awhere+type+%3D+pl">programming language</a> created in 2008 by Robert Virding.
 link /search.html?q=select+type+appeared%0D%0Awhere+appeared+%3D+2008 2008
 link ../lists/creators.html#robertVirding Robert Virding

dashboard
 #119 <span title="TotalRank: 347 Jobs: 103 Users: 841 Facts: 80 Links: 164">on PLDB</span>
 16 Years Old
 51 <span title="LFE repos on GitHub.">Repos</span>

* Lisp Flavored Erlang (LFE) is a functional, concurrent, general-purpose programming language and Lisp dialect built on top of Core Erlang and the Erlang Virtual Machine (BEAM). LFE builds on top of Erlang in order to provide a Lisp syntax for writing distributed, fault-tolerant, soft real-time, non-stop applications. LFE also extends Erlang to support meta-programming with Lisp macros and an improved developer experience with a feature-rich REPL. Read more on Wikipedia...
 https://en.wikipedia.org/wiki/LFE_(programming_language) Read more on Wikipedia...

- LFE Wikipedia page
 https://en.wikipedia.org/wiki/LFE_(programming_language)
- LFE docs
 http://docs.lfe.io/current/index.html
- There are at least 51 LFE repos on <a href="https://github.com/search?q=language:LFE">GitHub</a>
- LFE first developed in <a href="../lists/originCommunities.html#httpsGithubComLfe">https://github.com/lfe</a>
- file extensions for LFE include lfe and hrl
- The  Google BigQuery Public Dataset GitHub snapshot shows 14 users using LFE in 15 repos on <a href="https://api.github.com/search/repositories?q=language:LFE">GitHub</a>
- Explore LFE snippets on <a href="http://www.rosettacode.org/wiki/Category:LFE">Rosetta Code</a>
- GitHub supports <a href="https://github.com/textmate/lisp.tmbundle" title="The package used for syntax highlighting by GitHub Linguist.">syntax highlighting</a> for LFE
- Release Notes for LFE
 http://docs.lfe.io/v0.7/classic-docs/release-notes.html
- Official Blog page for LFE
 https://blog.lfe.io/
- Indeed.com has 0 matches for <a href="https://www.indeed.com/jobs?q=lfe developer">"lfe developer"</a>.
- See also: (6 related languages)<a href="erlang.html">Erlang</a>, <a href="common-lisp.html">Common Lisp</a>, <a href="scheme.html">Scheme</a>, <a href="elixir.html">Elixir</a>, <a href="hy.html">Hy</a>, <a href="lisp.html">Lisp</a>
- Read more about LFE on the web: 1.
 https://lfe.io/ 1.

<br>

codeWithHeader Example from <a href='https://github.com/textmate/lisp.tmbundle'>Linguist</a>:
 ;; Copyright (c) 2013 Duncan McGreggor &lt;oubiwann@cogitat.io&gt;
 ;;
 ;; Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);
 ;; you may not use this file except in compliance with the License.
 ;; You may obtain a copy of the License at
 ;;
 ;;     http://www.apache.org/licenses/LICENSE-2.0
 ;;
 ;; Unless required by applicable law or agreed to in writing, software
 ;; distributed under the License is distributed on an &quot;AS IS&quot; BASIS,
 ;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 ;; See the License for the specific language governing permissions and
 ;; limitations under the License.
 
 ;; File    : church.lfe
 ;; Author  : Duncan McGreggor
 ;; Purpose : Demonstrating church numerals from the lambda calculus
 
 ;; The code below was used to create the section of the user guide here:
 ;;    http://lfe.github.io/user-guide/recursion/5.html
 ;;
 ;; Here is some example usage:
 ;;
 ;; &gt; (slurp &#39;&quot;church.lfe&quot;)
 ;; #(ok church)
 ;; &gt; (zero)
 ;; #Fun&lt;lfe_eval.10.53503600&gt;
 ;; &gt; (church-&gt;int1 (zero))
 ;; 0
 ;; &gt; (church-&gt;int1 (three))
 ;; 3
 ;; &gt; (church-&gt;int1 (five))
 ;; 5
 ;; &gt; (church-&gt;int2 #&#39;five/0)
 ;; 5
 ;; &gt; (church-&gt;int2 (lambda () (get-church 25)))
 ;; 25
 
 (defmodule church
   (export all))
 
 (defun zero ()
   (lambda (s)
     (lambda (x) x)))
 
 (defun one ()
   (lambda (s)
     (lambda (x)
       (funcall s x))))
 
 (defun two ()
   (lambda (s)
     (lambda (x)
       (funcall s
         (funcall s x)))))
 
 (defun three ()
   (lambda (s)
     (lambda (x)
       (funcall s
         (funcall s
           (funcall s x))))))
 
 (defun four ()
   (lambda (s)
     (lambda (x)
       (funcall s
         (funcall s
           (funcall s
             (funcall s x)))))))
 
 (defun five ()
   (get-church 5))
 
 (defun int-successor (n)
   (+ n 1))
 
 (defun church-&gt;int1 (church-numeral)
   &quot;
   Converts a called church numeral to an integer, e.g.:
   &gt; (church-&gt;int1 (five))
   &quot;
   (funcall
     (funcall church-numeral #&#39;int-successor/1) 0))
 
 (defun church-&gt;int2 (church-numeral)
   &quot;
   Converts a non-called church numeral to an integer, e.g.:
   &gt; (church-&gt;int2 #&#39;five/0)
   &quot;
   (funcall
     (funcall
       (funcall church-numeral) #&#39;int-successor/1) 0))
 
 (defun church-successor (church-numeral)
   (lambda (s)
     (lambda (x)
       (funcall s
         (funcall
           (funcall church-numeral s) x)))))
 
 (defun get-church (church-numeral count limit)
   (cond ((== count limit) church-numeral)
         ((/= count limit)
          (get-church
            (church-successor church-numeral)
            (+ 1 count)
            limit))))
 
 (defun get-church (integer)
   (get-church (zero) 0 integer))
 

codeWithHeader Example from <a href='https://en.wikipedia.org/wiki/LFE_(programming_language)'>Wikipedia</a>:
 (defun parse-args (flag)
   &quot;Given one or more command-line arguments, extract the passed values.
 
   For example, if the following was passed via the command line:
 
     $ erl -my-flag my-value-1 -my-flag my-value-2
 
   One could then extract it in an LFE program by calling this function:
 
     (let ((args (parse-args &#39;my-flag)))
       ...
       )
   In this example, the value assigned to the arg variable would be a list
   containing the values my-value-1 and my-value-2.&quot;
   (let ((`#(ok ,data) (init:get_argument flag)))
     (lists:merge data)))
 
 (defun get-pages ()
   &quot;With no argument, assume &#39;url parameter was passed via command line.&quot;
   (let ((urls (parse-args &#39;url)))
     (get-pages urls)))
 
 (defun get-pages (urls)
   &quot;Start inets and make (potentially many) HTTP requests.&quot;
   (inets:start)
   (plists:map
     (lambda (x)
       (get-page x)) urls))
 
 (defun get-page (url)
   &quot;Make a single HTTP request.&quot;
   (let* ((method &#39;get)
          (headers &#39;())
          (request-data `#(,url ,headers))
          (http-options ())
          (request-options &#39;(#(sync false))))
     (httpc:request method request-data http-options request-options)
     (receive
       (`#(http #(,request-id #(error ,reason)))
        (io:format &quot;Error: ~p~n&quot; `(,reason)))
       (`#(http #(,request-id ,result))
        (io:format &quot;Result: ~p~n&quot; `(,result))))))

endColumns

## Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature Comments
  FeatureLink ../features/hasComments.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   ; A comment
 row
  Feature Line Comments
  FeatureLink ../features/hasLineComments.html
  Supported <span class="hasFeature">✓</span>
  Token ;
  Example
   ; A comment
 row
  Feature Semantic Indentation
  FeatureLink ../features/hasSemanticIndentation.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example

keyboardNav antlr.html fish.html

import ../footer.scroll
