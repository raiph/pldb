import ../header.scroll
baseUrl https://pldb.com/concepts/
title S-algol

title S-algol - Programming language
 hidden

html
 <a class="trueBaseThemePreviousItem" href="dns.html">&lt;</a>
 <a class="trueBaseThemeNextItem" href="ec.html">&gt;</a>

viewSourceUrl https://github.com/breck7/pldb/blob/main/concepts/s-algol.pldb

startColumns 4

<div class="trueBaseThemeQuickLinks"><a href="https://en.wikipedia.org/wiki/S-algol"><svg version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="98.05px" height="98.05px" viewBox="0 0 98.05 98.05" style="enable-background:new 0 0 98.05 98.05;" xml:space="preserve"><path d="M98.023,17.465l-19.584-0.056c-0.004,0.711-0.006,1.563-0.017,2.121c1.664,0.039,5.922,0.822,7.257,4.327L66.92,67.155 c-0.919-2.149-9.643-21.528-10.639-24.02l9.072-18.818c1.873-2.863,5.455-4.709,8.918-4.843l-0.01-1.968L55.42,17.489 c-0.045,0.499,0.001,1.548-0.068,2.069c5.315,0.144,7.215,1.334,5.941,4.508c-2.102,4.776-6.51,13.824-7.372,15.475 c-2.696-5.635-4.41-9.972-7.345-16.064c-1.266-2.823,1.529-3.922,4.485-4.004v-1.981l-21.82-0.067 c0.016,0.93-0.021,1.451-0.021,2.131c3.041,0.046,6.988,0.371,8.562,3.019c2.087,4.063,9.044,20.194,11.149,24.514 c-2.685,5.153-9.207,17.341-11.544,21.913c-3.348-7.43-15.732-36.689-19.232-44.241c-1.304-3.218,3.732-5.077,6.646-5.213 l0.019-2.148L0,17.398c0.005,0.646,0.027,1.71,0.029,2.187c4.025-0.037,9.908,6.573,11.588,10.683 c7.244,16.811,14.719,33.524,21.928,50.349c0.002,0.029,2.256,0.059,2.281,0.008c4.717-9.653,10.229-19.797,15.206-29.56 L63.588,80.64c0.005,0.004,2.082,0.016,2.093,0.007c7.962-18.196,19.892-46.118,23.794-54.933c1.588-3.767,4.245-6.064,8.543-6.194 l0.032-1.956L98.023,17.465z"/></svg></a> <a href="/edit.html?id=s-algol" class="material-symbols-outlined">edit</a></div>

* S-algol is a <a href="/search.html?q=select+type%0D%0Awhere+type+%3D+pl">programming language</a> created in 1979 by Ron Morrison and Tony Davie.
 link /search.html?q=select+type+appeared%0D%0Awhere+appeared+%3D+1979 1979
 link ../lists/creators.html#ronMorrison Ron Morrison
 link ../lists/creators.html#tonyDavie Tony Davie

dashboard
 #286 <span title="TotalRank: 694 Jobs: 103 Users: 1698 Facts: 319 Links: 272">on PLDB</span>
 45 Years Old

* S-algol (St Andrews Algol) is a computer programming language derivative of ALGOL 60 developed at the University of St Andrews in 1979 by Ron Morrison and Tony Davie. The language is a modification of ALGOL to contain orthogonal data types that Morrison created for his PhD thesis.  Morrison would go on to become professor at the university and head of the department of computer science. Read more on Wikipedia...
 https://en.wikipedia.org/wiki/S-algol Read more on Wikipedia...

- S-algol Wikipedia page
 https://en.wikipedia.org/wiki/S-algol
- S-algol first developed in <a href="../lists/originCommunities.html#universityOfStAndrews">University of St Andrews</a>
- S-algol on HOPL
 https://hopl.info/showlanguage.prx?exp=869
- See also: (7 related languages)<a href="algol-60.html">ALGOL 60</a>, <a href="ps-algol.html">PS-algol</a>, <a href="unix.html">Unix</a>, <a href="pascal.html">Pascal</a>, <a href="c.html">C</a>, <a href="napier88.html">Napier88</a>, <a href="algol.html">Algol</a>

<br>

codeWithHeader Example from <a href='https://github.com/leachim6/hello-world/blob/main/s/S Algol'>hello-world</a>:
 write &quot;Hello World&quot;
 ?
 

codeWithHeader Example from <a href='https://en.wikipedia.org/wiki/S-algol'>Wikipedia</a>:
 ! Comments are introduced by an exclamation point and continue until end of line.
 
 ! The let keyword introduces declarations of constants and variables
 ! Identifiers start with an alphabetic character followed by alphanumeric characters or the full stop (.)
 ! An initial value must be given, and this determines the data type of declaration
 
 let width := 10                   ! := sets the value of a variable, this is an int
 let animal := &quot;dog&quot;               ! type string
 
 let x := -7 ; let y := x + x      ! ; separates clauses, needed only if there are two or more clauses on a line
 
 let n.a = 6.022e+23               ! = is used to set the value of a constant, this is a cfloat (constant float)
 
 ! if and case can have values and be used in expressions
 let no.of.lives := if animal = &quot;cat&quot; then 9 else 1
 
 ! Sieve of Eratosthenes
 write &quot;Find primes up to n = ?&quot;
 let n = readi                     ! constant values can be set during the program run
 let p = vector 2::n of true       ! vector of bool with bounds 2 to n
 for i = 2 to truncate(sqrt(n)) do ! for indexes are constants so they use = rather than :=
     if p(i) do                    ! vector dereference uses parens like a procedure call
         for j = 2 * i to n by i do
             p(j) := false
 for i = 2 to n do
     if p(i) do write i, &quot;&#39;n&quot;      ! &#39;n in a literal string is a newline
 
 ! structure (record) type for a binary tree of cstrings
 ! the pntr data type can point to a structure of any type, type checking is done at runtime
 structure tree.node(cstring name ; pntr left, right)
 
 ! inserts a new string into the binary tree head
 procedure insert.tree(cpntr head ; cstring new -&gt; pntr)
 ! the case clause ends with a mandatory default option, use default : {} if it is not needed
 case true of
     head = nil       : tree.node(new, nil, nil)
     new &lt; head(name) : { head(left) := insert.tree(head(left), new) ; head }
     new &gt; head(name) : { head(right) := insert.tree(head(right), new) ; head }
     default          : head
 
 procedure print.tree(cpntr head)
 if head ~= nil do                 ! ~= is the not equals operator
 begin
     print.tree(head(left))
     write head(name), &quot;&#39;n&quot;
     print.tree(head(right))
 end
 
 let fruit := nil
 fruit := insert.tree(fruit, &quot;banana&quot;)
 fruit := insert.tree(fruit, &quot;kiwi&quot;)
 fruit := insert.tree(fruit, &quot;apple&quot;)
 fruit := insert.tree(fruit, &quot;peach&quot;)
 print.tree(fruit)                 ! print in sorted order
 
 ! The end of the S-algol program is indicated by ?
 ?

endColumns

## Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature Booleans
  FeatureLink ../features/hasBooleans.html
  Supported <span class="hasFeature">✓</span>
  Token true false
  Example
 row
  Feature Strings
  FeatureLink ../features/hasStrings.html
  Supported <span class="hasFeature">✓</span>
  Token "
  Example
   "Hello world"
 row
  Feature Print() Debugging
  FeatureLink ../features/hasPrintDebugging.html
  Supported <span class="hasFeature">✓</span>
  Token write
  Example
 row
  Feature Comments
  FeatureLink ../features/hasComments.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   ! A comment
 row
  Feature Line Comments
  FeatureLink ../features/hasLineComments.html
  Supported <span class="hasFeature">✓</span>
  Token !
  Example
   ! A comment
 row
  Feature Semantic Indentation
  FeatureLink ../features/hasSemanticIndentation.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example

keyboardNav dns.html ec.html

import ../footer.scroll
