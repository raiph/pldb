import ../header.scroll
baseUrl https://pldb.io/concepts/
title DOML

title DOML - Data notation
 hidden

html
 <a class="trueBaseThemePreviousItem" href="mech-lang.html">&lt;</a>
 <a class="trueBaseThemeNextItem" href="smiles-format.html">&gt;</a>

viewSourceUrl https://github.com/breck7/pldb/blob/main/concepts/doml.pldb

startColumns 4

<div class="trueBaseThemeQuickLinks"><a href="https://github.com/DOML-Lang/DOML" class="material-symbols-outlined">code</a> <a href="/edit.html?id=doml" class="material-symbols-outlined">edit</a></div>

* DOML, aka Data Oriented Markup Language, is a <a href="/search.html?q=select+type%0D%0Awhere+type+%3D+dataNotation">data notation</a> created in 2017.
 link /search.html?q=select+type+appeared%0D%0Awhere+appeared+%3D+2017 2017

codeWithHeader Source code:
 git clone https://github.com/DOML-Lang/DOML

dashboard
 #881 <span title="TotalRank: 1444 Jobs: 103 Users: 2358 Facts: 355 Links: 986">on PLDB</span>
 7 Years Old

* The specification document for DOML

- DOML is developed on <a href="https://github.com/DOML-Lang/DOML">GitHub</a> and has 4 stars
- DOML first developed in <a href="../lists/originCommunities.html#httpsGithubComDomlLang">https://github.com/DOML-Lang</a>

<br>

codeWithHeader Example from the web:
 # Version 0.3
 // Construct a new Color
 Test = Color() {
   RGB = 255, 64, 128,
 }
 
 // Constructors do exist
 // the parameter names are purely for your own merit, they will check if its possible however (will be possible on most systems)
 TheSame = Color::Normalized(r: 1, g: 0.25, b: 0.5) {
   Name = &quot;Bob&quot;
 }
 
 // You can also just declare an object without scoping it
 Other = Color()
 Other.Name = &quot;X&quot;
 
 // You can declare random other values
 MyValue = 2
 
 // You can also edit the original Test at any point EITHER by doing
 Test.R = 50
 // Or by doing
 Test.{
   G = 128
 }
 
 // You can declare arrays like
 ArrayObject = []Color {
   ::Normalized(0.95, 0.55, 0.22){
     Name = &quot;Other&quot;, // Trailing commas are always allowed
   },
   // You can still do an empty construction
   ::() {
     RGB = 50, 25, 125,
   },
   // And thus you can leave out the ::()
   {
     RGB = 50, 25, 125,
   },
 }
 
 // You can also copy objects by doing
 NewObj = Other
 
 // Or can do something like
 NewObj.Name = ArrayObject[0].Name
 
 // You can also declare arrays inside object definitions
 MyTags = Tags() {
   // Note: all have to be of the same type
   SetTags = [&quot;Hello&quot;, &quot;Other&quot;, &quot;bits&quot;, &quot;bobs&quot;, &quot;kick&quot;]
   Name = MyTags.GetTags[0] // And indexing them works like you would think
 }
 
 // You can declare dictionaries like
 // Dictionaries within objects can also be created similarly
 MyDictionary = [String : Color] {
   { 
     &quot;Bob&quot; : Color::Normalized(0.5, 1.2, 3.5) {
       Name = &quot;Bob&#39;s Color&quot;
     }
   },
 }
 // No need to keep classes around in this example
 # Deinit all

endColumns

keyboardNav mech-lang.html smiles-format.html

import ../footer.scroll
