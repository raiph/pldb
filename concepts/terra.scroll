import ../header.scroll
baseUrl https://pldb.com/concepts/
title Terra

title Terra - Programming language
 hidden

html
 <a class="trueBaseThemePreviousItem" href="dot.html">&lt;</a>
 <a class="trueBaseThemeNextItem" href="idyll.html">&gt;</a>

viewSourceUrl https://github.com/breck7/pldb/blob/main/concepts/terra.pldb

startColumns 4

<div class="trueBaseThemeQuickLinks"><a href="http://terralang.org/" class="material-symbols-outlined">home</a> <a href="https://github.com/zdevito/terra" class="material-symbols-outlined">code</a> <a href="https://docs.terra.money/" class="material-symbols-outlined">menu_book</a> <a href="/edit.html?id=terra" class="material-symbols-outlined">edit</a></div>

* Terra is an open source <a href="/search.html?q=select+type%0D%0Awhere+type+%3D+pl">programming language</a> created in 2012.
 link /search.html?q=select+type+appeared%0D%0Awhere+appeared+%3D+2012 2012

codeWithHeader Source code:
 git clone https://github.com/zdevito/terra

dashboard
 #165 <span title="TotalRank: 468 Jobs: 103 Users: 274 Facts: 91 Links: 986">on PLDB</span>
 12 Years Old
 410 <span title="Terra repos on GitHub.">Repos</span>

* Terra is a low-level system programming language that is embedded in and meta-programmed by the Lua programming language:

- Terra website
 http://terralang.org/
- Terra is developed on <a href="https://github.com/zdevito/terra">GitHub</a> and has 2,432 stars
- Terra docs
 https://docs.terra.money/
- There are at least 410 Terra repos on <a href="https://github.com/search?q=language:Terra">GitHub</a>
- file extensions for Terra include t
- The  Google BigQuery Public Dataset GitHub snapshot shows 195 users using Terra in 206 repos on <a href="https://api.github.com/search/repositories?q=language:Terra">GitHub</a>
- Explore Terra snippets on <a href="http://www.rosettacode.org/wiki/Category:Terra">Rosetta Code</a>
- GitHub supports <a href="https://github.com/pyk/sublime-terra" title="The package used for syntax highlighting by GitHub Linguist.">syntax highlighting</a> for Terra

<br>

codeWithHeader Example from the web:
 -- This top-level code is plain Lua code.
 function printhello()
     -- This is a plain Lua function
     print(&quot;Hello, Lua!&quot;)
 end
 printhello()
 
 -- Terra is backwards compatible with C, we&#39;ll use C&#39;s io library in our example.
 C = terralib.includec(&quot;stdio.h&quot;)
 
 -- The keyword &#39;terra&#39; introduces a new Terra function.
 terra hello(argc : int, argv : &amp;rawstring)
     -- Here we call a C function from Terra
     C.printf(&quot;Hello, Terra!\n&quot;)
     return 0
 end
 
 -- You can call Terra functions directly from Lua, they are JIT compiled 
 -- using LLVM to create machine code
 hello(0,nil)
 
 -- Terra functions are first-class values in Lua, and can be introspected 
 -- and meta-programmed using it
 hello:disas()
 --[[ output:
     assembly for function at address 0x60e6010
     0x60e6010(+0):    push  rax
     0x60e6011(+1):    movabs  rdi, 102129664
     0x60e601b(+11):   movabs  rax, 140735712154681
     0x60e6025(+21):   call  rax
     0x60e6027(+23):   xor eax, eax
     0x60e6029(+25):   pop rdx
     0x60e602a(+26):   ret
 ]]
 
 -- You can save Terra code as executables, object files, or shared libraries 
 -- and link them into existing programs
 terralib.saveobj(&quot;helloterra&quot;,{ main = hello })

codeWithHeader Example from <a href='https://github.com/leachim6/hello-world/blob/main/t/Terra.t'>hello-world</a>:
 print(&quot;Hello World&quot;)
 

codeWithHeader Example from <a href='https://github.com/pyk/sublime-terra'>Linguist</a>:
 C = terralib.includecstring [[
 	#include &lt;stdio.h&gt;
 	#include &lt;stdlib.h&gt;
 ]]
 local arraytypes = {}
 function Array(T)
 	local struct ArrayImpl {
 		data : &amp;T;
 		N : int;
 	}
 	function ArrayImpl.metamethods.__typename(self)
 	    return &quot;Array(&quot;..tostring(T)..&quot;)&quot;
 	end
 	arraytypes[ArrayImpl] = true
 	terra ArrayImpl:init(N : int)
 		self.data = [&amp;T](C.malloc(N*sizeof(T)))
 		self.N = N
 	end
 	terra ArrayImpl:free()
 		C.free(self.data)
 	end
 	ArrayImpl.metamethods.__apply = macro(function(self,idx)
 		return `self.data[idx]
 	end)
 	ArrayImpl.metamethods.__methodmissing = macro(function(methodname,selfexp,...)
 		local args = terralib.newlist {...}
 		local i = symbol(int)
 		local promotedargs = args:map(function(a)
 			if arraytypes[a:gettype()] then
 				return `a(i)
 			else
 				return a
 			end
 		end)
 		return quote
 			var self = selfexp
 			var r : ArrayImpl
 			r:init(self.N)
 			for [i] = 0,r.N do
 				r.data[i] = self.data[i]:[methodname](promotedargs)
 			end
 		in
 			r
 		end
 	end)
 	return ArrayImpl
 end
 
 struct Complex {
 	real : float;
 	imag : float;
 }
 
 terra Complex:add(c : Complex) 
 	return Complex { self.real + c.real, self.imag + c.imag }
 end
 
 ComplexArray = Array(Complex)
 N = 10
 terra testit()
 	var ca : ComplexArray
 	ca:init(N)
 	for i = 0,N do
 		ca(i) = Complex { i, i + 1 }
 	end
 	var ra = ca:add(ca)
 	return ra
 end
 local r = testit()
 assert(r.N == N)
 for i = 0,N-1 do
 	assert(r.data[i].real == 2*i)
 	assert(r.data[i].imag == 2*(i+1))
 end
 assert(tostring(Array(int)) == &quot;Array(int32)&quot;)

endColumns

## Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature Strings
  FeatureLink ../features/hasStrings.html
  Supported <span class="hasFeature">✓</span>
  Token "
  Example
   "Hello world"
 row
  Feature Print() Debugging
  FeatureLink ../features/hasPrintDebugging.html
  Supported <span class="hasFeature">✓</span>
  Token print
  Example
 row
  Feature Comments
  FeatureLink ../features/hasComments.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   -- A comment
 row
  Feature Line Comments
  FeatureLink ../features/hasLineComments.html
  Supported <span class="hasFeature">✓</span>
  Token --
  Example
   -- A comment
 row
  Feature Semantic Indentation
  FeatureLink ../features/hasSemanticIndentation.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example

keyboardNav dot.html idyll.html

import ../footer.scroll
