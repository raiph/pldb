import ../header.scroll
baseUrl https://pldb.com/concepts/
title CIL

title CIL - Programming language
 hidden

html
 <a class="trueBaseThemePreviousItem" href="oberon.html">&lt;</a>
 <a class="trueBaseThemeNextItem" href="v.html">&gt;</a>

viewSourceUrl https://github.com/breck7/pldb/blob/main/concepts/cil.pldb

startColumns 4

<div class="trueBaseThemeQuickLinks"><a href="https://riju.codes/cil" class="material-symbols-outlined">terminal</a> <a href="http://people.eecs.berkeley.edu/~necula/cil/" class="material-symbols-outlined">menu_book</a> <a href="https://en.wikipedia.org/wiki/Common_Intermediate_Language"><svg version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="98.05px" height="98.05px" viewBox="0 0 98.05 98.05" style="enable-background:new 0 0 98.05 98.05;" xml:space="preserve"><path d="M98.023,17.465l-19.584-0.056c-0.004,0.711-0.006,1.563-0.017,2.121c1.664,0.039,5.922,0.822,7.257,4.327L66.92,67.155 c-0.919-2.149-9.643-21.528-10.639-24.02l9.072-18.818c1.873-2.863,5.455-4.709,8.918-4.843l-0.01-1.968L55.42,17.489 c-0.045,0.499,0.001,1.548-0.068,2.069c5.315,0.144,7.215,1.334,5.941,4.508c-2.102,4.776-6.51,13.824-7.372,15.475 c-2.696-5.635-4.41-9.972-7.345-16.064c-1.266-2.823,1.529-3.922,4.485-4.004v-1.981l-21.82-0.067 c0.016,0.93-0.021,1.451-0.021,2.131c3.041,0.046,6.988,0.371,8.562,3.019c2.087,4.063,9.044,20.194,11.149,24.514 c-2.685,5.153-9.207,17.341-11.544,21.913c-3.348-7.43-15.732-36.689-19.232-44.241c-1.304-3.218,3.732-5.077,6.646-5.213 l0.019-2.148L0,17.398c0.005,0.646,0.027,1.71,0.029,2.187c4.025-0.037,9.908,6.573,11.588,10.683 c7.244,16.811,14.719,33.524,21.928,50.349c0.002,0.029,2.256,0.059,2.281,0.008c4.717-9.653,10.229-19.797,15.206-29.56 L63.588,80.64c0.005,0.004,2.082,0.016,2.093,0.007c7.962-18.196,19.892-46.118,23.794-54.933c1.588-3.767,4.245-6.064,8.543-6.194 l0.032-1.956L98.023,17.465z"/></svg></a> <a href="/edit.html?id=cil" class="material-symbols-outlined">edit</a></div>

* CIL, aka Common Intermediate Language, is a <a href="/search.html?q=select+type%0D%0Awhere+type+%3D+pl">programming language</a> created in 2000.
 link /search.html?q=select+type+appeared%0D%0Awhere+appeared+%3D+2000 2000

dashboard
 #133 <span title="TotalRank: 386 Jobs: 103 Users: 522 Facts: 191 Links: 92">on PLDB</span>
 24 Years Old

* Try now: <a href="https://riju.codes/cil">Riju</a>

* Common Intermediate Language (CIL, pronounced either sil or kil), formerly called Microsoft Intermediate Language (MSIL), is the lowest-level human-readable programming language defined by the Common Language Infrastructure (CLI) specification and is used by the .NET Framework and Mono. Languages which target a CLI-compatible runtime environment compile to CIL, which is assembled into an object code that has a bytecode-style format. CIL is an object-oriented assembly language, and is entirely stack-based. Read more on Wikipedia...
 https://en.wikipedia.org/wiki/Common_Intermediate_Language Read more on Wikipedia...

- CIL Wikipedia page
 https://en.wikipedia.org/wiki/Common_Intermediate_Language
- CIL docs
 http://people.eecs.berkeley.edu/~necula/cil/
- CIL first developed in <a href="../lists/originCommunities.html#microsoft">Microsoft</a>
- CIL appears in the <a href="https://www.tiobe.com/tiobe-index/">TIOBE Index</a>
- Indeed.com has 0 matches for <a href="https://www.indeed.com/jobs?q=cil developer">"cil developer"</a>.
- See also: (6 related languages)<a href="cli-assembly.html">Assembly CLI</a>, <a href="assembly-language.html">Assembly language</a>, <a href="csharp.html">C#</a>, <a href="x86-isa.html">X86</a>, <a href="java-bytecode.html">Java Bytecode</a>, <a href="visual-basic.net.html">Visual Basic .NET</a>

<br>

codeWithHeader Example from the web:
 .assembly Hello {}
 .assembly extern mscorlib {}
 .method static void Main()
 {
     .entrypoint
     .maxstack 1
     ldstr &quot;Hello, world!&quot;
     call void [mscorlib]System.Console::WriteLine(string)
     ret
 }

codeWithHeader Example from <a href='https://riju.codes/cil'>Riju</a>:
 .assembly main {}
 .class Main
 {
   .method static void Main() cil managed
   {
     .entrypoint
     ldstr &quot;Hello, world!&quot;
     call void [mscorlib]System.Console::WriteLine(string)
     ret
   }
 }

codeWithHeader Example from <a href='https://github.com/leachim6/hello-world/blob/main/c/Cil.il'>hello-world</a>:
 // ilasm cil.il
 .assembly HelloWorld {}
 .method public static void Main() cil managed
 {
      .entrypoint
      .maxstack 1
      ldstr &quot;Hello World&quot;
      call void [mscorlib]System.Console::WriteLine(string)
      ret
 }
 

codeWithHeader Example from <a href='https://en.wikipedia.org/wiki/Common_Intermediate_Language'>Wikipedia</a>:
 .method assembly static void modopt([mscorlib]System.Runtime.CompilerServices.CallConvCdecl) 
         test_pointer_operations(int32 param) cil managed
 {
   .vtentry 1 : 1
   // Code size       44 (0x2c)
   .maxstack  2
   .locals ([0] int32* ptr,
            [1] valuetype A* V_1,
            [2] valuetype A* a,
            [3] int32 k)
 // k = 0;
   IL_0000:  ldc.i4.0 
   IL_0001:  stloc.3
 // ptr = &amp;k;
   IL_0002:  ldloca.s   k // load local&#39;s address instruction
   IL_0004:  stloc.0
 // *ptr = 1;
   IL_0005:  ldloc.0
   IL_0006:  ldc.i4.1
   IL_0007:  stind.i4 // indirection instruction
 // ptr = &amp;param
   IL_0008:  ldarga.s   param // load parameter&#39;s address instruction
   IL_000a:  stloc.0
 // *ptr = 2
   IL_000b:  ldloc.0
   IL_000c:  ldc.i4.2
   IL_000d:  stind.i4
 // a = new A;
   IL_000e:  ldloca.s   a
   IL_0010:  call       valuetype A* modopt([mscorlib]System.Runtime.CompilerServices.CallConvThiscall) &#39;A.{ctor}&#39;(valuetype A* modopt([mscorlib]System.Runtime.CompilerServices.IsConst) modopt([mscorlib]System.Runtime.CompilerServices.IsConst))
   IL_0015:  pop
 // ptra = &amp;a;
   IL_0016:  ldloca.s   a
   IL_0018:  stloc.1
 // ptra-&gt;meth();
   IL_0019:  ldloc.1
   IL_001a:  dup
   IL_001b:  ldind.i4 // reading the VMT for virtual call
   IL_001c:  ldind.i4
   IL_001d:  calli      unmanaged stdcall void modopt([mscorlib]System.Runtime.CompilerServices.CallConvStdcall)(native int)
   IL_0022:  ret
 } // end of method &#39;Global Functions&#39;::test_pointer_operations

endColumns

## Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature Strings
  FeatureLink ../features/hasStrings.html
  Supported <span class="hasFeature">✓</span>
  Token "
  Example
   "Hello world"
 row
  Feature Print() Debugging
  FeatureLink ../features/hasPrintDebugging.html
  Supported <span class="hasFeature">✓</span>
  Token call void [mscorlib]System.Console::WriteLine
  Example
 row
  Feature Comments
  FeatureLink ../features/hasComments.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   // A comment
 row
  Feature Line Comments
  FeatureLink ../features/hasLineComments.html
  Supported <span class="hasFeature">✓</span>
  Token //
  Example
   // A comment
 row
  Feature Semantic Indentation
  FeatureLink ../features/hasSemanticIndentation.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example

keyboardNav oberon.html v.html

import ../footer.scroll
