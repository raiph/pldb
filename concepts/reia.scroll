import ../header.scroll
baseUrl https://pldb.com/concepts/
title Reia

title Reia - Programming language
 hidden

html
 <a class="trueBaseThemePreviousItem" href="datascript.html">&lt;</a>
 <a class="trueBaseThemeNextItem" href="smarty.html">&gt;</a>

viewSourceUrl https://github.com/breck7/pldb/blob/main/concepts/reia.pldb

startColumns 4

<div class="trueBaseThemeQuickLinks"><a href="http://reia-lang.org" class="material-symbols-outlined">home</a> <a href="https://github.com/tarcieri/reia" class="material-symbols-outlined">code</a> <a href="/edit.html?id=reia" class="material-symbols-outlined">edit</a></div>

* Reia is a <a href="/search.html?q=select+type%0D%0Awhere+type+%3D+pl">programming language</a> created in 2008.
 link /search.html?q=select+type+appeared%0D%0Awhere+appeared+%3D+2008 2008

codeWithHeader Source code:
 git clone https://github.com/tarcieri/reia

dashboard
 #451 <span title="TotalRank: 960 Jobs: 103 Users: 586 Facts: 271 Links: 986">on PLDB</span>
 16 Years Old

* Ruby-like hybrid OOP/functional programming language for BEAM, the Erlang VM

- Reia website
 http://reia-lang.org
- Reia is developed on <a href="https://github.com/tarcieri/reia">GitHub</a> and has 777 stars
- Reia first developed in <a href="../lists/originCommunities.html#httpsGithubComTarcieriReiaIssues">https://github.com/tarcieri/reia/issues</a>
- <a href="http://reia-lang.org">reia-lang.org</a> was registered in 2008
- Read more about Reia on the web: 1.
 http://www.unlimitednovelty.com/2011/06/why-im-stopping-work-on-reia.html 1.

<br>

codeWithHeader Example from the web:
 # Hello, world!
 &quot;Hello, world!&quot;.puts()
 
 # Assignment
 number = 42
 opposite = true
 
 # Conditions
 number = -42 if opposite
 
 # Lists (stored as immutable singly-linked lists)
 list = [1, 2, 3, 4, 5]
 
 # Tuples (think of them as immutable arrays)
 tuple = (1, 2, 3, 4, 5)
 
 # Atoms (known as symbols to Ruby people)
 # Think of them as an open-ended enumeration
 atom = :up_and_atom
 
 # Dicts (also known as hashes to Ruby people)
 dict = {:foo =&gt; 1, :bar =&gt; 2, :baz =&gt; 3}
 
 # Strings (unlike Erlang, Reia has a real String type!)
 string = &quot;I&#39;m a string! Woohoo I&#39;m a string! #{&#39;And I interpolate too!&#39;}&quot;
 
 # Ranges
 range = 0..42
 
 # Funs (anonymous functions, a.k.a. lambdas, procs, closures, etc.)
 # Calling me with plustwo(40) would return 42
 plustwo = fun(n) { n + 2 }
 
 # Modules (collections of functions)
 # Calling Plusser.addtwo(40) would return 42
 module Plusser
   def addtwo(n)
     n + 2
   end
 end
 
 # Classes (of immutable objects. Once created objects can&#39;t be changed!)
 class Adder
   # Reia supports binding instance variables directly when they&#39;re passed
   # as arguments to initialize
   def initialize(@n); end
 
   def plus(n)
     @n + n
   end
 end
 
 # Instantiate classes by calling Classname(arg1, arg2, ...)
 # For you Ruby people who want Classname.new(...) this is coming soon!
 fortytwo = Adder(40).plus(2)
 
 # Function references can be obtained by omitting parens from a function call,
 # like JavaScript or Python
 numbers = [1,2,3]
 reverser = [1,2,3].reverse
 
 # Function references can be invoked just like lambdas
 reversed = reverser() # reversed is now [3,2,1]
 
 # You can add a ! to the end of any method to rebind the method receiver to 
 # the return value of the given method minus the bang.
 numbers.reverse!() # numbers is now [3,2,1]
 
 # List comprehensions
 doubled = [n * 2 for n in numbers] # doubled is [6,4,2]

endColumns

## Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature Comments
  FeatureLink ../features/hasComments.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   # A comment
 row
  Feature Line Comments
  FeatureLink ../features/hasLineComments.html
  Supported <span class="hasFeature">✓</span>
  Token #
  Example
   # A comment
 row
  Feature Assignment
  FeatureLink ../features/hasAssignment.html
  Supported <span class="hasFeature">✓</span>
  Token =
  Example

## HackerNews discussions of Reia

pipeTable
 title|titleLink|date|score|comments
 Reia - Ruby's powerful syntax with Erlang concurrency and fault-tolerance|https://news.ycombinator.com/item?id=1889905|11/10/2010|2|1

keyboardNav datascript.html smarty.html

import ../footer.scroll
