import ../header.scroll
baseUrl https://pldb.com/concepts/
title Ada

title Ada - Programming language
 hidden

html
 <a class="trueBaseThemePreviousItem" href="scala.html">&lt;</a>
 <a class="trueBaseThemeNextItem" href="rust.html">&gt;</a>

viewSourceUrl https://github.com/breck7/pldb/blob/main/concepts/ada.pldb

startColumns 4

<div class="trueBaseThemeQuickLinks"><a href="http://www.adaic.org" class="material-symbols-outlined">home</a> <a href="https://riju.codes/ada" class="material-symbols-outlined">terminal</a> <a href="https://pyjarrett.github.io/programming-with-ada/" class="material-symbols-outlined">menu_book</a> <a href="http://www.ada-auth.org/comment.html" class="material-symbols-outlined">mail</a> <a href="https://en.wikipedia.org/wiki/Ada_(programming_language)"><svg version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="98.05px" height="98.05px" viewBox="0 0 98.05 98.05" style="enable-background:new 0 0 98.05 98.05;" xml:space="preserve"><path d="M98.023,17.465l-19.584-0.056c-0.004,0.711-0.006,1.563-0.017,2.121c1.664,0.039,5.922,0.822,7.257,4.327L66.92,67.155 c-0.919-2.149-9.643-21.528-10.639-24.02l9.072-18.818c1.873-2.863,5.455-4.709,8.918-4.843l-0.01-1.968L55.42,17.489 c-0.045,0.499,0.001,1.548-0.068,2.069c5.315,0.144,7.215,1.334,5.941,4.508c-2.102,4.776-6.51,13.824-7.372,15.475 c-2.696-5.635-4.41-9.972-7.345-16.064c-1.266-2.823,1.529-3.922,4.485-4.004v-1.981l-21.82-0.067 c0.016,0.93-0.021,1.451-0.021,2.131c3.041,0.046,6.988,0.371,8.562,3.019c2.087,4.063,9.044,20.194,11.149,24.514 c-2.685,5.153-9.207,17.341-11.544,21.913c-3.348-7.43-15.732-36.689-19.232-44.241c-1.304-3.218,3.732-5.077,6.646-5.213 l0.019-2.148L0,17.398c0.005,0.646,0.027,1.71,0.029,2.187c4.025-0.037,9.908,6.573,11.588,10.683 c7.244,16.811,14.719,33.524,21.928,50.349c0.002,0.029,2.256,0.059,2.281,0.008c4.717-9.653,10.229-19.797,15.206-29.56 L63.588,80.64c0.005,0.004,2.082,0.016,2.093,0.007c7.962-18.196,19.892-46.118,23.794-54.933c1.588-3.767,4.245-6.064,8.543-6.194 l0.032-1.956L98.023,17.465z"/></svg></a> <a href="https://reddit.com/r/ada"><svg role="img" width="32px" height="32px" viewBox="0 0 32 32" xmlns="http://www.w3.org/2000/svg"><path d="M 18.65625 4 C 16.558594 4 15 5.707031 15 7.65625 L 15 11.03125 C 12.242188 11.175781 9.742188 11.90625 7.71875 13.0625 C 6.945313 12.316406 5.914063 12 4.90625 12 C 3.816406 12 2.707031 12.355469 1.9375 13.21875 L 1.9375 13.25 L 1.90625 13.28125 C 1.167969 14.203125 0.867188 15.433594 1.0625 16.65625 C 1.242188 17.777344 1.898438 18.917969 3.03125 19.65625 C 3.023438 19.769531 3 19.882813 3 20 C 3 22.605469 4.574219 24.886719 6.9375 26.46875 C 9.300781 28.050781 12.488281 29 16 29 C 19.511719 29 22.699219 28.050781 25.0625 26.46875 C 27.425781 24.886719 29 22.605469 29 20 C 29 19.882813 28.976563 19.769531 28.96875 19.65625 C 30.101563 18.917969 30.757813 17.777344 30.9375 16.65625 C 31.132813 15.433594 30.832031 14.203125 30.09375 13.28125 L 30.0625 13.25 C 29.292969 12.386719 28.183594 12 27.09375 12 C 26.085938 12 25.054688 12.316406 24.28125 13.0625 C 22.257813 11.90625 19.757813 11.175781 17 11.03125 L 17 7.65625 C 17 6.675781 17.558594 6 18.65625 6 C 19.175781 6 19.820313 6.246094 20.8125 6.59375 C 21.65625 6.890625 22.75 7.21875 24.15625 7.3125 C 24.496094 8.289063 25.414063 9 26.5 9 C 27.875 9 29 7.875 29 6.5 C 29 5.125 27.875 4 26.5 4 C 25.554688 4 24.738281 4.535156 24.3125 5.3125 C 23.113281 5.242188 22.246094 4.992188 21.46875 4.71875 C 20.566406 4.402344 19.734375 4 18.65625 4 Z M 16 13 C 19.152344 13 21.964844 13.867188 23.9375 15.1875 C 25.910156 16.507813 27 18.203125 27 20 C 27 21.796875 25.910156 23.492188 23.9375 24.8125 C 21.964844 26.132813 19.152344 27 16 27 C 12.847656 27 10.035156 26.132813 8.0625 24.8125 C 6.089844 23.492188 5 21.796875 5 20 C 5 18.203125 6.089844 16.507813 8.0625 15.1875 C 10.035156 13.867188 12.847656 13 16 13 Z M 4.90625 14 C 5.285156 14 5.660156 14.09375 5.96875 14.25 C 4.882813 15.160156 4.039063 16.242188 3.53125 17.4375 C 3.277344 17.117188 3.125 16.734375 3.0625 16.34375 C 2.953125 15.671875 3.148438 14.976563 3.46875 14.5625 C 3.472656 14.554688 3.464844 14.539063 3.46875 14.53125 C 3.773438 14.210938 4.3125 14 4.90625 14 Z M 27.09375 14 C 27.6875 14 28.226563 14.210938 28.53125 14.53125 C 28.535156 14.535156 28.527344 14.558594 28.53125 14.5625 C 28.851563 14.976563 29.046875 15.671875 28.9375 16.34375 C 28.875 16.734375 28.722656 17.117188 28.46875 17.4375 C 27.960938 16.242188 27.117188 15.160156 26.03125 14.25 C 26.339844 14.09375 26.714844 14 27.09375 14 Z M 11 16 C 9.894531 16 9 16.894531 9 18 C 9 19.105469 9.894531 20 11 20 C 12.105469 20 13 19.105469 13 18 C 13 16.894531 12.105469 16 11 16 Z M 21 16 C 19.894531 16 19 16.894531 19 18 C 19 19.105469 19.894531 20 21 20 C 22.105469 20 23 19.105469 23 18 C 23 16.894531 22.105469 16 21 16 Z M 21.25 21.53125 C 20.101563 22.597656 18.171875 23.28125 16 23.28125 C 13.828125 23.28125 11.898438 22.589844 10.75 21.65625 C 11.390625 23.390625 13.445313 25 16 25 C 18.554688 25 20.609375 23.398438 21.25 21.53125 Z"/></svg></a> <a href="/edit.html?id=ada" class="material-symbols-outlined">edit</a></div>

* Ada is a <a href="/search.html?q=select+type%0D%0Awhere+type+%3D+pl">programming language</a> created in 1980 by Jean Ichbiah.
 link /search.html?q=select+type+appeared%0D%0Awhere+appeared+%3D+1980 1980
 link ../lists/creators.html#jeanIchbiah Jean Ichbiah

dashboard
 #23 <span title="TotalRank: 73 Jobs: 38 Users: 108 Facts: 12 Links: 23">on PLDB</span>
 44 Years Old
 5k <span title="Ada repos on GitHub.">Repos</span>

* Try now: <a href="https://riju.codes/ada">Riju</a>

* Ada is a structured, statically typed, imperative, wide-spectrum, and object-oriented high-level computer programming language, extended from Pascal and other languages. It has built-in language support for design-by-contract, extremely strong typing, explicit concurrency, offering tasks, synchronous message passing, protected objects, and non-determinism. Ada improves code safety and maintainability by using the compiler to find errors in favor of runtime errors. Read more on Wikipedia...
 https://en.wikipedia.org/wiki/Ada_(programming_language) Read more on Wikipedia...

- Ada website
 http://www.adaic.org
- Ada Wikipedia page
 https://en.wikipedia.org/wiki/Ada_(programming_language)
- Ada docs
 https://pyjarrett.github.io/programming-with-ada/
- Ada mailing list
 http://www.ada-auth.org/comment.html
- There are at least 4,785 Ada repos on <a href="https://github.com/search?q=language:Ada">GitHub</a>
- Ada first developed in <a href="../lists/originCommunities.html#ciiHoneywellBull">CII Honeywell Bull</a>
- PLDB estimates there are currently 2k job openings for Ada programmers.
- file extensions for Ada include adb, ads and ada
- The  Google BigQuery Public Dataset GitHub snapshot shows 2k users using Ada in 2k repos on <a href="https://api.github.com/search/repositories?q=language:Ada">GitHub</a>
- There are 8,055 members in the <a href="https://reddit.com/r/ada">Ada subreddit</a>
- There are 129 <a href="https://projecteuler.net/language=Ada">Project Euler</a> users using Ada
- Explore Ada snippets on <a href="http://www.rosettacode.org/wiki/Category:Ada">Rosetta Code</a>
- Ada is supported by the <a href="https://www.sourceware.org/gdb/">GDB</a>
- Ada on HOPL
 https://hopl.info/showlanguage.prx?exp=840
- Ada ranks #28 in the <a href="https://www.tiobe.com/tiobe-index/">TIOBE Index</a>
- Ada Ubuntu package
 https://packages.ubuntu.com/jammy/gnat
- <a href="pygments.html">Pygments</a> supports <a href="https://github.com/pygments/pygments/blob/master/pygments/lexers/ada.py">syntax highlighting</a> for Ada
- GitHub supports <a href="https://github.com/textmate/ada.tmbundle" title="The package used for syntax highlighting by GitHub Linguist.">syntax highlighting</a> for Ada
- Ada appears in the <a href="https://github.com/mame/quine-relay">Quine Relay</a> project
- Indeed.com has 2,184 matches for <a href="https://www.indeed.com/jobs?q=ada developer">"ada developer"</a>.
- <a href="http://www.adaic.org">adaic.org</a> was registered in 1998
- See also: (22 related languages)<a href="spark.html">Apache Spark</a>, <a href="ravenscar-profile.html">Ravenscar profile</a>, <a href="algol-68.html">ALGOL 68</a>, <a href="pascal.html">Pascal</a>, <a href="smalltalk.html">Smalltalk</a>, <a href="java.html">Java</a>, <a href="eiffel.html">Eiffel</a>, <a href="chapel.html">Chapel</a>, <a href="nim.html">Nim</a>, <a href="pl-sql.html">PL/SQL</a>, <a href="plpgsql.html">PL/pgSQL</a>, <a href="ruby.html">Ruby</a>, <a href="rust.html">Rust</a>, <a href="seed7.html">Seed7</a>, <a href="sql-psm.html">SQL/PSM</a>, <a href="vhdl.html">VHDL</a>, <a href="unicode.html">Unicode</a>, <a href="lisp.html">Lisp</a>, <a href="setl.html">SETL</a>, <a href="algol.html">Algol</a>, <a href="algol-60.html">ALGOL 60</a>, <a href="apse.html">APSE</a>

<br>

codeWithHeader Example from <a href='https://godbolt.org/'>Compiler Explorer</a>:
 -- This pragma will remove the warning produced by the default
 -- CE filename and the procedure name differing,
 -- see : https://gcc.gnu.org/onlinedocs/gcc-8.2.0/gnat_rm/Pragma-Source_005fFile_005fName.html#Pragma-Source_005fFile_005fName
 pragma Source_File_Name (Square, Body_File_Name =&gt; &quot;example.adb&quot;);
 
 -- Type your code here, or load an example.
 function Square(num : Integer) return Integer is
 begin
     return num**2;
 end Square;
 
 -- Ada 2012 also provides Expression Functions
 -- (http://www.ada-auth.org/standards/12rm/html/RM-6-8.html)
 -- as a short hand for functions whose body consists of a
 -- single return statement. However they cannot be used as a
 -- compilation unit.
 -- function Square(num : Integer) return Integer is (num**2);
 

codeWithHeader Example from <a href='https://riju.codes/ada'>Riju</a>:
 with Ada.Text_IO;
 
 procedure Main is
 begin
    Ada.Text_IO.Put_Line(&quot;Hello, world!&quot;);
 end Main;
 

codeWithHeader Example from <a href='https://github.com/leachim6/hello-world/blob/main/a/Ada.adb'>hello-world</a>:
 with Ada.Text_IO;
 
 procedure Hello_World is
    use Ada.Text_IO;
 begin
    Put_line (&quot;Hello World&quot;);
 end Hello_World;
 

codeWithHeader Example from <a href='http://helloworldcollection.de/#Ada'>the Hello World Collection</a>:
 -- Hello World in Ada
 
 with Text_IO;
 procedure Hello_World is
 
 begin
   Text_IO.Put_Line(&quot;Hello World!&quot;);
 end Hello_World;
 

codeWithHeader Example from <a href='https://en.wikipedia.org/wiki/Ada_(programming_language)'>Wikipedia</a>:
 with Ada.Text_IO; use Ada.Text_IO;
 
 procedure Traffic is
 
    type Airplane_ID is range 1..10;             -- 10 airplanes
 
    task type Airplane (ID: Airplane_ID);        -- task representing airplanes, with ID as initialisation parameter
    type Airplane_Access is access Airplane;     -- reference type to Airplane
 
    protected type Runway is                     -- the shared runway (protected to allow concurrent access)
       entry Assign_Aircraft (ID: Airplane_ID);  -- all entries are guaranteed mutually exclusive
       entry Cleared_Runway (ID: Airplane_ID);
       entry Wait_For_Clear;
    private
       Clear: Boolean := True;                   -- protected private data - generally more than just a flag...
    end Runway;
    type Runway_Access is access all Runway;
 
    -- the air traffic controller task takes requests for takeoff and landing
    task type Controller (My_Runway: Runway_Access) is
       -- task entries for synchronous message passing
       entry Request_Takeoff (ID: in Airplane_ID; Takeoff: out Runway_Access);
       entry Request_Approach(ID: in Airplane_ID; Approach: out Runway_Access);
    end Controller;
 
    --  allocation of instances
    Runway1    : aliased Runway;              -- instantiate a runway
    Controller1: Controller (Runway1&#39;Access); -- and a controller to manage it
 
    ------ the implementations of the above types ------
    protected body Runway is
       entry Assign_Aircraft (ID: Airplane_ID)
  when Clear is   -- the entry guard - calling tasks are blocked until the condition is true
       begin
        Clear := False;
        Put_Line (Airplane_ID&#39;Image (ID) &amp; &quot; on runway &quot;);
       end;
 
       entry Cleared_Runway (ID: Airplane_ID)
  when not Clear is
       begin
          Clear := True;
          Put_Line (Airplane_ID&#39;Image (ID) &amp; &quot; cleared runway &quot;);
       end;
 
       entry Wait_For_Clear
  when Clear is
       begin
          null;      -- no need to do anything here - a task can only enter if &quot;Clear&quot; is true
       end;
    end Runway;
 
    task body Controller is
    begin
       loop
          My_Runway.Wait_For_Clear;   -- wait until runway is available (blocking call)
          select                      -- wait for two types of requests (whichever is runnable first)
             when Request_Approach&#39;count = 0 =&gt;  -- guard statement - only accept if there are no tasks queuing on Request_Approach
              accept Request_Takeoff (ID: in Airplane_ID; Takeoff: out Runway_Access)
              do                                 -- start of synchronized part
                My_Runway.Assign_Aircraft (ID);  -- reserve runway (potentially blocking call if protected object busy or entry guard false)
                Takeoff := My_Runway;            -- assign &quot;out&quot; parameter value to tell airplane which runway
              end Request_Takeoff;               -- end of the synchronised part
          or
             accept Request_Approach (ID: in Airplane_ID; Approach: out Runway_Access) do
                My_Runway.Assign_Aircraft (ID);
                Approach := My_Runway;
             end Request_Approach;
          or                          -- terminate if no tasks left who could call
             terminate;
          end select;
       end loop;
    end;
 
    task body Airplane is
       Rwy : Runway_Access;
    begin
       Controller1.Request_Takeoff (ID, Rwy); -- This call blocks until Controller task accepts and completes the accept block
       Put_Line (Airplane_ID&#39;Image (ID) &amp; &quot;  taking off...&quot;);
       delay 2.0;
       Rwy.Cleared_Runway (ID);               -- call will not block as &quot;Clear&quot; in Rwy is now false and no other tasks should be inside protected object
       delay 5.0; -- fly around a bit...
       loop
          select   -- try to request a runway
             Controller1.Request_Approach (ID, Rwy); -- this is a blocking call - will run on controller reaching accept block and return on completion
             exit; -- if call returned we&#39;re clear for landing - leave select block and proceed...
          or
             delay 3.0;  -- timeout - if no answer in 3 seconds, do something else (everything in following block)
             Put_Line (Airplane_ID&#39;Image (ID) &amp; &quot;   in holding pattern&quot;);  -- simply print a message
          end select;
       end loop;
       delay 4.0;  -- do landing approach...
       Put_Line (Airplane_ID&#39;Image (ID) &amp; &quot;            touched down!&quot;);
       Rwy.Cleared_Runway (ID);  -- notify runway that we&#39;re done here.
    end;
 
    New_Airplane: Airplane_Access;
 
 begin
    for I in Airplane_ID&#39;Range loop  -- create a few airplane tasks
       New_Airplane := new Airplane (I); -- will start running directly after creation
       delay 4.0;
    end loop;
 end Traffic;

<div class="keywordsBlock">
codeWithHeader Ada <a href="../lists/keywords.html?filter=ada">Keywords</a>
 abort else new return abs elsif not reverse abstract end null accept entry select access exception of separate aliased exit or some all others subtype and for out synchronized array function overriding at tagged generic package task begin goto pragma terminate body private then if procedure type case in protected constant interface until is raise use declare range delay limited record when delta loop rem while digits renames with do mod requeue xor
</div>

endColumns

## Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature Scientific Notation
  FeatureLink ../features/hasScientificNotation.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Fixed Point Numbers
  FeatureLink ../features/hasFixedPoint.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Integers
  FeatureLink ../features/hasIntegers.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   -- [0-9_]+
 row
  Feature Floats
  FeatureLink ../features/hasFloats.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   -- [0-9_]+\.[0-9_]*
 row
  Feature Hexadecimals
  FeatureLink ../features/hasHexadecimals.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   -- [0-9_]+#[0-9a-f_\.]+#
 row
  Feature Conditionals
  FeatureLink ../features/hasConditionals.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Functions
  FeatureLink ../features/hasFunctions.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature While Loops
  FeatureLink ../features/hasWhileLoops.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Booleans
  FeatureLink ../features/hasBooleans.html
  Supported <span class="hasFeature">✓</span>
  Token True False
  Example
 row
  Feature Strings
  FeatureLink ../features/hasStrings.html
  Supported <span class="hasFeature">✓</span>
  Token "
  Example
   "Hello world"
 row
  Feature Assignment
  FeatureLink ../features/hasAssignment.html
  Supported <span class="hasFeature">✓</span>
  Token :=
  Example
 row
  Feature Print() Debugging
  FeatureLink ../features/hasPrintDebugging.html
  Supported <span class="hasFeature">✓</span>
  Token Text_IO.Put_Line
  Example
 row
  Feature Line Comments
  FeatureLink ../features/hasLineComments.html
  Supported <span class="hasFeature">✓</span>
  Token --
  Example
   -- A comment
 row
  Feature Case Insensitive Identifiers
  FeatureLink ../features/hasCaseInsensitiveIdentifiers.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   with Gnat.Io; use Gnat.Io;
   procedure Numbers is
      Score: Integer;
      F: Float := 1.0;
   begin
      Score := 3 + 2#1011#;
      Put(score);
      New_Line;
      Score := Score + 1_000_000;
      Put(Score);
      New_Line;
   end Numbers;
 row
  Feature Operator Overloading
  FeatureLink ../features/hasOperatorOverloading.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Directives
  FeatureLink ../features/hasDirectives.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Comments
  FeatureLink ../features/hasComments.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   -- A comment
 row
  Feature Generics
  FeatureLink ../features/hasGenerics.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   generic
      Max_Size : Natural; -- a generic formal value
      type Element_Type is private; -- a generic formal type; accepts any nonlimited type
   package Stacks is
      type Size_Type is range 0 .. Max_Size;
      type Stack is limited private;
      procedure Create (S : out Stack;
                        Initial_Size : in Size_Type := Max_Size);
      procedure Push (Into : in out Stack; Element : in Element_Type);
      procedure Pop (From : in out Stack; Element : out Element_Type);
      Overflow : exception;
      Underflow : exception;
   private
      subtype Index_Type is Size_Type range 1 .. Max_Size;
      type Vector is array (Index_Type range <>) of Element_Type;
      type Stack (Allocated_Size : Size_Type := 0) is record
         Top : Index_Type;
         Storage : Vector (1 .. Allocated_Size);
      end record;
   end Stacks;
 row
  Feature Pointers
  FeatureLink ../features/hasPointers.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Case Sensitivity
  FeatureLink ../features/isCaseSensitive.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example
 row
  Feature Semantic Indentation
  FeatureLink ../features/hasSemanticIndentation.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example
 row
  Feature MultiLine Comments
  FeatureLink ../features/hasMultiLineComments.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example

keyboardNav scala.html rust.html

import ../footer.scroll
