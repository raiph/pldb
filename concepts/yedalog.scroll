import ../header.scroll
baseUrl https://pldb.com/concepts/
title Yedalog

title Yedalog - Query language
 hidden

html
 <a class="trueBaseThemePreviousItem" href="lola.html">&lt;</a>
 <a class="trueBaseThemeNextItem" href="pbasic.html">&gt;</a>

viewSourceUrl https://github.com/breck7/pldb/blob/main/concepts/yedalog.pldb

startColumns 4

<div class="trueBaseThemeQuickLinks"><a href="/edit.html?id=yedalog" class="material-symbols-outlined">edit</a></div>

* Yedalog is a <a href="/search.html?q=select+type%0D%0Awhere+type+%3D+queryLanguage">query language</a> created in 2015 by Brian Chin and Daniel von Dincklage and Vuk Ercegovac and Peter Hawkins and Mark S. Miller and Franz Och and Chris Olston and Fernando Pereira.
 link /search.html?q=select+type+appeared%0D%0Awhere+appeared+%3D+2015 2015
 link ../lists/creators.html#brianChin Brian Chin
 link ../lists/creators.html#danielVonDincklage Daniel von Dincklage
 link ../lists/creators.html#vukErcegovac Vuk Ercegovac
 link ../lists/creators.html#peterHawkins Peter Hawkins
 link ../lists/creators.html#markSMiller Mark S. Miller
 link ../lists/creators.html#franzOch Franz Och
 link ../lists/creators.html#chrisOlston Chris Olston
 link ../lists/creators.html#fernandoPereira Fernando Pereira

dashboard
 #1489 <span title="TotalRank: 2003 Jobs: 103 Users: 2832 Facts: 914 Links: 986">on PLDB</span>
 9 Years Old

*  We introduce Yedalog, a declarative programming language that allows programmers to mix data-parallel pipelines and computation seamlessly in a single language. By contrast, most existing tools for data-parallel computation embed a sublanguage of data-parallel pipelines in a general-purpose language, or vice versa. Yedalog extends Datalog, incorporating not only computational features from logic programming, but also features for working with data structured as nested records. Yedalog programs can run both on a single machine, and distributed across a cluster in batch and interactive modes, allowing programmers to mix different modes of execution easily.

- Yedalog first developed in <a href="../lists/originCommunities.html#google">Google</a>
- See also: (1 related languages)<a href="datalog.html">Datalog</a>
- Read more about Yedalog on the web: 1.
 https://research.google/pubs/pub43462/ 1.

<br>

codeWithHeader Example from the web:
 Documents = Load{path: &quot;document-parse-trees&quot;};
 
 # Code to execute for each document:
 module PerDocument{tokens: T} = {
 # Computes parent-child relationships
 Child{p} = c :- T[c] == {parent: p, .._};
 
 # Computes nodes that transitively descend from &quot;influenced&quot;
 Descendants{t: c} :- T[p] == {text: &quot;influenced&quot;, .._}, c == Child{p};
 Descendants{t: c} :- Descendants{t: p}, c == Child{p};
 
 # Counts nodes in which each entity appears under the verb &quot;influenced&quot;.
 Influence{mid} += 1 :- Descendants{t}, T[t] == {entity: mid, .._};
 };
 
 # Each entity’s influence from each hostname
 Influential{mid, hostname} += count :-
 Documents{tokens, hostname, .._},
 PerDocument{tokens}.Influence{mid} == count;
 
 # Persists Influential as protocol buffer data
 ? Store{data: Influential, path: &quot;influential-entities&quot;};

endColumns

## Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature Comments
  FeatureLink ../features/hasComments.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   # A comment
 row
  Feature Line Comments
  FeatureLink ../features/hasLineComments.html
  Supported <span class="hasFeature">✓</span>
  Token #
  Example
   # A comment
 row
  Feature Semantic Indentation
  FeatureLink ../features/hasSemanticIndentation.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example

keyboardNav lola.html pbasic.html

import ../footer.scroll
