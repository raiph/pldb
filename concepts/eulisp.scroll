import ../header.scroll
baseUrl https://pldb.com/concepts/
title EuLisp

title EuLisp - Programming language
 hidden

html
 <a class="trueBaseThemePreviousItem" href="sparc.html">&lt;</a>
 <a class="trueBaseThemeNextItem" href="coldfusion.html">&gt;</a>

viewSourceUrl https://github.com/breck7/pldb/blob/main/concepts/eulisp.pldb

startColumns 4

<div class="trueBaseThemeQuickLinks"><a href="https://people.bath.ac.uk/masrjb/Sources/eunotes.html" class="material-symbols-outlined">menu_book</a> <a href="https://en.wikipedia.org/wiki/EuLisp"><svg version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="98.05px" height="98.05px" viewBox="0 0 98.05 98.05" style="enable-background:new 0 0 98.05 98.05;" xml:space="preserve"><path d="M98.023,17.465l-19.584-0.056c-0.004,0.711-0.006,1.563-0.017,2.121c1.664,0.039,5.922,0.822,7.257,4.327L66.92,67.155 c-0.919-2.149-9.643-21.528-10.639-24.02l9.072-18.818c1.873-2.863,5.455-4.709,8.918-4.843l-0.01-1.968L55.42,17.489 c-0.045,0.499,0.001,1.548-0.068,2.069c5.315,0.144,7.215,1.334,5.941,4.508c-2.102,4.776-6.51,13.824-7.372,15.475 c-2.696-5.635-4.41-9.972-7.345-16.064c-1.266-2.823,1.529-3.922,4.485-4.004v-1.981l-21.82-0.067 c0.016,0.93-0.021,1.451-0.021,2.131c3.041,0.046,6.988,0.371,8.562,3.019c2.087,4.063,9.044,20.194,11.149,24.514 c-2.685,5.153-9.207,17.341-11.544,21.913c-3.348-7.43-15.732-36.689-19.232-44.241c-1.304-3.218,3.732-5.077,6.646-5.213 l0.019-2.148L0,17.398c0.005,0.646,0.027,1.71,0.029,2.187c4.025-0.037,9.908,6.573,11.588,10.683 c7.244,16.811,14.719,33.524,21.928,50.349c0.002,0.029,2.256,0.059,2.281,0.008c4.717-9.653,10.229-19.797,15.206-29.56 L63.588,80.64c0.005,0.004,2.082,0.016,2.093,0.007c7.962-18.196,19.892-46.118,23.794-54.933c1.588-3.767,4.245-6.064,8.543-6.194 l0.032-1.956L98.023,17.465z"/></svg></a> <a href="/edit.html?id=eulisp" class="material-symbols-outlined">edit</a></div>

* EuLisp is a <a href="/search.html?q=select+type%0D%0Awhere+type+%3D+pl">programming language</a> created in 1985.
 link /search.html?q=select+type+appeared%0D%0Awhere+appeared+%3D+1985 1985

dashboard
 #181 <span title="TotalRank: 500 Jobs: 103 Users: 1517 Facts: 263 Links: 134">on PLDB</span>
 39 Years Old

* EuLisp is a statically and dynamically scoped Lisp dialect developed by a loose formation of industrial and academic Lisp users and developers from around Europe. The standardizers intended to create a new Lisp "less encumbered by the past" (compared to Common Lisp), and not so minimalist as Scheme. Another objective was to integrate the object-oriented programming paradigm well. Read more on Wikipedia...
 https://en.wikipedia.org/wiki/EuLisp Read more on Wikipedia...

- EuLisp Wikipedia page
 https://en.wikipedia.org/wiki/EuLisp
- PLDB has 2 documentation sites for EuLisp: <a href="https://henry.github.io/EuLisp/">henry.github.io</a>, <a href="https://people.bath.ac.uk/masrjb/Sources/eunotes.html">people.bath.ac.uk</a>
- EuLisp first developed in <a href="../lists/originCommunities.html#httpsHenryGithubIo">https://henry.github.io</a>
- EuLisp on HOPL
 https://hopl.info/showlanguage.prx?exp=1139
- See also: (22 related languages)<a href="lisp.html">Lisp</a>, <a href="linux.html">Linux</a>, <a href="common-lisp.html">Common Lisp</a>, <a href="scheme.html">Scheme</a>, <a href="t.html">T</a>, <a href="standard-ml.html">Standard ML</a>, <a href="haskell.html">Haskell</a>, <a href="dylan.html">Dylan</a>, <a href="islisp.html">ISLISP</a>, <a href="interlisp.html">Interlisp</a>, <a href="lisp-machine-lisp.html">Lisp Machine Lisp</a>, <a href="le-lisp.html">Le-Lisp</a>, <a href="emacs-lisp.html">Emacs Lisp</a>, <a href="autolisp.html">AutoLISP</a>, <a href="openlisp.html">OpenLisp</a>, <a href="picolisp.html">PicoLisp</a>, <a href="newlisp.html">NewLisp</a>, <a href="racket.html">Racket</a>, <a href="guile.html">Guile</a>, <a href="clojure.html">Clojure</a>, <a href="arc.html">Arc</a>, <a href="lfe.html">LFE</a>

<br>

codeWithHeader Example from <a href='https://en.wikipedia.org/wiki/EuLisp'>Wikipedia</a>:
 (defmodule hanoi
   (syntax (syntax-0)
    import (level-0)
    export (hanoi))
 
 ;;;-------------------------------------------------
 ;;; Tower definition
 ;;;-------------------------------------------------
 (defconstant *max-tower-height* 10)
 
 (defclass &lt;tower&gt; ()
   ((id reader: tower-id keyword: id:)
    (blocks accessor: tower-blocks)))
 
 (defun build-tower (x n)
   (labels ((loop (i res)
                  (if (= i 0) res
                    (loop (- i 1) (cons i res)))))
           ((setter tower-blocks) x (loop n ()))
           x))
 
 (defmethod generic-print ((x &lt;tower&gt;) (s &lt;stream&gt;))
   (sformat s &quot;#&lt;tower ~a: ~a&gt;&quot; (tower-id x) (tower-blocks x)))
 
 ;;;-------------------------------------------------
 ;;; Access to tower blocks
 ;;;-------------------------------------------------
 (defgeneric push (x y))
 
 (defmethod push ((x &lt;tower&gt;) (y &lt;fpi&gt;))
   (let ((blocks (tower-blocks x)))
     (if (or (null? blocks) (&lt; y (car blocks)))
         ((setter tower-blocks) x (cons y blocks))
       (error &lt;condition&gt;
              (fmt &quot;cannot push block of size ~a on tower ~a&quot; y x)))))
 
 (defgeneric pop (x))
 
 (defmethod pop ((x &lt;tower&gt;))
   (let ((blocks (tower-blocks x)))
     (if blocks
         (progn
           ((setter tower-blocks) x (cdr blocks))
           (car blocks))
       (error &lt;condition&gt;
              (fmt &quot;cannot pop block from empty tower ~a&quot; x)))))
 
 ;;;-------------------------------------------------
 ;;; Move n blocks from tower x1 to tower x2 using x3 as buffer
 ;;;-------------------------------------------------
 (defgeneric move (n x1 x2 x3))
 
 (defmethod move ((n &lt;fpi&gt;) (x1 &lt;tower&gt;) (x2 &lt;tower&gt;) (x3 &lt;tower&gt;))
   (if (= n 1)
       (progn
         (push x2 (pop x1))
         (print x1 nl x2 nl x3 nl nl))
     (progn
       (move (- n 1) x1 x3 x2)
       (move 1 x1 x2 x3)
       (move (- n 1) x3 x2 x1))))
 
 ;;;-------------------------------------------------
 ;;; Initialize and run the &#39;Towers of Hanoi&#39;
 ;;;-------------------------------------------------
 (defun hanoi ()
   (let ((x1 (make &lt;tower&gt; id: 0))
         (x2 (make &lt;tower&gt; id: 1))
         (x3 (make &lt;tower&gt; id: 2)))
     (build-tower x1 *max-tower-height*)
     (build-tower x2 0)
     (build-tower x3 0)
     (print x1 nl x2 nl x3 nl nl)
     (move *max-tower-height* x1 x2 x3)))
 
 (hanoi)
 
 ;;;-------------------------------------------------
 )  ;; End of module hanoi
 ;;;-------------------------------------------------

endColumns

## Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature Comments
  FeatureLink ../features/hasComments.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   ; A comment
 row
  Feature Line Comments
  FeatureLink ../features/hasLineComments.html
  Supported <span class="hasFeature">✓</span>
  Token ;
  Example
   ; A comment
 row
  Feature Multiple Inheritance
  FeatureLink ../features/hasMultipleInheritance.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Semantic Indentation
  FeatureLink ../features/hasSemanticIndentation.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example

keyboardNav sparc.html coldfusion.html

import ../footer.scroll
