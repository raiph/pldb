import ../header.scroll
baseUrl https://pldb.com/concepts/
title Volt

title Volt - Programming language
 hidden

html
 <a class="trueBaseThemePreviousItem" href="bpel.html">&lt;</a>
 <a class="trueBaseThemeNextItem" href="lpc.html">&gt;</a>

viewSourceUrl https://github.com/breck7/pldb/blob/main/concepts/volt.pldb

startColumns 4

<div class="trueBaseThemeQuickLinks"><a href="http://www.volt-lang.org/" class="material-symbols-outlined">home</a> <a href="https://github.com/VoltLang/Volta" class="material-symbols-outlined">code</a> <a href="/edit.html?id=volt" class="material-symbols-outlined">edit</a></div>

* Volt is an open source <a href="/search.html?q=select+type%0D%0Awhere+type+%3D+pl">programming language</a> created in 2011.
 link /search.html?q=select+type+appeared%0D%0Awhere+appeared+%3D+2011 2011

codeWithHeader Source code:
 git clone https://github.com/VoltLang/Volta

dashboard
 #569 <span title="TotalRank: 1132 Jobs: 103 Users: 889 Facts: 140 Links: 986">on PLDB</span>
 13 Years Old
 158 <span title="Volt repos on GitHub.">Repos</span>

* Volt is a C-inspired programming language that toes the line between expressiveness and control.

- Volt website
 http://www.volt-lang.org/
- Volt is developed on <a href="https://github.com/VoltLang/Volta">GitHub</a> and has 142 stars
- There are at least 158 Volt repos on <a href="https://github.com/search?q=language:Volt">GitHub</a>
- file extensions for Volt include volt
- The  Google BigQuery Public Dataset GitHub snapshot shows 298 users using Volt in 351 repos on <a href="https://api.github.com/search/repositories?q=language:Volt">GitHub</a>
- GitHub supports <a href="https://github.com/textmate/d.tmbundle" title="The package used for syntax highlighting by GitHub Linguist.">syntax highlighting</a> for Volt
- <a href="http://www.volt-lang.org/">volt-lang.org</a> was registered in 2013

<br>

codeWithHeader Example from <a href='https://github.com/textmate/d.tmbundle'>Linguist</a>:
 // Copyright © 2012-2013, Jakob Bornecrantz.  All rights reserved.
 // See copyright notice in src/volt/license.d (BOOST ver. 1.0).
 module main;
 
 import core.stdc.stdio;
 import core.stdc.stdlib;
 
 import watt.process;
 import watt.path;
 
 import results;
 import list;
 import cmd;
 
 int main()
 {
 	auto cmdGroup = new CmdGroup();
 	bool printOk = true;
 	bool printImprovments = true;
 	bool printFailing = true;
 	bool printRegressions = true;
 	string compiler = getEnv(&quot;VOLT&quot;);
 
 	if (compiler is null) {
 		printf(&quot;compiler envar not set\n&quot;.ptr);
 		return -1;
 	}
 
 	/// @todo Scan for files
 	auto tests = testList;
 
 	int total;
 	int passed;
 	int failed;
 	int improved;
 	int regressed;
 
 	auto rets = new Result[] (tests.length);
 	for (size_t i; i &lt; tests.length; i++) {
 		rets[i] = new Result();
 		rets[i].runTest(cmdGroup, tests[i], compiler);
 	}
 
 	cmdGroup.waitAll();
 
 	for (size_t i; i &lt; tests.length; i++) {
 		auto ret = rets[i];
 		total++;
 		if (ret.ok) {
 			passed++;
 			improved += cast(int)!ret.hasPassed;
 
 			if (!ret.hasPassed &amp;&amp; printImprovments) {
 				printf(&quot;%s: %s, improved!\n&quot;.ptr, ret.test.ptr, ret.msg.ptr);
 			} else if (printOk) {
 				printf(&quot;%s: %s\n&quot;.ptr, ret.test.ptr, ret.msg.ptr);
 			}
 		} else {
 			failed++;
 			regressed += cast(int)ret.hasPassed;
 
 
 			if (ret.hasPassed &amp;&amp; printRegressions) {
 				printf(&quot;%s: %s, regressed!\n&quot;.ptr, ret.test.ptr, ret.msg.ptr);
 			} else if (printFailing) {
 				printf(&quot;%s: %s\n&quot;.ptr, ret.test.ptr, ret.msg.ptr);
 			}
 		}
 		fflush(stdout);
 	}
 
 	auto xml = fopen(&quot;results.xml&quot;.ptr, &quot;w+&quot;.ptr);
 	if (xml !is null) {
 		fprintf(xml, &quot;&lt;testsuites errors=\&quot;%u\&quot; failures=\&quot;%u\&quot; tests=\&quot;%u\&quot;&gt;\n&quot;.ptr,
 				regressed, failed - regressed, total);
 		for (size_t i; i &lt; rets.length; i++) {
 			rets[i].xmlLog(xml);
 		}
 		fprintf(xml, &quot;&lt;/testsuites&gt;\n&quot;.ptr);
 		fflush(xml);
 		fclose(xml);
 		xml = null;
 	}
 
 	auto rate = cast(float)passed / cast(float)total * 100.f;
 	printf(&quot;Summary: %i tests, %i pass%s, %i failure%s, %.2f%% pass rate, %i regressions, %i improvements.\n&quot;.ptr,
 	       total,
 	       passed, (passed == 1 ? &quot;&quot;.ptr : &quot;es&quot;.ptr),
 	       failed, (failed == 1 ? &quot;&quot;.ptr : &quot;s&quot;.ptr),
 	       cast(double)rate, regressed, improved);
 
 	return regressed ? -1 : 0;
 }
 

endColumns

## Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature Print() Debugging
  FeatureLink ../features/hasPrintDebugging.html
  Supported <span class="hasFeature">✓</span>
  Token printf
  Example
 row
  Feature Comments
  FeatureLink ../features/hasComments.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   // A comment
 row
  Feature Line Comments
  FeatureLink ../features/hasLineComments.html
  Supported <span class="hasFeature">✓</span>
  Token //
  Example
   // A comment
 row
  Feature Semantic Indentation
  FeatureLink ../features/hasSemanticIndentation.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example

keyboardNav bpel.html lpc.html

import ../footer.scroll
