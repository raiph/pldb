import ../header.scroll
baseUrl https://pldb.com/concepts/
title GraphIt

title GraphIt - Programming language
 hidden

html
 <a class="trueBaseThemePreviousItem" href="http-2.html">&lt;</a>
 <a class="trueBaseThemeNextItem" href="whiley.html">&gt;</a>

viewSourceUrl https://github.com/breck7/pldb/blob/main/concepts/graph-it.pldb

startColumns 4

<div class="trueBaseThemeQuickLinks"><a href="http://graphit-lang.org/" class="material-symbols-outlined">home</a> <a href="https://github.com/GraphIt-DSL/graphit" class="material-symbols-outlined">code</a> <a href="/edit.html?id=graph-it" class="material-symbols-outlined">edit</a></div>

* GraphIt is an open source <a href="/search.html?q=select+type%0D%0Awhere+type+%3D+pl">programming language</a> created in 2017.
 link /search.html?q=select+type+appeared%0D%0Awhere+appeared+%3D+2017 2017

codeWithHeader Source code:
 git clone https://github.com/GraphIt-DSL/graphit

dashboard
 #730 <span title="TotalRank: 1296 Jobs: 103 Users: 850 Facts: 343 Links: 986">on PLDB</span>
 7 Years Old

* GraphIt is a new DSL for graph computations that generates fast implementations for algorithms with different performance characteristics running on graphs with different sizes and structures. GraphIt separates what is computed (algorithm) from how it is computed (schedule). Programmers specify the algorithm using an algorithm language, and performance optimizations are specified using a separate scheduling language. The scheduling language enables programmers to easily search through this complicated tradeoff space by composing together a large set of edge traversal and vertex data layout optimizations.

- GraphIt website
 http://graphit-lang.org/
- GraphIt is developed on <a href="https://github.com/GraphIt-DSL/graphit">GitHub</a> and has 308 stars
- GraphIt first developed in <a href="../lists/originCommunities.html#httpsGithubComGraphItDsl">https://github.com/GraphIt-DSL</a>
- file extensions for GraphIt include gt
- <a href="http://graphit-lang.org/">graphit-lang.org</a> was registered in 2018

<br>

codeWithHeader Example from the web:
 element Vertex end
 element Edge end
 const edges : edgeset{Edge}(Vertex,Vertex) = load (argv[1]);
 const vertices : vertexset{Vertex} = edges.getVertices();
 const old_rank : vector{Vertex}(double) = 1.0/vertices.size();
 const new_rank : vector{Vertex}(double) = 0.0;
 const out_degree : vector {Vertex}(int) = edges.getOutDegrees();
 const contrib : vector{Vertex}(double) = 0.0;
 const error : vector{Vertex}(double) = 0.0;
 const damp : double = 0.85;
 const beta_score : double = (1.0 - damp) / vertices.size();
 
 func computeContrib(v : Vertex)
     contrib[v] = old_rank[v] / out_degree[v];
 end
 
 func updateEdge(src : Vertex, dst : Vertex)
     new_rank[dst] += contrib[src];
 end
 
 func updateVertex(v : Vertex)
     var old_score : double = old_rank[v];
     new_rank[v] = beta_score + damp*(new_rank[v]);
     error[v] = fabs(new_rank[v] - old_rank[v]);
     old_rank[v] = new_rank[v];
     new_rank[v] = 0.0;
 end
 
 func printRank(v : Vertex)
     print old_rank[v];
 end
 
 func reset(v: Vertex)
     old_rank[v] = 1.0/vertices.size();
     new_rank[v] = 0.0;
 end
 
 func main()
     for trail in 0:10
       startTimer();
         vertices.apply(reset);
       for i in 0:20
           vertices.apply(computeContrib);
             #s1# edges.apply(updateEdge);
             vertices.apply(updateVertex);
       end
 
       var elapsed_time : double = stopTimer();
       print &quot;elapsed time: &quot;;
       print elapsed_time;
     end
 end
 
 % specify schedules here or use a separate schedule file

endColumns

## HackerNews discussions of GraphIt

pipeTable
 title|titleLink|date|score|comments
 GraphIt: A High-Performance Domain-Specific Language for Graph Analytics|https://news.ycombinator.com/item?id=18499287|11/21/2018|34|2

keyboardNav http-2.html whiley.html

import ../footer.scroll
