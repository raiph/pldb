import ../header.scroll
baseUrl https://pldb.io/concepts/
title Lean

title Lean - Programming language
 hidden

html
 <a class="trueBaseThemePreviousItem" href="rfc.html">&lt;</a>
 <a class="trueBaseThemeNextItem" href="octave.html">&gt;</a>

viewSourceUrl https://github.com/breck7/pldb/blob/main/concepts/lean.pldb

startColumns 4

<div class="trueBaseThemeQuickLinks"><a href="http://leanprover.github.io/" class="material-symbols-outlined">home</a> <a href="lean" class="material-symbols-outlined">terminal</a> <a href="https://github.com/leanprover/lean" class="material-symbols-outlined">code</a> <a href="https://leanprover.github.io/documentation/" class="material-symbols-outlined">menu_book</a> <a href="/edit.html?id=lean" class="material-symbols-outlined">edit</a></div>

* Lean is an open source <a href="/search.html?q=select+type%0D%0Awhere+type+%3D+pl">programming language</a> created in 2015 by Leonardo de Moura.
 link /search.html?q=select+type+appeared%0D%0Awhere+appeared+%3D+2015 2015
 link ../lists/creators.html#leonardoDeMoura Leonardo de Moura

codeWithHeader Source code:
 git clone https://github.com/leanprover/lean

dashboard
 #193 <span title="TotalRank: 523 Jobs: 103 Users: 290 Facts: 130 Links: 986">on PLDB</span>
 9 Years Old
 2k <span title="Lean repos on GitHub.">Repos</span>

* Try now: <a href="https://tio.run/#lean">TIO</a>

* Lean Theorem Prover

- Lean website
 http://leanprover.github.io/
- Lean is developed on <a href="https://github.com/leanprover/lean">GitHub</a> and has 2,045 stars
- Lean docs
 https://leanprover.github.io/documentation/
- There are at least 1,807 Lean repos on <a href="https://github.com/search?q=language:Lean">GitHub</a>
- Lean first developed in <a href="../lists/originCommunities.html#microsoftResearch">Microsoft Research</a>
- file extensions for Lean include lean and hlean
- The  Google BigQuery Public Dataset GitHub snapshot shows 233 users using Lean in 265 repos on <a href="https://api.github.com/search/repositories?q=language:Lean">GitHub</a>
- <a href="pygments.html">Pygments</a> supports <a href="https://github.com/pygments/pygments/blob/master/pygments/lexers/theorem.py">syntax highlighting</a> for Lean
- GitHub supports <a href="https://github.com/leanprover/Lean.tmbundle" title="The package used for syntax highlighting by GitHub Linguist.">syntax highlighting</a> for Lean

<br>

codeWithHeader Example from <a href='https://github.com/leachim6/hello-world/blob/main/l/Lean'>hello-world</a>:
 #print &quot;Hello World&quot;

codeWithHeader Example from <a href='https://github.com/leanprover/Lean.tmbundle'>Linguist</a>:
 /-
 Copyright (c) 2014 Microsoft Corporation. All rights reserved.
 Released under Apache 2.0 license as described in the file LICENSE.
 
 Module: algebra.binary
 Authors: Leonardo de Moura, Jeremy Avigad
 
 General properties of binary operations.
 -/
 
 import logic.eq
 open eq.ops
 
 namespace binary
   section
     variable {A : Type}
     variables (op₁ : A → A → A) (inv : A → A) (one : A)
 
     local notation a * b := op₁ a b
     local notation a ⁻¹  := inv a
     local notation 1     := one
 
     definition commutative := ∀a b, a * b = b * a
     definition associative := ∀a b c, (a * b) * c = a * (b * c)
     definition left_identity := ∀a, 1 * a = a
     definition right_identity := ∀a, a * 1 = a
     definition left_inverse := ∀a, a⁻¹ * a = 1
     definition right_inverse := ∀a, a * a⁻¹ = 1
     definition left_cancelative := ∀a b c, a * b = a * c → b = c
     definition right_cancelative := ∀a b c, a * b = c * b → a = c
 
     definition inv_op_cancel_left := ∀a b, a⁻¹ * (a * b) = b
     definition op_inv_cancel_left := ∀a b, a * (a⁻¹ * b) = b
     definition inv_op_cancel_right := ∀a b, a * b⁻¹ * b =  a
     definition op_inv_cancel_right := ∀a b, a * b * b⁻¹ = a
 
     variable (op₂ : A → A → A)
 
     local notation a + b := op₂ a b
 
     definition left_distributive := ∀a b c, a * (b + c) = a * b + a * c
     definition right_distributive := ∀a b c, (a + b) * c = a * c + b * c
   end
 
   context
     variable {A : Type}
     variable {f : A → A → A}
     variable H_comm : commutative f
     variable H_assoc : associative f
     infixl `*` := f
     theorem left_comm : ∀a b c, a*(b*c) = b*(a*c) :=
     take a b c, calc
       a*(b*c) = (a*b)*c  : H_assoc
         ...   = (b*a)*c  : H_comm
         ...   = b*(a*c)  : H_assoc
 
     theorem right_comm : ∀a b c, (a*b)*c = (a*c)*b :=
     take a b c, calc
       (a*b)*c = a*(b*c) : H_assoc
         ...   = a*(c*b) : H_comm
         ...   = (a*c)*b : H_assoc
   end
 
   context
     variable {A : Type}
     variable {f : A → A → A}
     variable H_assoc : associative f
     infixl `*` := f
     theorem assoc4helper (a b c d) : (a*b)*(c*d) = a*((b*c)*d) :=
     calc
       (a*b)*(c*d) = a*(b*(c*d)) : H_assoc
               ... = a*((b*c)*d) : H_assoc
   end
 
 end binary
 

endColumns

## Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature Comments
  FeatureLink ../features/hasComments.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Line Comments
  FeatureLink ../features/hasLineComments.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Integers
  FeatureLink ../features/hasIntegers.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Strings
  FeatureLink ../features/hasStrings.html
  Supported <span class="hasFeature">✓</span>
  Token "
  Example
   "Hello world"
 row
  Feature Print() Debugging
  FeatureLink ../features/hasPrintDebugging.html
  Supported <span class="hasFeature">✓</span>
  Token #print
  Example

keyboardNav rfc.html octave.html

import ../footer.scroll
