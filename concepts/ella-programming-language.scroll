import ../header.scroll
baseUrl https://pldb.io/concepts/
title ELLA

title ELLA - Programming language
 hidden

html
 <a class="trueBaseThemePreviousItem" href="monte.html">&lt;</a>
 <a class="trueBaseThemeNextItem" href="gff-format.html">&gt;</a>

viewSourceUrl https://github.com/breck7/pldb/blob/main/concepts/ella-programming-language.pldb

startColumns 4

<div class="trueBaseThemeQuickLinks"><a href="https://en.wikipedia.org/wiki/ELLA_%28programming_language%29"><svg version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="98.05px" height="98.05px" viewBox="0 0 98.05 98.05" style="enable-background:new 0 0 98.05 98.05;" xml:space="preserve"><path d="M98.023,17.465l-19.584-0.056c-0.004,0.711-0.006,1.563-0.017,2.121c1.664,0.039,5.922,0.822,7.257,4.327L66.92,67.155 c-0.919-2.149-9.643-21.528-10.639-24.02l9.072-18.818c1.873-2.863,5.455-4.709,8.918-4.843l-0.01-1.968L55.42,17.489 c-0.045,0.499,0.001,1.548-0.068,2.069c5.315,0.144,7.215,1.334,5.941,4.508c-2.102,4.776-6.51,13.824-7.372,15.475 c-2.696-5.635-4.41-9.972-7.345-16.064c-1.266-2.823,1.529-3.922,4.485-4.004v-1.981l-21.82-0.067 c0.016,0.93-0.021,1.451-0.021,2.131c3.041,0.046,6.988,0.371,8.562,3.019c2.087,4.063,9.044,20.194,11.149,24.514 c-2.685,5.153-9.207,17.341-11.544,21.913c-3.348-7.43-15.732-36.689-19.232-44.241c-1.304-3.218,3.732-5.077,6.646-5.213 l0.019-2.148L0,17.398c0.005,0.646,0.027,1.71,0.029,2.187c4.025-0.037,9.908,6.573,11.588,10.683 c7.244,16.811,14.719,33.524,21.928,50.349c0.002,0.029,2.256,0.059,2.281,0.008c4.717-9.653,10.229-19.797,15.206-29.56 L63.588,80.64c0.005,0.004,2.082,0.016,2.093,0.007c7.962-18.196,19.892-46.118,23.794-54.933c1.588-3.767,4.245-6.064,8.543-6.194 l0.032-1.956L98.023,17.465z"/></svg></a> <a href="/edit.html?id=ella-programming-language" class="material-symbols-outlined">edit</a></div>

* ELLA is a <a href="/search.html?q=select+type%0D%0Awhere+type+%3D+pl">programming language</a> created in 1979.
 link /search.html?q=select+type+appeared%0D%0Awhere+appeared+%3D+1979 1979

dashboard
 #1053 <span title="TotalRank: 1616 Jobs: 103 Users: 1648 Facts: 527 Links: 986">on PLDB</span>
 45 Years Old

* ELLA is a Hardware description language and support toolset. Developed by the Royal Signals and Radar Establishment during the 1980s and 1990s. Includes tools to perform:  design transformation symbolic simulations formal verificationELLA is a winner of the 1989 Queen's Award for Technological Achievement.. Read more on Wikipedia...
 https://en.wikipedia.org/wiki/ELLA_%28programming_language%29 Read more on Wikipedia...

- ELLA Wikipedia page
 https://en.wikipedia.org/wiki/ELLA_%28programming_language%29
- ELLA first developed in <a href="../lists/originCommunities.html#royalSignals">Royal Signals</a> and <a href="../lists/originCommunities.html#radarEstablishment">Radar Establishment</a>
- ELLA on HOPL
 https://hopl.info/showlanguage.prx?exp=847

<br>

codeWithHeader Example from <a href='https://en.wikipedia.org/wiki/ELLA_%28programming_language%29'>Wikipedia</a>:
 MAC ZIP = ([INT n]TYPE t: vector1 vector2) -&gt; [n][2]t:
   [INT k = 1..n](vector1[k], vector2[k]).
      
 MAC TRANSPOSE = ([INT n][INT m]TYPE t: matrix) -&gt; [m][n]t:
   [INT i = 1..m] [INT j = 1..n] matrix[j][i].
 
 MAC INNER_PRODUCT{FN * = [2]TYPE t -&gt; TYPE s, FN + = [2]s -&gt; s}
                  = ([INT n][2]t: vector) -&gt; s:
   IF n = 1 THEN *vector[1]
   ELSE *vector[1] + INNER_PRODUCT {*,+} vector[2..n]
   FI.
 
 MAC MATRIX_MULT {FN * = [2]TYPE t-&gt;TYPE s, FN + = [2]s-&gt;s} =
 ([INT n][INT m]t: matrix1, [m][INT p]t: matrix2) -&gt; [n][p]s:
 BEGIN
   LET transposed_matrix2 = TRANSPOSE matrix2.
 OUTPUT [INT i = 1..n][INT j = 1..p]
        INNER_PRODUCT{*,+}ZIP(matrix1[i],transposed_matrix2[j])
 END.
 
 TYPE element = NEW elt/(1..20),
      product = NEW prd/(1..1200).
 
 FN PLUS = (product: integer1 integer2) -&gt; product:
   ARITH integer1 + integer2.
 
 FN MULT = (element: integer1 integer2) -&gt; product:
   ARITH integer1 * integer2.
 
 FN MULT_234 = ([2][3]element:matrix1, [3][4]element:matrix2) -&gt;
              [2][4]product:  
   MATRIX_MULT{MULT,PLUS}(matrix1, matrix2).
 
 FN TEST = () -&gt; [2][4]product:
 ( LET m1 = ((elt/2, elt/1, elt/1),
             (elt/3, elt/6, elt/9)), 
       m2 = ((elt/6, elt/1, elt/3, elt/4), 
             (elt/9, elt/2, elt/8, elt/3),
             (elt/6, elt/4, elt/1, elt/2)).
   OUTPUT
     MULT_234 (m1, m2)
 ).
 
 COM test: just displaysignal MOC

endColumns

keyboardNav monte.html gff-format.html

import ../footer.scroll
