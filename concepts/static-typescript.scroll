import ../header.scroll
baseUrl https://pldb.io/concepts/
title Static Typescript

title Static Typescript - Programming language
 hidden

html
 <a class="trueBaseThemePreviousItem" href="star-prolog.html">&lt;</a>
 <a class="trueBaseThemeNextItem" href="stonecutter.html">&gt;</a>

viewSourceUrl https://github.com/breck7/pldb/blob/main/concepts/static-typescript.pldb

startColumns 4

<div class="trueBaseThemeQuickLinks"><a href="/edit.html?id=static-typescript" class="material-symbols-outlined">edit</a></div>

* Static Typescript is a <a href="/search.html?q=select+type%0D%0Awhere+type+%3D+pl">programming language</a> created in 2019.
 link /search.html?q=select+type+appeared%0D%0Awhere+appeared+%3D+2019 2019

dashboard
 #4041 <span title="TotalRank: 3921 Jobs: 103 Users: 2832 Facts: 3278 Links: 986">on PLDB</span>
 5 Years Old

* We present Static TypeScript (STS), a subset of TypeScript (itself, a gradually typed superset of JavaScript), and its compiler/linker toolchain, which is implemented fully in TypeScript and runs in the web browser.

- Static Typescript is a superset of <a href="/concepts/typescript.html">TypeScript</a>
- Read more about Static Typescript on the web: 1.
 https://www.microsoft.com/en-us/research/publication/static-typescript/ 1.

<br>

endColumns

## Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature MultiLine Comments
  FeatureLink ../features/hasMultiLineComments.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   /* A comment
   */
 row
  Feature Comments
  FeatureLink ../features/hasComments.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   // A comment
 row
  Feature Algebraic Data Type
  FeatureLink ../features/hasAlgebraicTypes.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   declare type numOrString = string | number
 row
  Feature Line Comments
  FeatureLink ../features/hasLineComments.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   // A comment
 row
  Feature Union Types
  FeatureLink ../features/hasUnionTypes.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   declare type numOrString = string | number
 row
  Feature Single-Type Arrays
  FeatureLink ../features/hasSingleTypeArrays.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   const scores: int[]
 row
  Feature Type Inference
  FeatureLink ../features/hasTypeInference.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Strings
  FeatureLink ../features/hasStrings.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   "hello world"
 row
  Feature Type Parameters
  FeatureLink ../features/hasTypeParameters.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   function identity<T>(arg: T): T {
      return arg;
   }
 row
  Feature Static Typing
  FeatureLink ../features/hasStaticTyping.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Inheritance
  FeatureLink ../features/hasInheritance.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   class B {}
   class A extends B {}
 row
  Feature Print() Debugging
  FeatureLink ../features/hasPrintDebugging.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   console.log("Hi")
 row
  Feature Namespaces
  FeatureLink ../features/hasNamespaces.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   // Typescript even supports splitting namespaces across multiple files:
   // Validation.ts
   namespace Validation {
       export interface StringValidator {
           isAcceptable(s: string): boolean;
       }
   }
   // LettersOnlyValidator.ts
   /// <reference path="Validation.ts" />
   namespace Validation {
       const lettersRegexp = /^[A-Za-z]+$/;
       export class LettersOnlyValidator implements StringValidator {
           isAcceptable(s: string) {
               return lettersRegexp.test(s);
           }
       }
   }
 row
  Feature Mixins
  FeatureLink ../features/hasMixins.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   // https://www.typescriptlang.org/docs/handbook/mixins.html
   class SmartObject implements Disposable, Activatable {
   }
   // Note: still need to do some runtime ops to make that work.
 row
  Feature Interfaces
  FeatureLink ../features/hasInterfaces.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   // https://www.typescriptlang.org/docs/handbook/interfaces.html
   interface SquareConfig {
      color?: string;
      width?: number;
   }
 row
  Feature File Imports
  FeatureLink ../features/hasImports.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   import { ZipCodeValidator } from "./ZipCodeValidator";
   /// <reference path="../typings/jquery.d.ts"/>
   /// <reference path="components/someclass.ts"/>
   import moo = module('moo');
   /// <amd-dependency path="legacy/moduleA" name="moduleA"/>
 row
  Feature Type Casting
  FeatureLink ../features/hasExplicitTypeCasting.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   <number>something;
 row
  Feature Classes
  FeatureLink ../features/hasClasses.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   class Person {}
 row
  Feature Booleans
  FeatureLink ../features/hasBooleans.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   const result = true
 row
  Feature Generics
  FeatureLink ../features/hasGenerics.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   function identity<T>(arg: T): T {
      return arg;
   }
 row
  Feature Abstract Types
  FeatureLink ../features/hasAbstractTypes.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   abstract class Animal {}
   class Dog extends Animal
 row
  Feature Access Modifiers
  FeatureLink ../features/hasAccessModifiers.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   class Person {
     private _age = 2
     public get age() {
       return _age
     }
     protected year = 1990
   }
 row
  Feature Static Methods
  FeatureLink ../features/hasStaticMethods.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   class Person {
     static sayHi() {
       console.log("Hello world")
     }
   }
 row
  Feature Enums
  FeatureLink ../features/hasEnums.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   enum Direction {
    Up,
    Down
   }
 row
  Feature Case Insensitive Identifiers
  FeatureLink ../features/hasCaseInsensitiveIdentifiers.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example
 row
  Feature Semantic Indentation
  FeatureLink ../features/hasSemanticIndentation.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example
 row
  Feature Operator Overloading
  FeatureLink ../features/hasOperatorOverloading.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example

keyboardNav star-prolog.html stonecutter.html

import ../footer.scroll
