import ../header.scroll
baseUrl https://pldb.io/concepts/
title Type Language

title Type Language - Programming language
 hidden

html
 <a class="trueBaseThemePreviousItem" href="epigram.html">&lt;</a>
 <a class="trueBaseThemeNextItem" href="ch.html">&gt;</a>

viewSourceUrl https://github.com/breck7/pldb/blob/main/concepts/type-language.pldb

startColumns 4

<div class="trueBaseThemeQuickLinks"><a href="/edit.html?id=type-language" class="material-symbols-outlined">edit</a></div>

* Type Language is a <a href="/search.html?q=select+type%0D%0Awhere+type+%3D+pl">programming language</a> created in 2013.
 link /search.html?q=select+type+appeared%0D%0Awhere+appeared+%3D+2013 2013

dashboard
 #952 <span title="TotalRank: 1521 Jobs: 103 Users: 1151 Facts: 432 Links: 986">on PLDB</span>
 11 Years Old
 405k <span title="Type Language repos on GitHub.">Repos</span>

* TL (Type Language) serves to describe the used system of types, constructors, and existing functions.

- There are at least 404,774 Type Language repos on <a href="https://github.com/search?q=language:Type Language">GitHub</a>
- file extensions for Type Language include tl
- GitHub supports <a href="https://github.com/goodmind/language-typelanguage" title="The package used for syntax highlighting by GitHub Linguist.">syntax highlighting</a> for Type Language
- Read more about Type Language on the web: 1.
 https://core.telegram.org/mtproto/TL 1.

<br>

codeWithHeader Example from <a href='https://github.com/goodmind/language-typelanguage'>Linguist</a>:
 // built-in types
 int#a8509bda ? = Int;
 long ? = Long;
 double ? = Double;
 string ? = String;
 null = Null;
 
 vector {t:Type} # [ t ] = Vector t;
 coupleInt {alpha:Type} int alpha = CoupleInt&lt;alpha&gt;;
 coupleStr {gamma:Type} string gamma = CoupleStr gamma;
 
 /* The name of the type variable is irrelevant: &quot;gamma&quot; could be replaced with &quot;alpha&quot;
   However, the combinator number will depend on the specific choice. */
 
 intHash {alpha:Type} vector&lt;coupleInt&lt;alpha&gt;&gt; = IntHash&lt;alpha&gt;;
 strHash {alpha:Type} (vector (coupleStr alpha)) = StrHash alpha;
 intSortedHash {alpha:Type} intHash&lt;alpha&gt; = IntSortedHash&lt;alpha&gt;;
 strSortedHash {alpha:Type} (strHash alpha) = StrSortedHash alpha;
 
 // custom types
 pair x:Object y:Object = Pair;
 triple x:Object y:Object z:Object = Triple;
 
 user#d23c81a3 id:int first_name:string last_name:string = User;
 no_user#c67599d1 id:int = User;
 group id:int title:string last_name:string = Group;
 no_group = Group;
 
 ---functions---
 
 // Maybe some built-in arithmetic functions; inverse quotes make &quot;identifiers&quot; out of arbitrary non-alphanumeric strings
 `+` Int Int = Int;
 `-` Int Int = Int;
 `+` Double Double = Double;
 // ...
 
 // API functions (aka RPC functions)
 getUser#b0f732d5 int = User;
 getUsers#2d84d5f5 (Vector int) = Vector User;

endColumns

## Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature MultiLine Comments
  FeatureLink ../features/hasMultiLineComments.html
  Supported <span class="hasFeature">✓</span>
  Token /* */
  Example
   /* A comment
   */
 row
  Feature Comments
  FeatureLink ../features/hasComments.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   // A comment
 row
  Feature Line Comments
  FeatureLink ../features/hasLineComments.html
  Supported <span class="hasFeature">✓</span>
  Token //
  Example
   // A comment
 row
  Feature Semantic Indentation
  FeatureLink ../features/hasSemanticIndentation.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example

keyboardNav epigram.html ch.html

import ../footer.scroll
