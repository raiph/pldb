import ../header.scroll
baseUrl https://pldb.com/concepts/
title Crema

title Crema - Programming language
 hidden

html
 <a class="trueBaseThemePreviousItem" href="nymph.html">&lt;</a>
 <a class="trueBaseThemeNextItem" href="caltech-intermediate-form.html">&gt;</a>

viewSourceUrl https://github.com/breck7/pldb/blob/main/concepts/crema.pldb

startColumns 4

<div class="trueBaseThemeQuickLinks"><a href="https://github.com/ainfosec/crema/wiki" class="material-symbols-outlined">home</a> <a href="https://github.com/ainfosec/crema" class="material-symbols-outlined">code</a> <a href="/edit.html?id=crema" class="material-symbols-outlined">edit</a></div>

* Crema is a <a href="/search.html?q=select+type%0D%0Awhere+type+%3D+pl">programming language</a> created in 2014 by Jacob Torrey and Jared Wright.
 link /search.html?q=select+type+appeared%0D%0Awhere+appeared+%3D+2014 2014
 link ../lists/creators.html#jacobTorrey Jacob Torrey
 link ../lists/creators.html#jaredWright Jared Wright

codeWithHeader Source code:
 git clone https://github.com/ainfosec/crema

dashboard
 #1204 <span title="TotalRank: 1748 Jobs: 103 Users: 1488 Facts: 659 Links: 986">on PLDB</span>
 10 Years Old

* Crema is a LLVM front-end that aims to specifically execute in sub-Turing Complete space. Designed to be simple to learn, and practical for the majority of programming tasks needed, Crema can restrict the computational complexity of the program to the minimum needed to improve security.

- Crema website
 https://github.com/ainfosec/crema/wiki
- Crema is developed on <a href="https://github.com/ainfosec/crema">GitHub</a> and has 64 stars
- Crema first developed in <a href="../lists/originCommunities.html#assuredInformationSecurityInc">Assured Information Security, Inc.</a>

<br>

codeWithHeader Example from the web:
 def int binarySearch(int values[], int searchTarget){
     int upperBound = list_length(values) - 1    # Upper index of seach region
     int lowerBound = 0                       # Lower index of seach region
     int delta = list_length(values)     # Distance between upperBound and lowerBound
     int middleValueIndex = 0    # Mid-point index between upper and lower bounds
     int middleValue = 0         # Value at the mid-point index
     int foundIndex = -1         # The index of the target number after finding
 
     foreach(values as value){
         # Check middle value to see if it matches target number
         middleValueIndex = ((upperBound + lowerBound) / 2)
         middleValue = values[middleValueIndex]
         if(middleValue == searchTarget){
             foundIndex = middleValueIndex
             break
         }
 
         #Re-adjust the lower and upper bounds for next itteration
         if(middleValue &gt;= searchTarget){
             upperBound = middleValueIndex - 1
         }else{
             lowerBound = middleValueIndex + 1
         }
         delta = upperBound - lowerBound
     }
     return foundIndex
 }

<div class="keywordsBlock">
codeWithHeader Crema <a href="../lists/keywords.html?filter=crema">Keywords</a>
 as bool break char def double else eq extern false foreach ge gt if int le lt neq return sdef string struct true uint void
</div>

endColumns

keyboardNav nymph.html caltech-intermediate-form.html

import ../footer.scroll
