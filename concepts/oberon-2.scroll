import ../header.scroll
baseUrl https://pldb.com/concepts/
title Oberon-2

title Oberon-2 - Programming language
 hidden

html
 <a class="trueBaseThemePreviousItem" href="jython.html">&lt;</a>
 <a class="trueBaseThemeNextItem" href="rmarkdown.html">&gt;</a>

viewSourceUrl https://github.com/breck7/pldb/blob/main/concepts/oberon-2.pldb

startColumns 4

<div class="trueBaseThemeQuickLinks"><a href="https://en.wikipedia.org/wiki/Oberon-2"><svg version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="98.05px" height="98.05px" viewBox="0 0 98.05 98.05" style="enable-background:new 0 0 98.05 98.05;" xml:space="preserve"><path d="M98.023,17.465l-19.584-0.056c-0.004,0.711-0.006,1.563-0.017,2.121c1.664,0.039,5.922,0.822,7.257,4.327L66.92,67.155 c-0.919-2.149-9.643-21.528-10.639-24.02l9.072-18.818c1.873-2.863,5.455-4.709,8.918-4.843l-0.01-1.968L55.42,17.489 c-0.045,0.499,0.001,1.548-0.068,2.069c5.315,0.144,7.215,1.334,5.941,4.508c-2.102,4.776-6.51,13.824-7.372,15.475 c-2.696-5.635-4.41-9.972-7.345-16.064c-1.266-2.823,1.529-3.922,4.485-4.004v-1.981l-21.82-0.067 c0.016,0.93-0.021,1.451-0.021,2.131c3.041,0.046,6.988,0.371,8.562,3.019c2.087,4.063,9.044,20.194,11.149,24.514 c-2.685,5.153-9.207,17.341-11.544,21.913c-3.348-7.43-15.732-36.689-19.232-44.241c-1.304-3.218,3.732-5.077,6.646-5.213 l0.019-2.148L0,17.398c0.005,0.646,0.027,1.71,0.029,2.187c4.025-0.037,9.908,6.573,11.588,10.683 c7.244,16.811,14.719,33.524,21.928,50.349c0.002,0.029,2.256,0.059,2.281,0.008c4.717-9.653,10.229-19.797,15.206-29.56 L63.588,80.64c0.005,0.004,2.082,0.016,2.093,0.007c7.962-18.196,19.892-46.118,23.794-54.933c1.588-3.767,4.245-6.064,8.543-6.194 l0.032-1.956L98.023,17.465z"/></svg></a> <a href="/edit.html?id=oberon-2" class="material-symbols-outlined">edit</a></div>

* Oberon-2 is a <a href="/search.html?q=select+type%0D%0Awhere+type+%3D+pl">programming language</a> created in 1991 by Niklaus Wirth and Hanspeter Mössenböck.
 link /search.html?q=select+type+appeared%0D%0Awhere+appeared+%3D+1991 1991
 link ../lists/creators.html#niklausWirth Niklaus Wirth
 link ../lists/creators.html#hanspeterMossenbock Hanspeter Mössenböck

dashboard
 #374 <span title="TotalRank: 847 Jobs: 103 Users: 1247 Facts: 355 Links: 389">on PLDB</span>
 33 Years Old

* Oberon-2 is an extension of the original Oberon programming language that adds limited reflection and object-oriented programming facilities, open arrays as pointer base types, read-only field export and reintroduces the FOR loop from Modula-2. It was developed in 1991 at ETH Zurich by Niklaus Wirth and Hanspeter Mössenböck, who is now at Institut für Systemsoftware (SSW) of the University of Linz, Austria.  Oberon-2 is a superset of Oberon, and is fully compatible with it. Read more on Wikipedia...
 https://en.wikipedia.org/wiki/Oberon-2 Read more on Wikipedia...

- Oberon-2 Wikipedia page
 https://en.wikipedia.org/wiki/Oberon-2
- Oberon-2 is a superset of <a href="/concepts/oberon.html">Oberon</a>
- Oberon-2 first developed in <a href="../lists/originCommunities.html#eidgenossischeTechnischeHochschuleZurich">Eidgenössische Technische Hochschule Zürich</a>
- Explore Oberon-2 snippets on <a href="http://www.rosettacode.org/wiki/Category:Oberon-2">Rosetta Code</a>
- Oberon-2 on HOPL
 https://hopl.info/showlanguage.prx?exp=1647
- See also: (12 related languages)<a href="oberon.html">Oberon</a>, <a href="modula-2.html">Modula-2</a>, <a href="pascal.html">Pascal</a>, <a href="go.html">Go</a>, <a href="object-oberon.html">Object Oberon</a>, <a href="smalltalk.html">Smalltalk</a>, <a href="python.html">Python</a>, <a href="java.html">Java</a>, <a href="algol.html">Algol</a>, <a href="yacc.html">Yacc</a>, <a href="javascript.html">JavaScript</a>, <a href="powerpc.html">PowerPC</a>
- Read more about Oberon-2 on Semantic Scholar: 1.
 https://semanticscholar.org/paper/0279ae521a3f0c16e53259cf62f83739931fbc50 1.
- Read more about Oberon-2 on the web: 1.
 https://dl.acm.org/doi/pdf/10.1145/157352.157355 1.

<br>

codeWithHeader Example from <a href='https://github.com/leachim6/hello-world/blob/main/o/Oberon 2.obn'>hello-world</a>:
 MODULE HelloWorld;                     
 IMPORT Out;
 BEGIN
   Out.String( &quot;Hello World&quot; );
   Out.Ln;
 END HelloWorld.

codeWithHeader Example from <a href='https://en.wikipedia.org/wiki/Oberon-2'>Wikipedia</a>:
 Module        = MODULE ident &quot;;&quot; [ImportList] DeclSeq [BEGIN StatementSeq] END ident &quot;.&quot;.
 ImportList    = IMPORT [ident &quot;:=&quot;] ident {&quot;,&quot; [ident &quot;:=&quot;] ident} &quot;;&quot;.
 DeclSeq       = { CONST {ConstDecl &quot;;&quot; } | TYPE {TypeDecl &quot;;&quot;} | VAR {VarDecl &quot;;&quot;}} {ProcDecl &quot;;&quot; | ForwardDecl &quot;;&quot;}.
 ConstDecl     = IdentDef &quot;=&quot; ConstExpr.
 TypeDecl      = IdentDef &quot;=&quot; Type.
 VarDecl       = IdentList &quot;:&quot; Type.
 ProcDecl      = PROCEDURE [Receiver] IdentDef [FormalPars] &quot;;&quot; DeclSeq [BEGIN StatementSeq] END ident.
 ForwardDecl   = PROCEDURE &quot;^&quot; [Receiver] IdentDef [FormalPars].
 FormalPars    = &quot;(&quot; [FPSection {&quot;;&quot; FPSection}] &quot;)&quot; [&quot;:&quot; Qualident].
 FPSection     = [VAR] ident {&quot;,&quot; ident} &quot;:&quot; Type.
 Receiver      = &quot;(&quot; [VAR] ident &quot;:&quot; ident &quot;)&quot;.
 Type          = Qualident
               | ARRAY [ConstExpr {&quot;,&quot; ConstExpr}] OF Type
               | RECORD [&quot;(&quot;Qualident&quot;)&quot;] FieldList {&quot;;&quot; FieldList} END
               | POINTER TO Type
               | PROCEDURE [FormalPars].
 FieldList     = [IdentList &quot;:&quot; Type].
 StatementSeq  = Statement {&quot;;&quot; Statement}.
 Statement     = [ Designator &quot;:=&quot; Expr
               | Designator [&quot;(&quot; [ExprList] &quot;)&quot;]
               | IF Expr THEN StatementSeq {ELSIF Expr THEN StatementSeq} [ELSE StatementSeq] END
               | CASE Expr OF Case {&quot;|&quot; Case} [ELSE StatementSeq] END
               | WHILE Expr DO StatementSeq END
               | REPEAT StatementSeq UNTIL Expr
               | FOR ident &quot;:=&quot; Expr TO Expr [BY ConstExpr] DO StatementSeq END
               | LOOP StatementSeq END
               | WITH Guard DO StatementSeq {&quot;|&quot; Guard DO StatementSeq} [ELSE StatementSeq] END
               | EXIT
               | RETURN [Expr]
       ].	
 Case          = [CaseLabels {&quot;,&quot; CaseLabels} &quot;:&quot; StatementSeq].
 CaseLabels    = ConstExpr [&quot;..&quot; ConstExpr].
 Guard         = Qualident &quot;:&quot; Qualident.
 ConstExpr     = Expr.
 Expr          = SimpleExpr [Relation SimpleExpr].
 SimpleExpr    = [&quot;+&quot; | &quot;-&quot;] Term {AddOp Term}.
 Term          = Factor {MulOp Factor}.
 Factor        = Designator [&quot;(&quot; [ExprList] &quot;)&quot;] | number | character | string | NIL | Set | &quot;(&quot; Expr &quot;)&quot; | &quot; ~ &quot; Factor.
 Set           = &quot;{&quot; [Element {&quot;,&quot; Element}] &quot;}&quot;.
 Element       = Expr [&quot;..&quot; Expr].
 Relation      = &quot;=&quot; | &quot;#&quot; | &quot;&lt;&quot; | &quot;&lt;=&quot; | &quot;&gt;&quot; | &quot;&gt;=&quot; | IN | IS.
 AddOp         = &quot;+&quot; | &quot;-&quot; | OR.
 MulOp         = &quot;*&quot; | &quot;/&quot; | DIV | MOD | &quot;&amp;&quot;.
 Designator    = Qualident {&quot;.&quot; ident | &quot;[&quot; ExprList &quot;]&quot; | &quot; ^ &quot; | &quot;(&quot; Qualident &quot;)&quot;}.
 ExprList      = Expr {&quot;,&quot; Expr}.
 IdentList     = IdentDef {&quot;,&quot; IdentDef}.
 Qualident     = [ident &quot;.&quot;] ident.
 IdentDef      = ident [&quot; * &quot; | &quot; - &quot;].

endColumns

## Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature Strings
  FeatureLink ../features/hasStrings.html
  Supported <span class="hasFeature">✓</span>
  Token "
  Example
   "Hello world"
 row
  Feature Print() Debugging
  FeatureLink ../features/hasPrintDebugging.html
  Supported <span class="hasFeature">✓</span>
  Token Out.String
  Example
 row
  Feature Comments
  FeatureLink ../features/hasComments.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Assignment
  FeatureLink ../features/hasAssignment.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature MultiLine Comments
  FeatureLink ../features/hasMultiLineComments.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   (* A comment
   *)
 row
  Feature Pointers
  FeatureLink ../features/hasPointers.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Semantic Indentation
  FeatureLink ../features/hasSemanticIndentation.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example

keyboardNav jython.html rmarkdown.html

import ../footer.scroll
