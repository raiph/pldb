import ../header.scroll
baseUrl https://pldb.io/concepts/
title Lex

title Lex - Grammar language
 hidden

html
 <a class="trueBaseThemePreviousItem" href="dhall.html">&lt;</a>
 <a class="trueBaseThemeNextItem" href="ninja.html">&gt;</a>

viewSourceUrl https://github.com/breck7/pldb/blob/main/concepts/lex.pldb

startColumns 4

<div class="trueBaseThemeQuickLinks"><a href="https://en.wikipedia.org/wiki/Lex_(software)"><svg version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="98.05px" height="98.05px" viewBox="0 0 98.05 98.05" style="enable-background:new 0 0 98.05 98.05;" xml:space="preserve"><path d="M98.023,17.465l-19.584-0.056c-0.004,0.711-0.006,1.563-0.017,2.121c1.664,0.039,5.922,0.822,7.257,4.327L66.92,67.155 c-0.919-2.149-9.643-21.528-10.639-24.02l9.072-18.818c1.873-2.863,5.455-4.709,8.918-4.843l-0.01-1.968L55.42,17.489 c-0.045,0.499,0.001,1.548-0.068,2.069c5.315,0.144,7.215,1.334,5.941,4.508c-2.102,4.776-6.51,13.824-7.372,15.475 c-2.696-5.635-4.41-9.972-7.345-16.064c-1.266-2.823,1.529-3.922,4.485-4.004v-1.981l-21.82-0.067 c0.016,0.93-0.021,1.451-0.021,2.131c3.041,0.046,6.988,0.371,8.562,3.019c2.087,4.063,9.044,20.194,11.149,24.514 c-2.685,5.153-9.207,17.341-11.544,21.913c-3.348-7.43-15.732-36.689-19.232-44.241c-1.304-3.218,3.732-5.077,6.646-5.213 l0.019-2.148L0,17.398c0.005,0.646,0.027,1.71,0.029,2.187c4.025-0.037,9.908,6.573,11.588,10.683 c7.244,16.811,14.719,33.524,21.928,50.349c0.002,0.029,2.256,0.059,2.281,0.008c4.717-9.653,10.229-19.797,15.206-29.56 L63.588,80.64c0.005,0.004,2.082,0.016,2.093,0.007c7.962-18.196,19.892-46.118,23.794-54.933c1.588-3.767,4.245-6.064,8.543-6.194 l0.032-1.956L98.023,17.465z"/></svg></a> <a href="/edit.html?id=lex" class="material-symbols-outlined">edit</a></div>

* Lex is a <a href="/search.html?q=select+type%0D%0Awhere+type+%3D+grammarLanguage">grammar language</a> created in 1975.
 link /search.html?q=select+type+appeared%0D%0Awhere+appeared+%3D+1975 1975

dashboard
 #288 <span title="TotalRank: 699 Jobs: 103 Users: 515 Facts: 207 Links: 389">on PLDB</span>
 49 Years Old
 3k <span title="Lex repos on GitHub.">Repos</span>

* Lex is a computer program that generates lexical analyzers ("scanners" or "lexers"). Lex is commonly used with the yacc parser generator. Lex, originally written by Mike Lesk and Eric Schmidt and described in 1975, is the standard lexical analyzer generator on many Unix systems, and an equivalent tool is specified as part of the POSIX standard. Read more on Wikipedia...
 https://en.wikipedia.org/wiki/Lex_(software) Read more on Wikipedia...

- Lex Wikipedia page
 https://en.wikipedia.org/wiki/Lex_(software)
- There are at least 2,902 Lex repos on <a href="https://github.com/search?q=language:Lex">GitHub</a>
- Lex first developed in <a href="../lists/originCommunities.html#httpsGithubComBabyragingYashIssues">https://github.com/babyraging/yash/issues</a>
- file extensions for Lex include l and lex
- The  Google BigQuery Public Dataset GitHub snapshot shows 10k users using Lex in 12k repos on <a href="https://api.github.com/search/repositories?q=language:Lex">GitHub</a>
- Lex on HOPL
 https://hopl.info/showlanguage.prx?exp=680
- GitHub supports <a href="https://github.com/Alhadis/language-grammars" title="The package used for syntax highlighting by GitHub Linguist.">syntax highlighting</a> for Lex
- See also: (6 related languages)<a href="yacc.html">Yacc</a>, <a href="unix.html">Unix</a>, <a href="c.html">C</a>, <a href="regex.html">Regular Expressions</a>, <a href="bison.html">Bison</a>, <a href="ragel.html">Ragel</a>
- Read more about Lex on the web: 1.
 https://github.com/babyraging/yash 1.

<br>

codeWithHeader Example from the web:
 /*** Definition section ***/
 
 %{
 /* C code to be copied verbatim */
 #include &lt;stdio.h&gt;
 %}
 
 %%
     /*** Rules section ***/
 
     /* [0-9]+ matches a string of one or more digits */
 [0-9]+  {
             /* yytext is a string containing the matched text. */
             printf(&quot;Saw an integer: %s\n&quot;, yytext);
         }
 
 .|\n    {   /* Ignore all other characters. */   }
 
 %%
 /*** C Code section ***/
 
 int main(void)
 {
     /* Call the lexer, then quit. */
     yylex();
     return 0;
 }

codeWithHeader Example from <a href='https://github.com/Alhadis/language-grammars'>Linguist</a>:
 /*
    +----------------------------------------------------------------------+
    | Zend Engine                                                          |
    +----------------------------------------------------------------------+
    | Copyright (c) 1998-2012 Zend Technologies Ltd. (http://www.zend.com) |
    +----------------------------------------------------------------------+
    | This source file is subject to version 2.00 of the Zend license,     |
    | that is bundled with this package in the file LICENSE, and is        |
    | available through the world-wide-web at the following url:           |
    | http://www.zend.com/license/2_00.txt.                                |
    | If you did not receive a copy of the Zend license and are unable to  |
    | obtain it through the world-wide-web, please send a note to          |
    | license@zend.com so we can mail you a copy immediately.              |
    +----------------------------------------------------------------------+
    | Authors: Zeev Suraski &lt;zeev@zend.com&gt;                                |
    |          Jani Taskinen &lt;jani@php.net&gt;                                |
    |          Marcus Boerger &lt;helly@php.net&gt;                              |
    |          Nuno Lopes &lt;nlopess@php.net&gt;                                |
    |          Scott MacVicar &lt;scottmac@php.net&gt;                           |
    +----------------------------------------------------------------------+
 */
 
 /* $Id$ */
 
 #include &lt;errno.h&gt;
 #include &quot;zend.h&quot;
 #include &quot;zend_globals.h&quot;
 #include &lt;zend_ini_parser.h&gt;
 #include &quot;zend_ini_scanner.h&quot;
 
 #if 0
 # define YYDEBUG(s, c) printf(&quot;state: %d char: %c\n&quot;, s, c)
 #else
 # define YYDEBUG(s, c)
 #endif
 
 #include &quot;zend_ini_scanner_defs.h&quot;
 
 #define YYCTYPE   unsigned char
 /* allow the scanner to read one null byte after the end of the string (from ZEND_MMAP_AHEAD)
  * so that if will be able to terminate to match the current token (e.g. non-enclosed string) */
 #define YYFILL(n) { if (YYCURSOR &gt; YYLIMIT) return 0

codeWithHeader Example from <a href='https://en.wikipedia.org/wiki/Lex_(software)'>Wikipedia</a>:
 Saw an integer: 123
 Saw an integer: 2
 Saw an integer: 6

endColumns

## Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature Line Comments
  FeatureLink ../features/hasLineComments.html
  Supported <span class="hasFeature">✓</span>
  Token //
  Example
   // A comment
 row
  Feature Comments
  FeatureLink ../features/hasComments.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   /* A comment
   */
 row
  Feature MultiLine Comments
  FeatureLink ../features/hasMultiLineComments.html
  Supported <span class="hasFeature">✓</span>
  Token /* */
  Example
   /* A comment
   */
 row
  Feature Semantic Indentation
  FeatureLink ../features/hasSemanticIndentation.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example

keyboardNav dhall.html ninja.html

import ../footer.scroll
