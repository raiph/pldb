import ../header.scroll
baseUrl https://pldb.com/concepts/
title snakemake

title snakemake - Programming language
 hidden

html
 <a class="trueBaseThemePreviousItem" href="hiveql.html">&lt;</a>
 <a class="trueBaseThemeNextItem" href="xodio.html">&gt;</a>

viewSourceUrl https://github.com/breck7/pldb/blob/main/concepts/snakemake.pldb

startColumns 4

<div class="trueBaseThemeQuickLinks"><a href="/edit.html?id=snakemake" class="material-symbols-outlined">edit</a></div>

* snakemake is a <a href="/search.html?q=select+type%0D%0Awhere+type+%3D+pl">programming language</a> created in 2012.
 link /search.html?q=select+type+appeared%0D%0Awhere+appeared+%3D+2012 2012

dashboard
 #1040 <span title="TotalRank: 1606 Jobs: 103 Users: 2829 Facts: 517 Links: 986">on PLDB</span>
 11 Years Old

* A workflow is defined in a ‘Snakefile’ through a domain-specific language that is close to standard Python syntax. It consists of rules that denote how to create output files from input files. The workflow is implied by dependencies between the rules that arise from one rule needing an output file of another as an input file.

- snakemake first developed in <a href="../lists/originCommunities.html#universityOfDuisburgEssen">University of Duisburg-Essen</a>
- Read more about snakemake on the web: 1.
 https://academic.oup.com/bioinformatics/article/28/19/2520/290322 1.

<br>

codeWithHeader Example from the web:
 SAMPLES = &quot;100 101 102 103&quot;.split()
 
 REF = &quot;hg19.fa&quot;
 
 rule all:
 
  input: &quot;{sample}.coverage.pdf&quot;.format(sample = sample)
 
     for sample in SAMPLES
 
 rule fastq_to_sai:
 
   input: ref = REF, reads = &quot;{sample}.{group}.fastq&quot;
 
   output: temp(&quot;{sample}.{group}.sai&quot;)
 
   shell: &quot;bwa aln {input.ref} {input.reads} &gt; {output}&quot;
 
 rule sai_to_bam:
 
   input: REF, &quot;{sample}.1.sai&quot;, &quot;{sample}.2.sai&quot;,
 
      &quot;{sample}.1.fastq&quot;, &quot;{sample}.2.fastq&quot;
 
   output: protected(&quot;{sample}.bam&quot;)
 
   shell: &quot;bwa sampe {input} | samtools view -Sbh - &gt; {output}&quot;
 
 rule remove_duplicates:
 
   input: &quot;{sample}.bam&quot;
 
   output: &quot;{sample}.nodup.bam&quot;
 
   shell: &quot;samtools rmdup {input} {output}&quot;
 
 rule plot_coverage_histogram:
 
   input: &quot;{sample}.nodup.bam&quot;
 
   output: hist = &quot;{sample}.coverage.pdf&quot;
 
   run:
 
     from matplotlib.pyplot import hist, savefig
 
     hist(list(map(int,
 
       shell(&quot;samtools mpileup {input} | cut -f4&quot;,
 
       iterable = True))))
 
     savefig(output.hist)

endColumns

keyboardNav hiveql.html xodio.html

import ../footer.scroll
