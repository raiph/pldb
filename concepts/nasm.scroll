import ../header.scroll
baseUrl https://pldb.com/concepts/
title Netwide Assembler

title Netwide Assembler - Assembly language
 hidden

html
 <a class="trueBaseThemePreviousItem" href="maxima.html">&lt;</a>
 <a class="trueBaseThemeNextItem" href="dc.html">&gt;</a>

viewSourceUrl https://github.com/breck7/pldb/blob/main/concepts/nasm.pldb

startColumns 4

<div class="trueBaseThemeQuickLinks"><a href="http://www.nasm.us" class="material-symbols-outlined">home</a> <a href="https://en.wikipedia.org/wiki/Netwide_Assembler"><svg version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="98.05px" height="98.05px" viewBox="0 0 98.05 98.05" style="enable-background:new 0 0 98.05 98.05;" xml:space="preserve"><path d="M98.023,17.465l-19.584-0.056c-0.004,0.711-0.006,1.563-0.017,2.121c1.664,0.039,5.922,0.822,7.257,4.327L66.92,67.155 c-0.919-2.149-9.643-21.528-10.639-24.02l9.072-18.818c1.873-2.863,5.455-4.709,8.918-4.843l-0.01-1.968L55.42,17.489 c-0.045,0.499,0.001,1.548-0.068,2.069c5.315,0.144,7.215,1.334,5.941,4.508c-2.102,4.776-6.51,13.824-7.372,15.475 c-2.696-5.635-4.41-9.972-7.345-16.064c-1.266-2.823,1.529-3.922,4.485-4.004v-1.981l-21.82-0.067 c0.016,0.93-0.021,1.451-0.021,2.131c3.041,0.046,6.988,0.371,8.562,3.019c2.087,4.063,9.044,20.194,11.149,24.514 c-2.685,5.153-9.207,17.341-11.544,21.913c-3.348-7.43-15.732-36.689-19.232-44.241c-1.304-3.218,3.732-5.077,6.646-5.213 l0.019-2.148L0,17.398c0.005,0.646,0.027,1.71,0.029,2.187c4.025-0.037,9.908,6.573,11.588,10.683 c7.244,16.811,14.719,33.524,21.928,50.349c0.002,0.029,2.256,0.059,2.281,0.008c4.717-9.653,10.229-19.797,15.206-29.56 L63.588,80.64c0.005,0.004,2.082,0.016,2.093,0.007c7.962-18.196,19.892-46.118,23.794-54.933c1.588-3.767,4.245-6.064,8.543-6.194 l0.032-1.956L98.023,17.465z"/></svg></a> <a href="/edit.html?id=nasm" class="material-symbols-outlined">edit</a></div>

* Netwide Assembler is an open source <a href="/search.html?q=select+type%0D%0Awhere+type+%3D+assembly">assembly language</a> created in 1996.
 link /search.html?q=select+type+appeared%0D%0Awhere+appeared+%3D+1996 1996

dashboard
 #395 <span title="TotalRank: 876 Jobs: 103 Users: 703 Facts: 384 Links: 389">on PLDB</span>
 28 Years Old

* The Netwide Assembler (NASM) is an assembler and disassembler for the Intel x86 architecture. It can be used to write 16-bit, 32-bit (IA-32) and 64-bit (x86-64) programs. NASM is considered to be one of the most popular assemblers for Linux. Read more on Wikipedia...
 https://en.wikipedia.org/wiki/Netwide_Assembler Read more on Wikipedia...

- Netwide Assembler website
 http://www.nasm.us
- Netwide Assembler Wikipedia page
 https://en.wikipedia.org/wiki/Netwide_Assembler
- Netwide Assembler first developed in <a href="../lists/originCommunities.html#httpsGithubComNetwideAssembler">https://github.com/netwide-assembler</a>
- file extensions for Netwide Assembler include asm and ASM
- <a href="pygments.html">Pygments</a> supports <a href="https://github.com/pygments/pygments/blob/master/pygments/lexers/asm.py">syntax highlighting</a> for Netwide Assembler
- <a href="http://www.nasm.us">nasm.us</a> was registered in 2007
- See also: (9 related languages)<a href="x86-assembly.html">x86 Assembly</a>, <a href="assembly-language.html">Assembly language</a>, <a href="x86-isa.html">X86</a>, <a href="ia-32.html">IA-32</a>, <a href="linux.html">Linux</a>, <a href="coff.html">Common Object File Format</a>, <a href="elf.html">Extensible Linking Format</a>, <a href="powerpc.html">PowerPC</a>, <a href="sparc.html">SPARC</a>

<br>

codeWithHeader Example from <a href='https://en.wikipedia.org/wiki/Netwide_Assembler'>Wikipedia</a>:
 global _start
 
 section .data
 
 	query_string:		db	&quot;Enter a character:  &quot;
 	query_string_len:	equ	$ - query_string
 	out_string:			db	&quot;You have input:  &quot;
 	out_string_len:		equ	$ - out_string
 
 section .bss
 
 	in_char:			resw 4
 
 section .text
 
 _start:
 
 	mov	rax, 0x2000004	 	; put the write-system-call-code into register rax
 	mov	rdi, 1				; tell kernel to use stdout
 	mov	rsi, query_string	; rsi is where the kernel expects to find the address of the message
 	mov	rdx, query_string_len	; and rdx is where the kernel expects to find the length of the message 
 	syscall
 
 	; read in the character
 	mov	rax, 0x2000003		; read system call
 	mov	rdi, 0				; stdin
 	mov	rsi, in_char		; address for storage, declared in section .bss
 	mov	rdx, 2				; get 2 bytes from the kernel&#39;s buffer (one for the carriage return)
 	syscall
 
 	; show user the output
 	mov	rax, 0x2000004		; write system call
 	mov	rdi, 1				; stdout
 	mov	rsi, out_string
 	mov	rdx, out_string_len
 	syscall
 
 	mov	rax, 0x2000004		; write system call
 	mov	rdi, 1				; stdout
 	mov	rsi, in_char
 	mov	rdx, 2				; the second byte is to apply the carriage return expected in the string
 	syscall
 
 	; exit system call
 	mov	rax, 0x2000001		; exit system call
         xor     rdi, rdi
 	syscall

endColumns

## Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature Comments
  FeatureLink ../features/hasComments.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   ; A comment
 row
  Feature Line Comments
  FeatureLink ../features/hasLineComments.html
  Supported <span class="hasFeature">✓</span>
  Token ;
  Example
   ; A comment
 row
  Feature Semantic Indentation
  FeatureLink ../features/hasSemanticIndentation.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example

keyboardNav maxima.html dc.html

import ../footer.scroll
