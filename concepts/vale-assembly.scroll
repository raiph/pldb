import ../header.scroll
baseUrl https://pldb.io/concepts/
title Vale

title Vale - Assembly language
 hidden

html
 <a class="trueBaseThemePreviousItem" href="visdown.html">&lt;</a>
 <a class="trueBaseThemeNextItem" href="gentee.html">&gt;</a>

viewSourceUrl https://github.com/breck7/pldb/blob/main/concepts/vale-assembly.pldb

startColumns 4

<div class="trueBaseThemeQuickLinks"><a href="https://github.com/project-everest/vale" class="material-symbols-outlined">code</a> <a href="/edit.html?id=vale-assembly" class="material-symbols-outlined">edit</a></div>

* Vale, aka Verified Assembly Language for Everest, is an <a href="/search.html?q=select+type%0D%0Awhere+type+%3D+assembly">assembly language</a> created in 2017 by Chris Hawblitzel.
 link /search.html?q=select+type+appeared%0D%0Awhere+appeared+%3D+2017 2017
 link ../lists/creators.html#chrisHawblitzel Chris Hawblitzel

codeWithHeader Source code:
 git clone https://github.com/project-everest/vale

dashboard
 #1072 <span title="TotalRank: 1632 Jobs: 103 Users: 1006 Facts: 543 Links: 986">on PLDB</span>
 7 Years Old

* Vale is a tool for constructing formally verified high-performance assembly language code, with an emphasis on cryptographic code. It uses existing verification frameworks, such as Dafny and F*, for formal verification. It supports multiple architectures, such as x86, x64, and ARM, and multiple platforms, such as Windows, Mac, and Linux. Additional architectures and platforms can be supported with no changes to the Vale tool.

- Vale is developed on <a href="https://github.com/project-everest/vale">GitHub</a> and has 217 stars
- See also: (1 related languages)<a href="fstar.html">F*</a>

<br>

codeWithHeader Example from the web:
 procedure ReadA(ghost a:seq(uint32),inline b:bool)
  reads r0; mem;
  modifies r1;
  requires
   length(a) &gt;= 3;
   a[0] &lt;= 100;
   a[1] &lt;= 100;
   forall i :: 0 &lt;= i &lt; length(a) ==&gt;
    InMem(r0 + 4 * i, mem)
    &amp;&amp; mem[r0 + 4 * i] == a[i];
  ensures
   b ==&gt; r1 == a[0] + 1;
   !b ==&gt; r1 == a[1] + 1;
 {
  inline if (b) {
   LDR(r1, r0, 0); //load memory [r0+0] into r1
   AddOne(r1);
  } else {
   LDR(r1, r0, 4); //load memory [r0+4] into r1
   AddOne(r1);
  }
 }
 procedure{:recursive} AddNToR7(inline n:nat)
  modifies r7;
  requires r7 + n &lt;= 0xffffffff;
  ensures r7 == old(r7) + n;
 {
  inline if (n &gt; 0) {
   AddOne(r7);
   AddNToR7(n - 1);
 }

endColumns

## Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature Comments
  FeatureLink ../features/hasComments.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   // A comment
 row
  Feature Line Comments
  FeatureLink ../features/hasLineComments.html
  Supported <span class="hasFeature">✓</span>
  Token //
  Example
   // A comment
 row
  Feature Semantic Indentation
  FeatureLink ../features/hasSemanticIndentation.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example

keyboardNav visdown.html gentee.html

import ../footer.scroll
