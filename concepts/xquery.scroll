import ../header.scroll
baseUrl https://pldb.com/concepts/
title XQuery

title XQuery - Programming language
 hidden

html
 <a class="trueBaseThemePreviousItem" href="ecmascript.html">&lt;</a>
 <a class="trueBaseThemeNextItem" href="visual-basic.net.html">&gt;</a>

viewSourceUrl https://github.com/breck7/pldb/blob/main/concepts/xquery.pldb

startColumns 4

<div class="trueBaseThemeQuickLinks"><a href="http://www.w3.org/XML/Query/" class="material-symbols-outlined">home</a> <a href="https://www.w3.org/TR/xquery-31/" class="material-symbols-outlined">menu_book</a> <a href="https://en.wikipedia.org/wiki/XQuery"><svg version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="98.05px" height="98.05px" viewBox="0 0 98.05 98.05" style="enable-background:new 0 0 98.05 98.05;" xml:space="preserve"><path d="M98.023,17.465l-19.584-0.056c-0.004,0.711-0.006,1.563-0.017,2.121c1.664,0.039,5.922,0.822,7.257,4.327L66.92,67.155 c-0.919-2.149-9.643-21.528-10.639-24.02l9.072-18.818c1.873-2.863,5.455-4.709,8.918-4.843l-0.01-1.968L55.42,17.489 c-0.045,0.499,0.001,1.548-0.068,2.069c5.315,0.144,7.215,1.334,5.941,4.508c-2.102,4.776-6.51,13.824-7.372,15.475 c-2.696-5.635-4.41-9.972-7.345-16.064c-1.266-2.823,1.529-3.922,4.485-4.004v-1.981l-21.82-0.067 c0.016,0.93-0.021,1.451-0.021,2.131c3.041,0.046,6.988,0.371,8.562,3.019c2.087,4.063,9.044,20.194,11.149,24.514 c-2.685,5.153-9.207,17.341-11.544,21.913c-3.348-7.43-15.732-36.689-19.232-44.241c-1.304-3.218,3.732-5.077,6.646-5.213 l0.019-2.148L0,17.398c0.005,0.646,0.027,1.71,0.029,2.187c4.025-0.037,9.908,6.573,11.588,10.683 c7.244,16.811,14.719,33.524,21.928,50.349c0.002,0.029,2.256,0.059,2.281,0.008c4.717-9.653,10.229-19.797,15.206-29.56 L63.588,80.64c0.005,0.004,2.082,0.016,2.093,0.007c7.962-18.196,19.892-46.118,23.794-54.933c1.588-3.767,4.245-6.064,8.543-6.194 l0.032-1.956L98.023,17.465z"/></svg></a> <a href="/edit.html?id=xquery" class="material-symbols-outlined">edit</a></div>

* XQuery is a <a href="/search.html?q=select+type%0D%0Awhere+type+%3D+pl">programming language</a> created in 2007.
 link /search.html?q=select+type+appeared%0D%0Awhere+appeared+%3D+2007 2007

dashboard
 #107 <span title="TotalRank: 311 Jobs: 71 Users: 460 Facts: 106 Links: 134">on PLDB</span>
 17 Years Old
 2k <span title="XQuery repos on GitHub.">Repos</span>

* XQuery (XML Query) is a query and functional programming language that queries and transforms collections of structured and unstructured data, usually in the form of XML, text and with vendor-specific extensions for other data formats (JSON, binary, etc.). The language is developed by the XML Query working group of the W3C. The work is closely coordinated with the development of XSLT by the XSL Working Group; the two groups share responsibility for XPath, which is a subset of XQuery. Read more on Wikipedia...
 https://en.wikipedia.org/wiki/XQuery Read more on Wikipedia...

- XQuery website
 http://www.w3.org/XML/Query/
- XQuery Wikipedia page
 https://en.wikipedia.org/wiki/XQuery
- XQuery docs
 https://www.w3.org/TR/xquery-31/
- There are at least 1,753 XQuery repos on <a href="https://github.com/search?q=language:XQuery">GitHub</a>
- XQuery first developed in <a href="../lists/originCommunities.html#w3C">W3C</a>
- PLDB estimates there are currently 125 job openings for XQuery programmers.
- file extensions for XQuery include xq, xql, xqm, xqy and xquery
- The  Google BigQuery Public Dataset GitHub snapshot shows 983 users using XQuery in 1k repos on <a href="https://api.github.com/search/repositories?q=language:XQuery">GitHub</a>
- Explore XQuery snippets on <a href="http://www.rosettacode.org/wiki/Category:XQuery">Rosetta Code</a>
- XQuery appears in the <a href="https://www.tiobe.com/tiobe-index/">TIOBE Index</a>
- <a href="codemirror.html">CodeMirror</a> <a href="https://github.com/codemirror/codemirror5/tree/master/mode/xquery">package</a> for syntax highlighting XQuery
- <a href="pygments.html">Pygments</a> supports <a href="https://github.com/pygments/pygments/blob/master/pygments/lexers/webmisc.py">syntax highlighting</a> for XQuery
- GitHub supports <a href="https://github.com/wcandillon/language-jsoniq" title="The package used for syntax highlighting by GitHub Linguist.">syntax highlighting</a> for XQuery
- Official Blog page for XQuery
 https://www.w3.org/blog/tags/xquery/
- Indeed.com has 125 matches for <a href="https://www.indeed.com/jobs?q=XQuery developer">"XQuery developer"</a>.
- See also: (10 related languages)<a href="xpath.html">XPath</a>, <a href="sql.html">SQL</a>, <a href="lisp.html">Lisp</a>, <a href="prolog.html">Prolog</a>, <a href="xml.html">XML</a>, <a href="java.html">Java</a>, <a href="csharp.html">C#</a>, <a href="jsoniq.html">JSONiq</a>, <a href="json.html">JSON</a>, <a href="isbn.html">ISBN</a>

<br>

codeWithHeader Example from <a href='https://github.com/leachim6/hello-world/blob/main/x/XQuery.xq'>hello-world</a>:
 let $hello := &quot;Hello World&quot;
 return $hello
 

codeWithHeader Example from <a href='http://helloworldcollection.de/#XQuery'>the Hello World Collection</a>:
 (: Hello World with XQuery :)
 let $i := &quot;Hello World&quot;
 return $i
 

codeWithHeader Example from <a href='https://github.com/wcandillon/language-jsoniq'>Linguist</a>:
 (: -------------------------------------------------------------------------------------
 
     xproc.xqm - core xqm contains entry points, primary eval-step function and
     control functions.
 
  ---------------------------------------------------------------------------------------- :)
 xquery version &quot;3.0&quot;  encoding &quot;UTF-8&quot;;
 
 module namespace xproc = &quot;http://xproc.net/xproc&quot;;
 
  (: declare namespaces :)
  declare namespace p=&quot;http://www.w3.org/ns/xproc&quot;;
  declare namespace c=&quot;http://www.w3.org/ns/xproc-step&quot;;
  declare namespace err=&quot;http://www.w3.org/ns/xproc-error&quot;;
 
  (: module imports :)
 (:  import module namespace util = &quot;http://xproc.net/xproc/util&quot; at &quot;util1.xqm&quot;; :)
  import module namespace const = &quot;http://xproc.net/xproc/const&quot; at &quot;const.xqm&quot;;
  import module namespace parse = &quot;http://xproc.net/xproc/parse&quot; at &quot;parse.xqm&quot;;
  import module namespace u = &quot;http://xproc.net/xproc/util&quot; at &quot;util.xqm&quot;;
 
  (: declare options :)
  declare boundary-space preserve;
  declare option saxon:output &quot;indent=yes&quot;;
 
  (: declare functions :)
  declare variable $xproc:run-step       := xproc:run#6;
  declare variable $xproc:parse-and-eval := ();
  declare variable $xproc:declare-step   := ();
  declare variable $xproc:choose         := ();
  declare variable $xproc:try            := ();
  declare variable $xproc:catch          := ();
  declare variable $xproc:group          := ();
  declare variable $xproc:for-each       := ();
  declare variable $xproc:viewport       := ();
  declare variable $xproc:library        := ();
  declare variable $xproc:pipeline       := ();
  declare variable $xproc:variable       := ();
 
 
  (: list all declared namespaces :)
  (: -------------------------------------------------------------------------- :)
  declare function xproc:enum-namespaces($pipeline){
  (: -------------------------------------------------------------------------- :)
     &lt;namespace name=&quot;{$pipeline/@name}&quot;&gt;{u:enum-ns(&lt;dummy&gt;{$pipeline}&lt;/dummy&gt;)}&lt;/namespace&gt;
  };
 
  (: entry point :)
  (: -------------------------------------------------------------------------- :)
  declare function xproc:run($pipeline,$stdin,$dflag,$tflag,$bindings,$options){
  (: -------------------------------------------------------------------------- :)
 
  (: STEP I: preprocess :)
  let $validate   := ()
  let $namespaces := xproc:enum-namespaces($pipeline)
  let $parse      := parse:explicit-bindings( parse:AST(parse:explicit-name(parse:explicit-type($pipeline))))
  let $ast        := element p:declare-step {$parse/@*,
        parse:pipeline-step-sort( $parse/*, () )
      }
 
  (: STEP II: eval AST :)
  let $eval_result := ()
 
  (: STEP III: serialize and return results :)
  let $serialized_result := $pipeline
 
  return 
    $serialized_result
  };
 
 

codeWithHeader Example from <a href='https://en.wikipedia.org/wiki/XQuery'>Wikipedia</a>:
 &lt;html&gt;&lt;body&gt;
  {
    for $act in doc(&quot;hamlet.xml&quot;)//ACT
    let $speakers := distinct-values($act//SPEAKER)
    return
      &lt;div&gt;
        &lt;h1&gt;{ string($act/TITLE) }&lt;/h1&gt;
        &lt;ul&gt;
        {
          for $speaker in $speakers
          return &lt;li&gt;{ $speaker }&lt;/li&gt;
        }
        &lt;/ul&gt;
      &lt;/div&gt;
  }
  &lt;/body&gt;&lt;/html&gt;

endColumns

## Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature Integers
  FeatureLink ../features/hasIntegers.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Floats
  FeatureLink ../features/hasFloats.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Strings
  FeatureLink ../features/hasStrings.html
  Supported <span class="hasFeature">✓</span>
  Token "
  Example
   "Hello world"
 row
  Feature Comments
  FeatureLink ../features/hasComments.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   (: Hello World with XQuery :)
 row
  Feature Case Insensitive Identifiers
  FeatureLink ../features/hasCaseInsensitiveIdentifiers.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example
 row
  Feature Semantic Indentation
  FeatureLink ../features/hasSemanticIndentation.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example
 row
  Feature Line Comments
  FeatureLink ../features/hasLineComments.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example

keyboardNav ecmascript.html visual-basic.net.html

import ../footer.scroll
