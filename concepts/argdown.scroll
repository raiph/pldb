import ../header.scroll
baseUrl https://pldb.com/concepts/
title Argdown

title Argdown - Text markup language
 hidden

html
 <a class="trueBaseThemePreviousItem" href="xtext.html">&lt;</a>
 <a class="trueBaseThemeNextItem" href="renpy.html">&gt;</a>

viewSourceUrl https://github.com/breck7/pldb/blob/main/concepts/argdown.pldb

startColumns 4

<div class="trueBaseThemeQuickLinks"><a href="https://argdown.org/" class="material-symbols-outlined">home</a> <a href="https://argdown.org/sandbox/html" class="material-symbols-outlined">terminal</a> <a href="https://github.com/christianvoigt/argdown" class="material-symbols-outlined">code</a> <a href="/edit.html?id=argdown" class="material-symbols-outlined">edit</a></div>

* Argdown is a <a href="/search.html?q=select+type%0D%0Awhere+type+%3D+textMarkup">text markup language</a> created in 2014.
 link /search.html?q=select+type+appeared%0D%0Awhere+appeared+%3D+2014 2014

codeWithHeader Source code:
 git clone https://github.com/christianvoigt/argdown

dashboard
 #461 <span title="TotalRank: 983 Jobs: 103 Users: 680 Facts: 200 Links: 986">on PLDB</span>
 10 Years Old

* Try now: <a href="https://argdown.org/sandbox/html">Web</a>

* a simple syntax for complex argumentation

- Argdown website
 https://argdown.org/
- Argdown is developed on <a href="https://github.com/christianvoigt/argdown">GitHub</a> and has 583 stars
- Argdown first developed in <a href="../lists/originCommunities.html#karlsruheInstituteOfTechnology">Karlsruhe Institute of Technology</a>
- <a href="https://argdown.org/">argdown.org</a> was registered in 2018

<br>

codeWithHeader Example from the web:
  # Welcome to Argdown!
 
  [Intro]: Argdown is a simple syntax for defining argumentative 
  structures, inspired by Markdown.
    + Writing a *pro &amp; contra list* in Argdown is as 
      simple as writing a twitter message (actually we are 
      right in the middle of one).
    + But you can also 
      **logically reconstruct** more complex dialectical 
      relations between arguments or dive into 
      the details of their premise-conclusion structures.
    + Finally, you can export Argdown as a graph and create 
      **argument maps** of whole debates.
 
  This Argdown document only demonstrates the basic syntax elements. 
  The argument map produced is a &quot;bogus debate&quot;. 
 
  To read a reconstruction of a *real* debate, select one of the 
  **example debates** by moving your mouse to the *&quot;Examples&quot;* button 
  on the upper left, above the text editor.
 
  ## Argdown Basics
 
  This is a normal statement with __bold__ and _italic_ text, 
  a #tag and a [link](https://github.com/christianvoigt/argdown-parser).
 
  [Statement 1]: Another statement (after a blank line), 
  this time with a title defined in square brackets. 
  We can use the title to refer to this statement later 
  or mention it in other statements. #(Another tag)
 
  [Statement 2]: Let&#39;s do that now: The previous 
  statement was @[Statement 1].
    + &lt;Argument title&gt;: Statements can be supported 
      by __arguments__. Arguments are defined by 
      using angle brackets. #tag
    - &lt;Another argument&gt;: This arguments attacks @[Statement 2]. #tag
      - &lt;Yet another argument&gt;: Arguments can also 
        be supported or attacked. #yet-another-tag
        &lt;!--
        By the way,
        this is a multiline comment.
        --&gt;
 
  We can also do that the other way around:
 
  [Intro]
    -&gt; &lt;Argument 1&gt;
 
  Headings can be used to group arguments and statements together. 
  In the map these groups are visualized as grey boxes.
 
  Tags are visualized by the colors of the arguments and statements in the map.
 
  ### Argument reconstructions
 
  So far, we have ignored the internal structure of arguments. Arguments 
  consist of premises from which conclusions are inferred. We can precisely 
  define this premise-conclusion structure with Argdown:
 
  &lt;Argument 1&gt;
 
  (1) First premise (this is is a normal statement 
      and you can do everything with it, we have done 
      with the statements above).
  (2) [Statement 2]: We have already defined a statement 
      with this title.
      Argdown allows you to add multiple statements 
      to the same &quot;equivalence class&quot; by giving them 
      the same title. The statements will then be treated 
      as logically equivalent.
  --
  Some inference rule (Some additional info: 1,2)
  --
  (3) And now the conclusion 
    -&gt; Outgoing relations of the conclusion, 
    are also interpreted as outgoing relations of 
    the whole argument.
    +&gt; &lt;Yet another argument&gt;
    &lt;!--
    The second relation is only &quot;sketched&quot;,
    because it does not declare which premise
    of @&lt;Argument 2&gt; is supported.
    (At this point this is not possible,
    as we have not yet reconstructed @&lt;Argument 2&gt;)
    --&gt;
    -&gt; [Statement 1]
 
    We can also link to headings: 
    [Back to top](#heading-welcome-to-argdown)

endColumns

## Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature MultiLine Comments
  FeatureLink ../features/hasMultiLineComments.html
  Supported <span class="hasFeature">✓</span>
  Token <!-- -->
  Example
   <!-- A comment
   -->
 row
  Feature Comments
  FeatureLink ../features/hasComments.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   // A comment
 row
  Feature Line Comments
  FeatureLink ../features/hasLineComments.html
  Supported <span class="hasFeature">✓</span>
  Token //
  Example
   // A comment
 row
  Feature Semantic Indentation
  FeatureLink ../features/hasSemanticIndentation.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example

keyboardNav xtext.html renpy.html

import ../footer.scroll
