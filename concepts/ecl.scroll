import ../header.scroll
baseUrl https://pldb.com/concepts/
title ECL

title ECL - Programming language
 hidden

html
 <a class="trueBaseThemePreviousItem" href="general-algebraic-modeling-system.html">&lt;</a>
 <a class="trueBaseThemeNextItem" href="erb.html">&gt;</a>

viewSourceUrl https://github.com/breck7/pldb/blob/main/concepts/ecl.pldb

startColumns 4

<div class="trueBaseThemeQuickLinks"><a href="http://hpccsystems.com/" class="material-symbols-outlined">home</a> <a href="https://github.com/hpcc-systems/HPCC-Platform" class="material-symbols-outlined">code</a> <a href="https://en.wikipedia.org/wiki/ECL,_data-centric_programming_language_for_Big_Data"><svg version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="98.05px" height="98.05px" viewBox="0 0 98.05 98.05" style="enable-background:new 0 0 98.05 98.05;" xml:space="preserve"><path d="M98.023,17.465l-19.584-0.056c-0.004,0.711-0.006,1.563-0.017,2.121c1.664,0.039,5.922,0.822,7.257,4.327L66.92,67.155 c-0.919-2.149-9.643-21.528-10.639-24.02l9.072-18.818c1.873-2.863,5.455-4.709,8.918-4.843l-0.01-1.968L55.42,17.489 c-0.045,0.499,0.001,1.548-0.068,2.069c5.315,0.144,7.215,1.334,5.941,4.508c-2.102,4.776-6.51,13.824-7.372,15.475 c-2.696-5.635-4.41-9.972-7.345-16.064c-1.266-2.823,1.529-3.922,4.485-4.004v-1.981l-21.82-0.067 c0.016,0.93-0.021,1.451-0.021,2.131c3.041,0.046,6.988,0.371,8.562,3.019c2.087,4.063,9.044,20.194,11.149,24.514 c-2.685,5.153-9.207,17.341-11.544,21.913c-3.348-7.43-15.732-36.689-19.232-44.241c-1.304-3.218,3.732-5.077,6.646-5.213 l0.019-2.148L0,17.398c0.005,0.646,0.027,1.71,0.029,2.187c4.025-0.037,9.908,6.573,11.588,10.683 c7.244,16.811,14.719,33.524,21.928,50.349c0.002,0.029,2.256,0.059,2.281,0.008c4.717-9.653,10.229-19.797,15.206-29.56 L63.588,80.64c0.005,0.004,2.082,0.016,2.093,0.007c7.962-18.196,19.892-46.118,23.794-54.933c1.588-3.767,4.245-6.064,8.543-6.194 l0.032-1.956L98.023,17.465z"/></svg></a> <a href="/edit.html?id=ecl" class="material-symbols-outlined">edit</a></div>

* ECL is a <a href="/search.html?q=select+type%0D%0Awhere+type+%3D+pl">programming language</a> created in 2000.
 link /search.html?q=select+type+appeared%0D%0Awhere+appeared+%3D+2000 2000

codeWithHeader Source code:
 git clone https://github.com/hpcc-systems/HPCC-Platform

dashboard
 #318 <span title="TotalRank: 740 Jobs: 103 Users: 400 Facts: 237 Links: 986">on PLDB</span>
 24 Years Old
 234 <span title="ECL repos on GitHub.">Repos</span>

* ECL is a declarative, data centric programming language designed in 2000 to allow a team of programmers to process big data across a high performance computing cluster without the programmer being involved in many of the lower level, imperative decisions.. Read more on Wikipedia...
 https://en.wikipedia.org/wiki/ECL,_data-centric_programming_language_for_Big_Data Read more on Wikipedia...

- ECL website
 http://hpccsystems.com/
- ECL Wikipedia page
 https://en.wikipedia.org/wiki/ECL,_data-centric_programming_language_for_Big_Data
- ECL is developed on <a href="https://github.com/hpcc-systems/HPCC-Platform">GitHub</a> and has 521 stars
- There are at least 234 ECL repos on <a href="https://github.com/search?q=language:ECL">GitHub</a>
- ECL first developed in <a href="../lists/originCommunities.html#lexisNexisRiskSolutionsGroup">LexisNexis Risk Solutions Group</a>
- file extensions for ECL include ecl and eclxml
- The  Google BigQuery Public Dataset GitHub snapshot shows 25 users using ECL in 25 repos on <a href="https://api.github.com/search/repositories?q=language:ECL">GitHub</a>
- Explore ECL snippets on <a href="http://www.rosettacode.org/wiki/Category:ECL">Rosetta Code</a>
- <a href="codemirror.html">CodeMirror</a> <a href="https://github.com/codemirror/codemirror5/tree/master/mode/ecl">package</a> for syntax highlighting ECL
- <a href="pygments.html">Pygments</a> supports <a href="https://github.com/pygments/pygments/blob/master/pygments/lexers/ecl.py">syntax highlighting</a> for ECL
- GitHub supports <a href="https://github.com/hpcc-systems/ecl-tmLanguage" title="The package used for syntax highlighting by GitHub Linguist.">syntax highlighting</a> for ECL
- <a href="http://hpccsystems.com/">hpccsystems.com</a> was registered in 2010
- See also: (5 related languages)<a href="linux.html">Linux</a>, <a href="prolog.html">Prolog</a>, <a href="pascal.html">Pascal</a>, <a href="sql.html">SQL</a>, <a href="clarion.html">Clarion</a>

<br>

codeWithHeader Example from <a href='https://github.com/hpcc-systems/ecl-tmLanguage'>Linguist</a>:
 /* 
  * Multi-line comment
  */
 #option (&#39;slidingJoins&#39;, true);
 
 namesRecord :=
             RECORD
 string20        surname;
 string10        forename;
 integer2        age;
 integer2        dadAge;
 integer2        mumAge;
             END;
 
 namesRecord2 :=
             record
 string10        extra;
 namesRecord;
             end;
 
 namesTable := dataset(&#39;x&#39;,namesRecord,FLAT);
 namesTable2 := dataset(&#39;y&#39;,namesRecord2,FLAT);
 
 integer2 aveAgeL(namesRecord l) := (l.dadAge+l.mumAge)/2;
 integer2 aveAgeR(namesRecord2 r) := (r.dadAge+r.mumAge)/2;
 
 // Standard join on a function of left and right
 output(join(namesTable, namesTable2, aveAgeL(left) = aveAgeR(right)));
 
 //Several simple examples of sliding join syntax
 output(join(namesTable, namesTable2, left.age &gt;= right.age - 10 and left.age &lt;= right.age +10));
 output(join(namesTable, namesTable2, left.age between right.age - 10 and right.age +10));
 output(join(namesTable, namesTable2, left.age between right.age + 10 and right.age +30));
 output(join(namesTable, namesTable2, left.age between (right.age + 20) - 10 and (right.age +20) + 10));
 output(join(namesTable, namesTable2, aveAgeL(left) between aveAgeR(right)+10 and aveAgeR(right)+40));
 
 //Same, but on strings.  Also includes age to ensure sort is done by non-sliding before sliding.
 output(join(namesTable, namesTable2, left.surname between right.surname[1..10]+&#39;AAAAAAAAAA&#39; and right.surname[1..10]+&#39;ZZZZZZZZZZ&#39; and left.age=right.age));
 output(join(namesTable, namesTable2, left.surname between right.surname[1..10]+&#39;AAAAAAAAAA&#39; and right.surname[1..10]+&#39;ZZZZZZZZZZ&#39; and left.age=right.age,all));
 
 //This should not generate a self join
 output(join(namesTable, namesTable, left.age between right.age - 10 and right.age +10));
 

codeWithHeader Example from <a href='https://en.wikipedia.org/wiki/ECL,_data-centric_programming_language_for_Big_Data'>Wikipedia</a>:
 D := DATASET([{&#39;ECL&#39;},{&#39;Declarative&#39;},{&#39;Data&#39;},{&#39;Centric&#39;},{&#39;Programming&#39;},{&#39;Language&#39;}],{STRING Value;});

endColumns

## Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature MultiLine Comments
  FeatureLink ../features/hasMultiLineComments.html
  Supported <span class="hasFeature">✓</span>
  Token /* */
  Example
   /* A comment
   */
 row
  Feature Line Comments
  FeatureLink ../features/hasLineComments.html
  Supported <span class="hasFeature">✓</span>
  Token //
  Example
   // A comment
 row
  Feature Comments
  FeatureLink ../features/hasComments.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Semantic Indentation
  FeatureLink ../features/hasSemanticIndentation.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example

keyboardNav general-algebraic-modeling-system.html erb.html

import ../footer.scroll
