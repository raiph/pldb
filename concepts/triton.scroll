import ../header.scroll
baseUrl https://pldb.com/concepts/
title Triton

title Triton - Programming language
 hidden

html
 <a class="trueBaseThemePreviousItem" href="runoff.html">&lt;</a>
 <a class="trueBaseThemeNextItem" href="ddml.html">&gt;</a>

viewSourceUrl https://github.com/breck7/pldb/blob/main/concepts/triton.pldb

startColumns 4

<div class="trueBaseThemeQuickLinks"><a href="https://github.com/openai/triton" class="material-symbols-outlined">code</a> <a href="/edit.html?id=triton" class="material-symbols-outlined">edit</a></div>

* Triton is a <a href="/search.html?q=select+type%0D%0Awhere+type+%3D+pl">programming language</a> created in 2021 by Philippe Tillet.
 link /search.html?q=select+type+appeared%0D%0Awhere+appeared+%3D+2021 2021
 link ../lists/creators.html#philippeTillet Philippe Tillet

codeWithHeader Source code:
 git clone https://github.com/openai/triton

dashboard
 #553 <span title="TotalRank: 1117 Jobs: 103 Users: 212 Facts: 802 Links: 986">on PLDB</span>
 3 Years Old

* This is the development repository of Triton, a language and compiler for writing highly efficient custom Deep-Learning primitives. The aim of Triton is to provide an open-source environment to write fast code at higher productivity than CUDA, but also with higher flexibility than other existing DSLs.

- Triton is developed on <a href="https://github.com/openai/triton">GitHub</a> and has 3,881 stars
- Triton first developed in <a href="../lists/originCommunities.html#openAi">OpenAI</a>
- See also: (1 related languages)<a href="numba.html">Numba</a>
- Read more about Triton on the web: 1.
 https://openai.com/blog/triton/ 1.

<br>

codeWithHeader Example from the web:
 # This is a GPU kernel in Triton.
 # Different instances of this
 # function may run in parallel.
 @jit
 def add(X, Y, Z, N):
    # In Triton, each kernel instance
    # executes block operations on a
    # single thread: there is no construct
    # analogous to threadIdx
    pid = program_id(0)
    # block of indices
    idx = pid * BLOCK + arange(BLOCK)
    mask = idx &lt; N
    # Triton uses pointer arithmetics  
    # rather than indexing operators
    x = load(X + idx, mask=mask)
    y = load(Y + idx, mask=mask)
    store(Z + idx, x + y, mask=mask)

endColumns

keyboardNav runoff.html ddml.html

import ../footer.scroll
