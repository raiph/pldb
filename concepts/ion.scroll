import ../header.scroll
baseUrl https://pldb.io/concepts/
title Ion

title Ion - Interface design language
 hidden

html
 <a class="trueBaseThemePreviousItem" href="ladder-logic.html">&lt;</a>
 <a class="trueBaseThemeNextItem" href="swi-prolog.html">&gt;</a>

viewSourceUrl https://github.com/breck7/pldb/blob/main/concepts/ion.pldb

startColumns 4

<div class="trueBaseThemeQuickLinks"><a href="/edit.html?id=ion" class="material-symbols-outlined">edit</a></div>

* Ion is an <a href="/search.html?q=select+type%0D%0Awhere+type+%3D+idl">interface design language</a> created in 2016.
 link /search.html?q=select+type+appeared%0D%0Awhere+appeared+%3D+2016 2016

dashboard
 #419 <span title="TotalRank: 924 Jobs: 103 Users: 2837 Facts: 155 Links: 666">on PLDB</span>
 8 Years Old

* Amazon Ion is a richly-typed, self-describing, hierarchical data serialization format offering interchangeable binary and text representations. The text format (a superset of JSON) is easy to read and author, supporting rapid prototyping. The binary representation is efficient to store, transmit, and skip-scan parse.

- Ion is a superset of <a href="/concepts/json.html">JSON</a>
- Ion first developed in <a href="../lists/originCommunities.html#amazonComInc">Amazon.com, Inc</a>
- See also: (1 related languages)<a href="protobuf.html">Protocol Buffers</a>
- Read more about Ion on the web: 1.
 https://amzn.github.io/ion-docs/ 1.

<br>

codeWithHeader Example from the web:
 /* Ion supports comments. */
 // Here is a struct, which is similar to a JSON object
 {
   // Field names don&#39;t always have to be quoted
   name: &quot;Fido&quot;,
 
   // This is an integer with a &#39;years&#39; annotation
   age: years::4,
 
   // This is a timestamp with day precision
   birthday: 2012-03-01T,
 
   // Here is a list, which is like a JSON array
   toys: [
     // These are symbol values, which are like strings,
     // but get encoded as integers in binary
     ball,
     rope,
   ],
 
   // This is a decimal -- a base-10 floating point value
   weight: pounds::41.2,
 
   // Here is a blob -- binary data, which is
   // base64-encoded in Ion text encoding
   buzz: {{VG8gaW5maW5pdHkuLi4gYW5kIGJleW9uZCE=}},
 }

endColumns

## Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature MultiLine Comments
  FeatureLink ../features/hasMultiLineComments.html
  Supported <span class="hasFeature">✓</span>
  Token /* */
  Example
   /* A comment
   */
 row
  Feature Line Comments
  FeatureLink ../features/hasLineComments.html
  Supported <span class="hasFeature">✓</span>
  Token //
  Example
   // A comment
 row
  Feature S-Expressions
  FeatureLink ../features/hasSExpressions.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   null.sexp         // A null S-expression value
   ()                // An empty expression value
   (cons 1 2)        // S-expression of three values
   ([hello][there])  // S-expression containing two lists
   
   (a+-b)  ( 'a' '+-' 'b' )    // Equivalent; three symbols
   (a.b;)  ( 'a' '.' 'b' ';')  // Equivalent; four symbols
 row
  Feature Lists
  FeatureLink ../features/hasLists.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   null.list         // A null list value
   []                // An empty list value
   [1, 2, 3]         // List of three ints
   [ 1 , two ]       // List of an int and a symbol
   [a , [b]]         // Nested list
   [ 1.2, ]          // Trailing comma is legal in Ion (unlike JSON)
   [ 1, , 2 ]        // ERROR: missing element between commas
 row
  Feature Type Annotations
  FeatureLink ../features/hasTypeAnnotations.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   int32::12                                // Suggests 32 bits as end-user type
   'my.custom.type' :: { x : 12 , y : -1 }  // Gives a struct a user-defined type
   
   { field: something::'another thing'::value }  // Field's name must precede annotations of its value
   
   jpeg :: {{ ... }}                        // Indicates the blob contains jpeg data
   bool :: null.int                         // A very misleading annotation on the integer null
   '' :: 1                                  // An empty annotation
   null.symbol :: 1                         // ERROR: type annotation cannot be null 
 row
  Feature hasSymbols
  FeatureLink ../features/hasSymbols.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   myvar2       // A different symbol
   'hi ho'      // Symbol requiring quotes
 row
  Feature Decimals
  FeatureLink ../features/hasDecimals.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   null.decimal      // A null decimal value
   0.123             // Type is decimal
   -0.12d4           // Type is decimal
   123_456.789_012   // Decimal with underscores
   -0d-1             // Decimal maintains precision: -0. != -0.0
   -0d0              // Negative zero decimal (distinct from positive zero)
 row
  Feature hasTimestamps
  FeatureLink ../features/hasTimestamps.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   // Timestamps represent a specific moment in time, always include a local offset, and are capable of arbitrary precision.
   2007-02-23T12:14Z                // Seconds are optional, but local offset is not
   2007-01-01T00:00-00:00           // Happy New Year in UTC, unknown local offset
 row
  Feature Clobs
  FeatureLink ../features/hasClobs.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   // The clob type is similar to blob in that it holds uninterpreted binary data. The difference is that the content is expected to be text, so we use a text notation that’s more readable than Base64.
   // An Ion clob type is similar to the blob type except that the denotation in the Ion text format uses an ASCII-based string notation rather than a base64 encoding to denote its binary value. It is important to make the distinction that clob is a sequence of raw octets and string is a sequence of Unicode code points.
   // The string may only contain legal 7-bit ASCII character
 row
  Feature hasBlobs
  FeatureLink ../features/hasBlobs.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   // In the text format, blob values are denoted as RFC 4648-compliant Base64 text within two pairs of curly braces.
   // A valid blob value with one required padding character.
   {{ VG8gaW5maW5pdHkuLi4gYW5kIGJleW9uZCE= }}
 row
  Feature Strings
  FeatureLink ../features/hasStrings.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   "hello world"
 row
  Feature Null
  FeatureLink ../features/hasNull.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   null
 row
  Feature Multiline Strings
  FeatureLink ../features/hasMultilineStrings.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   ( '''hello '''     // Sexp with one element
     '''world!'''  )
   
   ("hello world!")   // The exact same sexp value
   
   // This Ion value is a string containing three newlines. The serialized
   // form's first newline is escaped into nothingness.
   '''\
   The first line of the string.
   This is the second line of the string,
   and this is the third line.
   '''
 row
  Feature Integers
  FeatureLink ../features/hasIntegers.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   // http://amzn.github.io/ion-docs/docs/spec.html
   null.int   // A null int value
   0          // Zero.  Surprise!
   -0         //   ...the same value with a minus sign
   123        // A normal int
   -123       // Another negative int
   0xBeef     // An int denoted in hexadecimal
   0b0101     // An int denoted in binary
   1_2_3      // An int with underscores
   0xFA_CE    // An int denoted in hexadecimal with underscores
   0b10_10_10 // An int denoted in binary with underscores
 row
  Feature Assignment
  FeatureLink ../features/hasAssignment.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   // A subset of symbols called identifiers can be denoted in text without single-quotes. 
 row
  Feature Floats
  FeatureLink ../features/hasFloats.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   // http://amzn.github.io/ion-docs/docs/spec.html
   -0.12e4           // Type is float
 row
  Feature Structs
  FeatureLink ../features/hasStructs.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   { first : "Tom" , last: "Riddle" }  // Structure with two fields
   {"first":"Tom","last":"Riddle"}     // The same value with confusing style
   {center:{x:1.0, y:12.5}, radius:3}  // Nested struct
 row
  Feature Comments
  FeatureLink ../features/hasComments.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
 row
  Feature Booleans
  FeatureLink ../features/hasBooleans.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   null.bool
   true
   false
 row
  Feature Maps
  FeatureLink ../features/hasMaps.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   {"name": "Mary"}
 row
  Feature Semantic Indentation
  FeatureLink ../features/hasSemanticIndentation.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example
 row
  Feature Case Insensitive Identifiers
  FeatureLink ../features/hasCaseInsensitiveIdentifiers.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example
 row
  Feature File Imports
  FeatureLink ../features/hasImports.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example
 row
  Feature Ternary operators
  FeatureLink ../features/hasTernaryOperators.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example
 row
  Feature Conditionals
  FeatureLink ../features/hasConditionals.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example
 row
  Feature Macros
  FeatureLink ../features/hasMacros.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example
 row
  Feature Disk Output
  FeatureLink ../features/canWriteToDisk.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example

keyboardNav ladder-logic.html swi-prolog.html

import ../footer.scroll
