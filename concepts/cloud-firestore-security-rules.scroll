import ../header.scroll
baseUrl https://pldb.com/concepts/
title Cloud Firestore Security Rules

title Cloud Firestore Security Rules - Application
 hidden

html
 <a class="trueBaseThemePreviousItem" href="mu.html">&lt;</a>
 <a class="trueBaseThemeNextItem" href="sizzle.html">&gt;</a>

viewSourceUrl https://github.com/breck7/pldb/blob/main/concepts/cloud-firestore-security-rules.pldb

startColumns 4

<div class="trueBaseThemeQuickLinks"><a href="/edit.html?id=cloud-firestore-security-rules" class="material-symbols-outlined">edit</a></div>

* Cloud Firestore Security Rules is an <a href="/search.html?q=select+type%0D%0Awhere+type+%3D+application">application</a> created in 2017.
 link /search.html?q=select+type+appeared%0D%0Awhere+appeared+%3D+2017 2017

dashboard
 #809 on PLDB
 7 Years Old

* 

- Cloud Firestore Security Rules first developed in <a href="../lists/originCommunities.html#google">Google</a>
- GitHub supports <a href="https://github.com/jaysquared/atom-firestore-grammar" title="The package used for syntax highlighting by GitHub Linguist.">syntax highlighting</a> for Cloud Firestore Security Rules
- Read more about Cloud Firestore Security Rules on the web: 1.
 https://firebase.google.com/docs/reference/rules/rules 1.

<br>

codeWithHeader Example from <a href='https://github.com/jaysquared/atom-firestore-grammar'>Linguist</a>:
 service cloud.firestore {
   match /databases/{database}/documents {
     match /activities/{activity} {
 
       allow create: if isSignedIn()
                     &amp;&amp; isOwner(incomingData().authorId)
                     &amp;&amp; isValidActivity(incomingData())
                     &amp;&amp; hasAllowedActivityFieldsForCreate(incomingData());
 
       allow read, delete: if isSignedIn()
                           &amp;&amp; isOwner(existingData().authorId);
 
       allow update: if isSignedIn()
                     &amp;&amp; isOwner(existingData().authorId)
                     &amp;&amp; isValidActivity(incomingData())
                     &amp;&amp; hasAllowedActivityFieldsForUpdate(incomingData());
 
     }
     match /skills/{skill} {
 
       allow create: if isSignedIn()
                     &amp;&amp; isOwner(incomingData().authorId)
                     &amp;&amp; isValidSkill(incomingData())
                     &amp;&amp; hasAllowedSkillFieldsForCreate(incomingData());
 
       allow read, delete: if isSignedIn()
                           &amp;&amp; isOwner(existingData().authorId);
 
       allow update: if isSignedIn()
                     &amp;&amp; isOwner(existingData().authorId)
                     &amp;&amp; isValidSkill(incomingData())
                     &amp;&amp; hasAllowedSkillFieldsForUpdate(incomingData());
 
     }
     match /activities-skills/{activitySkill} {
 
       allow create: if isSignedIn()
                     &amp;&amp; isOwner(incomingData().authorId)
                     &amp;&amp; isValidActivitySkill(incomingData())
                     &amp;&amp; hasAllowedActivitySkillFieldsForCreate(incomingData());
 
       allow read, delete: if isSignedIn()
                           &amp;&amp; isOwner(existingData().authorId);
 
       allow update: if isSignedIn()
                     &amp;&amp; isOwner(existingData().authorId)
                     &amp;&amp; isValidActivitySkill(incomingData())
                     &amp;&amp; hasAllowedActivitySkillFieldsForUpdate(incomingData());
 
     }
      /// Functions ///
     function isSignedIn() {
       return request.auth != null;
     }
     function isOwner(userId) {
       return request.auth.uid == userId;
     }
     function existingData() {
       return resource.data;
     }
     function incomingData() {
       return request.resource.data;
     }
     function isValidActivity(activity) {
       return activity.title is string
       	&amp;&amp; activity.title.size() &gt; 3
         &amp;&amp; activity.title.size() &lt; 250
         &amp;&amp; activity.summary is string
         &amp;&amp; (activity.audienceCountMin is int || activity.audienceCountMin == null)
         &amp;&amp; (activity.audienceCountMax is int || activity.audienceCountMax == null)
         &amp;&amp; (activity.audienceAgeMin is int || activity.audienceAgeMin == null)
         &amp;&amp; (activity.audienceAgeMax is int || activity.audienceAgeMax == null)
         &amp;&amp; activity.lastUpdateDate.date() is timestamp;
     }
     function hasAllowedActivityFieldsForUpdate(activity) {
       return activity.keys().size() == 9 &amp;&amp; activity.keys().hasAll([&#39;authorId&#39;, &#39;title&#39;, &#39;summary&#39;, &#39;audienceCountMin&#39;, &#39;audienceCountMax&#39;, &#39;audienceAgeMin&#39;, &#39;audienceAgeMax&#39;, &#39;lastUpdateDate&#39;]);
     }
     function hasAllowedActivityFieldsForCreate(activity) {
       return activity.keys().size() == 8 &amp;&amp; activity.keys().hasAll([&#39;authorId&#39;, &#39;title&#39;, &#39;summary&#39;, &#39;audienceCountMin&#39;, &#39;audienceCountMax&#39;, &#39;audienceAgeMin&#39;, &#39;audienceAgeMax&#39;, &#39;lastUpdateDate&#39;]);
     }
 
     function isValidSkill(skill) {
       return skill.title is string
         &amp;&amp; skill.title.size() &gt; 3
         &amp;&amp; skill.title.size() &lt; 250
         &amp;&amp; skill.summary is string
         &amp;&amp; skill.lastUpdateDate.date() is timestamp;
     }
     function hasAllowedSkillFieldsForUpdate(skill) {
       return skill.keys().size() == 5 &amp;&amp; skill.keys().hasAll([&#39;authorId&#39;, &#39;title&#39;, &#39;summary&#39;, &#39;lastUpdateDate&#39;]);
     }
     function hasAllowedSkillFieldsForCreate(skill) {
       return skill.keys().size() == 4 &amp;&amp; skill.keys().hasAll([&#39;authorId&#39;, &#39;title&#39;, &#39;summary&#39;, &#39;lastUpdateDate&#39;]);
     }
     function isValidActivitySkill(activitySkill) {
       return activitySkill.skillId is string
         &amp;&amp; activitySkill.activityId is string;
     }
     function hasAllowedActivitySkillFieldsForUpdate(activitySkill) {
       return activitySkill.keys().size() == 4 &amp;&amp; activitySkill.keys().hasAll([&#39;authorId&#39;, &#39;skillId&#39;, &#39;activityId&#39;]);
     }
     function hasAllowedActivitySkillFieldsForCreate(activitySkill) {
       return activitySkill.keys().size() == 3 &amp;&amp; activitySkill.keys().hasAll([&#39;authorId&#39;, &#39;skillId&#39;, &#39;activityId&#39;]);
     }
   }
 }

endColumns

keyboardNav mu.html sizzle.html

import ../footer.scroll
