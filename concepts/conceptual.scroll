import ../header.scroll
baseUrl https://pldb.com/concepts/
title Conceptual

title Conceptual - Programming language
 hidden

html
 <a class="trueBaseThemePreviousItem" href="latino.html">&lt;</a>
 <a class="trueBaseThemeNextItem" href="hmmm.html">&gt;</a>

viewSourceUrl https://github.com/breck7/pldb/blob/main/concepts/conceptual.pldb

startColumns 4

<div class="trueBaseThemeQuickLinks"><a href="https://github.com/Antipurity/conceptual" class="material-symbols-outlined">home</a> <a href="https://github.com/Antipurity/conceptual" class="material-symbols-outlined">code</a> <a href="/edit.html?id=conceptual" class="material-symbols-outlined">edit</a></div>

* Conceptual is a <a href="/search.html?q=select+type%0D%0Awhere+type+%3D+pl">programming language</a> created in 2019.
 link /search.html?q=select+type+appeared%0D%0Awhere+appeared+%3D+2019 2019

codeWithHeader Source code:
 git clone https://github.com/Antipurity/conceptual

dashboard
 #1364 <span title="TotalRank: 1891 Jobs: 103 Users: 2339 Facts: 802 Links: 986">on PLDB</span>
 5 Years Old

* The Conceptual language aims to completely separate all features and quirks of programming and bring them to the realm of concepts, bridging machines and minds. This language is not a goal in itself, but a platform for the future; understanding this future allows to put its features into their proper context.

- Conceptual website
 https://github.com/Antipurity/conceptual
- Conceptual is developed on <a href="https://github.com/Antipurity/conceptual">GitHub</a> and has 8 stars
- Conceptual first developed in <a href="../lists/originCommunities.html#httpsGithubComAntipurityConceptual">https://github.com/Antipurity/conceptual</a>

<br>

codeWithHeader Example from the web:
 concept
 (
 map
 txt	&#39;(examples F): Returns examples of usage of a function, in `(… (CodeString BecomesString) …)` format.
 (examples): Returns all available examples in a (… (Name … (CodeString BecomesString) …) …) format.&#39;
 call	(_jsEval &quot;function(f) {
   if (_isArray(f)) return error
   if (f === undefined) {
     // Accumulate all examples (from parse.ctx).
     const result = [map]
     parse.ctx.forEach((v,k) =&gt; {
       if (k[0] === &#39;_&#39;) return
       const r = _getDataOverride(v, examples)
       if (r !== undefined)
         result.push(v, r)
     })
     return result
   } else
     return _checkOverride(f, examples, f)
 }&quot;

endColumns

keyboardNav latino.html hmmm.html

import ../footer.scroll
