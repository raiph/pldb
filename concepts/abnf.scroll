import ../header.scroll
baseUrl https://pldb.com/concepts/
title Augmented Backus-Naur Form

title Augmented Backus-Naur Form - Grammar language
 hidden

html
 <a class="trueBaseThemePreviousItem" href="korn-shell.html">&lt;</a>
 <a class="trueBaseThemeNextItem" href="luna.html">&gt;</a>

viewSourceUrl https://github.com/breck7/pldb/blob/main/concepts/abnf.pldb

startColumns 4

<div class="trueBaseThemeQuickLinks"><a href="https://en.wikipedia.org/wiki/Augmented_Backus–Naur_form"><svg version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="98.05px" height="98.05px" viewBox="0 0 98.05 98.05" style="enable-background:new 0 0 98.05 98.05;" xml:space="preserve"><path d="M98.023,17.465l-19.584-0.056c-0.004,0.711-0.006,1.563-0.017,2.121c1.664,0.039,5.922,0.822,7.257,4.327L66.92,67.155 c-0.919-2.149-9.643-21.528-10.639-24.02l9.072-18.818c1.873-2.863,5.455-4.709,8.918-4.843l-0.01-1.968L55.42,17.489 c-0.045,0.499,0.001,1.548-0.068,2.069c5.315,0.144,7.215,1.334,5.941,4.508c-2.102,4.776-6.51,13.824-7.372,15.475 c-2.696-5.635-4.41-9.972-7.345-16.064c-1.266-2.823,1.529-3.922,4.485-4.004v-1.981l-21.82-0.067 c0.016,0.93-0.021,1.451-0.021,2.131c3.041,0.046,6.988,0.371,8.562,3.019c2.087,4.063,9.044,20.194,11.149,24.514 c-2.685,5.153-9.207,17.341-11.544,21.913c-3.348-7.43-15.732-36.689-19.232-44.241c-1.304-3.218,3.732-5.077,6.646-5.213 l0.019-2.148L0,17.398c0.005,0.646,0.027,1.71,0.029,2.187c4.025-0.037,9.908,6.573,11.588,10.683 c7.244,16.811,14.719,33.524,21.928,50.349c0.002,0.029,2.256,0.059,2.281,0.008c4.717-9.653,10.229-19.797,15.206-29.56 L63.588,80.64c0.005,0.004,2.082,0.016,2.093,0.007c7.962-18.196,19.892-46.118,23.794-54.933c1.588-3.767,4.245-6.064,8.543-6.194 l0.032-1.956L98.023,17.465z"/></svg></a> <a href="/edit.html?id=abnf" class="material-symbols-outlined">edit</a></div>

* Augmented Backus-Naur Form, aka Augmented Backus-Naur Form, is a <a href="/search.html?q=select+type%0D%0Awhere+type+%3D+grammarLanguage">grammar language</a> created in 2008.
 link /search.html?q=select+type+appeared%0D%0Awhere+appeared+%3D+2008 2008

dashboard
 #434 <span title="TotalRank: 938 Jobs: 103 Users: 779 Facts: 56 Links: 986">on PLDB</span>
 16 Years Old
 1 <span title="Augmented Backus-Naur Form repos on GitHub.">Repos</span>

* In computer science, augmented Backus–Naur form (ABNF) is a metalanguage based on Backus–Naur form (BNF), but consisting of its own syntax and derivation rules. The motive principle for ABNF is to describe a formal system of a language to be used as a bidirectional communications protocol. It is defined by Internet Standard 68 ("STD 68", type case sic), which as of December 2010 is RFC 5234, and it often serves as the definition language for IETF communication protocols. Read more on Wikipedia...
 https://en.wikipedia.org/wiki/Augmented_Backus–Naur_form Read more on Wikipedia...

- Augmented Backus-Naur Form Wikipedia page
 https://en.wikipedia.org/wiki/Augmented_Backus–Naur_form
- There are at least 1 Augmented Backus-Naur Form repos on <a href="https://github.com/search?q=language:ABNF">GitHub</a>
- file extensions for Augmented Backus-Naur Form include abnf
- <a href="antlr.html">ANTLR</a> <a href="https://github.com/antlr/grammars-v4/tree/master/abnf">grammar</a> for Augmented Backus-Naur Form
- <a href="pygments.html">Pygments</a> supports <a href="https://github.com/pygments/pygments/blob/master/pygments/lexers/grammar_notation.py">syntax highlighting</a> for Augmented Backus-Naur Form
- GitHub supports <a href="https://github.com/sanssecours/ABNF.tmbundle" title="The package used for syntax highlighting by GitHub Linguist.">syntax highlighting</a> for Augmented Backus-Naur Form
- See also: (1 related languages)<a href="regex.html">Regular Expressions</a>

<br>

codeWithHeader Example from <a href='https://github.com/sanssecours/ABNF.tmbundle'>Linguist</a>:
 ; Source:  https://github.com/toml-lang/toml
 ; License: MIT
 
 ;; This is an attempt to define TOML in ABNF according to the grammar defined
 ;; in RFC 4234 (http://www.ietf.org/rfc/rfc4234.txt).
 
 ;; TOML
 
 toml = expression *( newline expression )
 expression = (
   ws /
   ws comment /
   ws keyval ws [ comment ] /
   ws table ws [ comment ]
 )
 
 ;; Newline
 
 newline = (
   %x0A /              ; LF
   %x0D.0A             ; CRLF
 )
 
 newlines = 1*newline
 
 ;; Whitespace
 
 ws = *(
   %x20 /              ; Space
   %x09                ; Horizontal tab
 )
 
 ;; Comment
 
 comment-start-symbol = %x23 ; #
 non-eol = %x09 / %x20-10FFFF
 comment = comment-start-symbol *non-eol
 
 ;; Key-Value pairs
 
 keyval-sep = ws %x3D ws ; =
 keyval = key keyval-sep val
 
 key = unquoted-key / quoted-key
 unquoted-key = 1*( ALPHA / DIGIT / %x2D / %x5F ) ; A-Z / a-z / 0-9 / - / _
 quoted-key = quotation-mark 1*basic-char quotation-mark ; See Basic Strings
 
 val = integer / float / string / boolean / date-time / array / inline-table
 
 ;; Table
 
 table = std-table / array-table
 
 ;; Standard Table
 
 std-table-open  = %x5B ws     ; [ Left square bracket
 std-table-close = ws %x5D     ; ] Right square bracket
 table-key-sep   = ws %x2E ws  ; . Period
 
 std-table = std-table-open key *( table-key-sep key) std-table-close
 
 ;; Array Table
 
 array-table-open  = %x5B.5B ws  ; [[ Double left square bracket
 array-table-close = ws %x5D.5D  ; ]] Double right square bracket
 
 array-table = array-table-open key *( table-key-sep key) array-table-close
 
 ;; Integer
 
 integer = [ minus / plus ] int
 minus = %x2D                       ; -
 plus = %x2B                        ; +
 digit1-9 = %x31-39                 ; 1-9
 underscore = %x5F                  ; _
 int = DIGIT / digit1-9 1*( DIGIT / underscore DIGIT )
 
 ;; Float
 
 float = integer ( frac / frac exp / exp )
 zero-prefixable-int = DIGIT *( DIGIT / underscore DIGIT )
 frac = decimal-point zero-prefixable-int
 decimal-point = %x2E               ; .
 exp = e integer
 e = %x65 / %x45                    ; e E
 
 ;; String
 
 string = basic-string / ml-basic-string / literal-string / ml-literal-string
 
 ;; Basic String
 
 basic-string = quotation-mark *basic-char quotation-mark
 
 quotation-mark = %x22            ; &quot;
 
 basic-char = basic-unescaped / escaped
 escaped = escape ( %x22 /          ; &quot;    quotation mark  U+0022
                    %x5C /          ; \    reverse solidus U+005C
                    %x2F /          ; /    solidus         U+002F
                    %x62 /          ; b    backspace       U+0008
                    %x66 /          ; f    form feed       U+000C
                    %x6E /          ; n    line feed       U+000A
                    %x72 /          ; r    carriage return U+000D
                    %x74 /          ; t    tab             U+0009
                    %x75 4HEXDIG /  ; uXXXX                U+XXXX
                    %x55 8HEXDIG )  ; UXXXXXXXX            U+XXXXXXXX
 
 basic-unescaped = %x20-21 / %x23-5B / %x5D-10FFFF
 
 escape = %x5C                    ; \
 
 ;; Multiline Basic String
 
 ml-basic-string-delim = quotation-mark quotation-mark quotation-mark
 ml-basic-string = ml-basic-string-delim ml-basic-body ml-basic-string-delim
 ml-basic-body = *( ml-basic-char / newline / ( escape newline ))
 
 ml-basic-char = ml-basic-unescaped / escaped
 ml-basic-unescaped = %x20-5B / %x5D-10FFFF
 
 ;; Literal String
 
 literal-string = apostraphe *literal-char apostraphe
 
 apostraphe = %x27 ; &#39; Apostrophe
 
 literal-char = %x09 / %x20-26 / %x28-10FFFF
 
 ;; Multiline Literal String
 
 ml-literal-string-delim = apostraphe apostraphe apostraphe
 ml-literal-string = ml-literal-string-delim ml-literal-body ml-literal-string-delim
 
 ml-literal-body = *( ml-literal-char / newline )
 ml-literal-char = %x09 / %x20-10FFFF
 
 ;; Boolean
 
 boolean = true / false
 true    = %x74.72.75.65     ; true
 false   = %x66.61.6C.73.65  ; false
 
 ;; Datetime (as defined in RFC 3339)
 
 date-fullyear  = 4DIGIT
 date-month     = 2DIGIT  ; 01-12
 date-mday      = 2DIGIT  ; 01-28, 01-29, 01-30, 01-31 based on month/year
 time-hour      = 2DIGIT  ; 00-23
 time-minute    = 2DIGIT  ; 00-59
 time-second    = 2DIGIT  ; 00-58, 00-59, 00-60 based on leap second rules
 time-secfrac   = &quot;.&quot; 1*DIGIT
 time-numoffset = ( &quot;+&quot; / &quot;-&quot; ) time-hour &quot;:&quot; time-minute
 time-offset    = &quot;Z&quot; / time-numoffset
 
 partial-time   = time-hour &quot;:&quot; time-minute &quot;:&quot; time-second [time-secfrac]
 full-date      = date-fullyear &quot;-&quot; date-month &quot;-&quot; date-mday
 full-time      = partial-time time-offset
 
 date-time      = full-date &quot;T&quot; full-time
 
 ;; Array
 
 array-open  = %x5B ws  ; [
 array-close = ws %x5D  ; ]
 
 array = array-open array-values array-close
 
 array-values = [ val [ array-sep ] [ ( comment newlines) / newlines ] /
                  val array-sep [ ( comment newlines) / newlines ] array-values ]
 
 array-sep = ws %x2C ws  ; , Comma
 
 ;; Inline Table
 
 inline-table-open  = %x7B ws     ; {
 inline-table-close = ws %x7D     ; }
 inline-table-sep   = ws %x2C ws  ; , Comma
 
 inline-table = inline-table-open inline-table-keyvals inline-table-close
 
 inline-table-keyvals = [ inline-table-keyvals-non-empty ]
 inline-table-keyvals-non-empty = key keyval-sep val /
                                  key keyval-sep val inline-table-sep inline-table-keyvals-non-empty
 
 ;; Built-in ABNF terms, reproduced here for clarity
 
 ; ALPHA = %x41-5A / %x61-7A ; A-Z / a-z
 ; DIGIT = %x30-39 ; 0-9
 ; HEXDIG = DIGIT / &quot;A&quot; / &quot;B&quot; / &quot;C&quot; / &quot;D&quot; / &quot;E&quot; / &quot;F&quot;
 

codeWithHeader Example from <a href='https://en.wikipedia.org/wiki/Augmented_Backus–Naur_form'>Wikipedia</a>:
 postal-address   = name-part street zip-part
 
 name-part        = *(personal-part SP) last-name [SP suffix] CRLF
 name-part        =/ personal-part CRLF
 
 personal-part    = first-name / (initial &quot;.&quot;)
 first-name       = *ALPHA
 initial          = ALPHA
 last-name        = *ALPHA
 suffix           = (&quot;Jr.&quot; / &quot;Sr.&quot; / 1*(&quot;I&quot; / &quot;V&quot; / &quot;X&quot;))
 
 street           = [apt SP] house-num SP street-name CRLF
 apt              = 1*4DIGIT
 house-num        = 1*8(DIGIT / ALPHA)
 street-name      = 1*VCHAR
 
 zip-part         = town-name &quot;,&quot; SP state 1*2SP zip-code CRLF
 town-name        = 1*(ALPHA / SP)
 state            = 2ALPHA
 zip-code         = 5DIGIT [&quot;-&quot; 4DIGIT]

endColumns

## Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature Booleans
  FeatureLink ../features/hasBooleans.html
  Supported <span class="hasFeature">✓</span>
  Token true false
  Example
 row
  Feature Comments
  FeatureLink ../features/hasComments.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   ; A comment
 row
  Feature Line Comments
  FeatureLink ../features/hasLineComments.html
  Supported <span class="hasFeature">✓</span>
  Token ;
  Example
   ; A comment
 row
  Feature Semantic Indentation
  FeatureLink ../features/hasSemanticIndentation.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example

keyboardNav korn-shell.html luna.html

import ../footer.scroll
