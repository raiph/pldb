import ../header.scroll
baseUrl https://pldb.io/concepts/
title turnstile

title turnstile - Grammar language
 hidden

html
 <a class="trueBaseThemePreviousItem" href="module-management-system.html">&lt;</a>
 <a class="trueBaseThemeNextItem" href="catala.html">&gt;</a>

viewSourceUrl https://github.com/breck7/pldb/blob/main/concepts/turnstile.pldb

startColumns 4

<div class="trueBaseThemeQuickLinks"><a href="/edit.html?id=turnstile" class="material-symbols-outlined">edit</a></div>

* turnstile is a <a href="/search.html?q=select+type%0D%0Awhere+type+%3D+grammarLanguage">grammar language</a> created in 2017 by Stephen Chang and Alex Knauth and Ben Greenman and Milo Turner and Michael Ballantyne.
 link /search.html?q=select+type+appeared%0D%0Awhere+appeared+%3D+2017 2017
 link ../lists/creators.html#stephenChang Stephen Chang
 link ../lists/creators.html#alexKnauth Alex Knauth
 link ../lists/creators.html#benGreenman Ben Greenman
 link ../lists/creators.html#miloTurner Milo Turner
 link ../lists/creators.html#michaelBallantyne Michael Ballantyne

dashboard
 #1096 <span title="TotalRank: 1655 Jobs: 103 Users: 2838 Facts: 566 Links: 986">on PLDB</span>
 7 Years Old

* Turnstile aims to help Racket programmers create typed languages. It does so with extensions of Racket’s macro-definition forms that facilitate implementation of type rules alongside normal macro code. As a result, the macros implementing a new language directly type check the program during expansion, obviating the need to create and call out to a separate type checker. Thus, a complete typed language implementation remains a series of macro definitions that may be imported and exported in the standard way that Racket programmers are accustomed to.

- Read more about turnstile on the web: 1.
 https://docs.racket-lang.org/turnstile/index.html 1.

<br>

codeWithHeader Example from the web:
 #lang turnstile
 (provide → Int λ #%app #%datum + ann)
  
 (define-base-type Int)
 (define-type-constructor → #:arity &gt; 0)
  
 (define-primop + : (→ Int Int Int))
  
 ; [APP]
 (define-typed-syntax (#%app e_fn e_arg ...) ≫
   [⊢ e_fn ≫ e_fn- ⇒ (~→ τ_in ... τ_out)]
   #:fail-unless (stx-length=? #&#39;[τ_in ...] #&#39;[e_arg ...])
                 (format &quot;arity mismatch, expected ~a args, given ~a&quot;
                         (stx-length #&#39;[τ_in ...]) #&#39;[e_arg ...])
   [⊢ e_arg ≫ e_arg- ⇐ τ_in] ...
   --------
   [⊢ (#%app- e_fn- e_arg- ...) ⇒ τ_out])
  
 ; [LAM]
 (define-typed-syntax λ #:datum-literals (:)
   [(_ ([x:id : τ_in:type] ...) e) ≫
    [[x ≫ x- : τ_in.norm] ... ⊢ e ≫ e- ⇒ τ_out]
    -------
    [⊢ (λ- (x- ...) e-) ⇒ (→ τ_in.norm ... τ_out)]]
   [(_ (x:id ...) e) ⇐ (~→ τ_in ... τ_out) ≫
    [[x ≫ x- : τ_in] ... ⊢ e ≫ e- ⇐ τ_out]
    ---------
    [⊢ (λ- (x- ...) e-)]])
  
 ; [ANN]
 (define-typed-syntax (ann e (~datum :) τ:type) ≫
   [⊢ e ≫ e- ⇐ τ.norm]
   --------
   [⊢ e- ⇒ τ.norm])
  
 ; [DATUM]
 (define-typed-syntax #%datum
   [(_ . n:integer) ≫
    --------
    [⊢ (#%datum- . n) ⇒ Int]]
   [(_ . x) ≫
    --------
    [#:error (type-error #:src #&#39;x
                         #:msg &quot;Unsupported literal: ~v&quot; #&#39;x)]])

endColumns

## Language <a href="../lists/features.html">features</a>

treeTable
 row
  Feature Comments
  FeatureLink ../features/hasComments.html
  Supported <span class="hasFeature">✓</span>
  Token 
  Example
   ; A comment
 row
  Feature Line Comments
  FeatureLink ../features/hasLineComments.html
  Supported <span class="hasFeature">✓</span>
  Token ;
  Example
   ; A comment
 row
  Feature Semantic Indentation
  FeatureLink ../features/hasSemanticIndentation.html
  Supported <span class="doesNotHaveFeature">X</span>
  Token 
  Example

keyboardNav module-management-system.html catala.html

import ../footer.scroll
