import header.scroll

title Module Pattern - language feature
printTitle Module Pattern

html
 <a class="trueBaseThemePreviousItem" href="hasMixins.html">&lt;</a>
 <a class="trueBaseThemeNextItem" href="hasMonads.html">&gt;</a>

// viewSourceUrl https://github.com/breck7/pldb/blob/main/measures/pldbMeasures.scroll

thinColumns 4

codeWithHeader Example from <a href="../concepts/java.html">Java</a>:
 // Package = directory. Java classes can be grouped together in packages. A package name is the same as the directory (folder) name which contains the .java files. You declare packages when you define your Java program, and you name the packages you want to use from other libraries in an import statement.
 // The first statement, other than comments, in a Java source file, must be the package declaration.
 // Following the optional package declaration, you can have import statements, which allow you to specify classes from other packages that can be referenced without qualifying them with their package.
 // This source file must be Drawing.java in the illustration directory.
 package illustration;
 import java.awt.*;
 public class Drawing {
  // ...
 }

codeWithHeader Example from <a href="../concepts/csharp.html">C#</a>:
 // In C#, namespaces are the semi-equivalent of Java&#39;s packages.
 namespace com.test
 {
    class Test {}
 }

codeWithHeader Example from <a href="../concepts/julia.html">Julia</a>:
 module MyModule
 using Lib
 
 using BigLib: thing1, thing2
 
 import Base.show
 
 export MyType, foo
 
 struct MyType
     x
 end
 
 bar(x) = 2x
 foo(a::MyType) = bar(a.x) + 1
 
 show(io::IO, a::MyType) = print(io, &quot;MyType $(a.x)&quot;)
 end

codeWithHeader Example from <a href="../concepts/fortran.html">Fortran</a>:
 module constants  
 implicit none 
 
    real, parameter :: pi = 3.1415926536  
    real, parameter :: e = 2.7182818285 
    
 contains      
    subroutine show_consts()          
       print*, &quot;Pi = &quot;, pi          
       print*,  &quot;e = &quot;, e     
    end subroutine show_consts 
    
 end module constants 
 
 
 program module_example     
 use constants      
 implicit none     
 
    real :: x, ePowerx, area, radius 
    x = 2.0
    radius = 7.0
    ePowerx = e ** x
    area = pi * radius**2     
    
    call show_consts() 
    
    print*, &quot;e raised to the power of 2.0 = &quot;, ePowerx
    print*, &quot;Area of a circle with radius 7.0 = &quot;, area  
    
 end program module_exampl

codeWithHeader Example from <a href="../concepts/speedie.html">Speedie</a>:
 module App
  function Path (|string|)
   // return the app&#39;s path here

codeWithHeader Example from <a href="../concepts/c3.html">C3</a>:
 module my_module::submodule;
 ...

codeWithHeader Example from <a href="../concepts/racket.html">Racket</a>:
 (module nest racket
    (provide (for-syntax meta-eggs)
             (for-meta 1 meta-chicks)
             num-eggs)
    (define-for-syntax meta-eggs 2)
    (define-for-syntax meta-chicks 3)
    (define num-eggs 2))

codeWithHeader Example from <a href="../concepts/ocaml.html">OCaml</a>:
 (* In OCaml, every piece of code is wrapped into a module. *)
 (* amodule.ml *)
 let hello () = print_endline &quot;Hello&quot;
 (* bmodule.ml *)
 Amodule.hello ()

* Languages *with* Module Pattern include <a href="../concepts/java.html">Java</a>, <a href="../concepts/csharp.html">C#</a>, <a href="../concepts/julia.html">Julia</a>, <a href="../concepts/fortran.html">Fortran</a>, <a href="../concepts/speedie.html">Speedie</a>, <a href="../concepts/c3.html">C3</a>, <a href="../concepts/progsbase.html">progsbase</a>, <a href="../concepts/racket.html">Racket</a>, <a href="../concepts/aardvark.html">Aardvark</a>, <a href="../concepts/ocaml.html">OCaml</a>

* Read more about Module Pattern on the web: 1.
 https://en.wikipedia.org/wiki/Module_pattern 1.

HTML of this page generated by Features.ts
 https://github.com/breck7/pldb/blob/main/code/Features.ts Features.ts

endColumns

keyboardNav hasMixins.html hasMonads.html

import ../footer.scroll
