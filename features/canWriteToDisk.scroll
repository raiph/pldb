import header.scroll

title Disk Output

title Disk Output - language feature
 hidden

html
 <a class="trueBaseThemePreviousItem" href="canUseQuestionMarksAsPartOfIdentifier.html">&lt;</a>
 <a class="trueBaseThemeNextItem" href="hasAbstractTypes.html">&gt;</a>

viewSourceUrl https://github.com/breck7/pldb/blob/main/measures/.grammar

startColumns 4

codeWithHeader Example from <a href="../concepts/python.html">Python</a>, <a href="../concepts/cython.html">Cython</a>:
 with open(&#39;helloworld.txt&#39;, &#39;w&#39;) as filehandle:
  filehandle.write(&#39;Hello, world!\n&#39;)

codeWithHeader Example from <a href="../concepts/nodejs.html">Node.js</a>:
 require(&quot;fs&quot;).writeFileSync(&quot;foo.txt&quot;, &quot;foo&quot;, &quot;utf8&quot;)

codeWithHeader Example from <a href="../concepts/elixir.html">Elixir</a>:
 File.write!(&quot;helloworld.txt&quot;, &quot;Hello, world!\n&quot;)

codeWithHeader Example from <a href="../concepts/rebol.html">REBOL</a>, <a href="../concepts/boron.html">Boron</a>:
 write %helloworld.txt &quot;Hello, world!^/&quot;

codeWithHeader Example from <a href="../concepts/speedie.html">Speedie</a>:
 &quot;helloworld.txt&quot; &lt;~ &quot;Hello, world!\n&quot;

codeWithHeader Example from <a href="../concepts/jule.html">Jule</a>:
 use std::fs::{open, O_WRONLY}
 
 fn main() {
     let (mut f, _) = open(&quot;myfile.txt&quot;, O_WRONLY, 0)
     let bytes = ([]byte)(&quot;Text to write&quot;)
     f.write(bytes)
     f.close()
 }

* Languages *with* Disk Output include <a href="../concepts/python.html">Python</a>, <a href="../concepts/nodejs.html">Node.js</a>, <a href="../concepts/elixir.html">Elixir</a>, <a href="../concepts/rebol.html">REBOL</a>, <a href="../concepts/cython.html">Cython</a>, <a href="../concepts/speedie.html">Speedie</a>, <a href="../concepts/jule.html">Jule</a>, <a href="../concepts/boron.html">Boron</a>

* Languages *without* Disk Output include <a href="../concepts/xml.html">XML</a>, <a href="../concepts/json.html">JSON</a>, <a href="../concepts/css.html">CSS</a>, <a href="../concepts/haml.html">HAML</a>, <a href="../concepts/json5.html">JSON5</a>, <a href="../concepts/ion.html">Ion</a>, <a href="../concepts/jsoniq.html">JSONiq</a>, <a href="../concepts/json-with-comments.html">JSON with Comments</a>, <a href="../concepts/superjson.html">Superjson</a>, <a href="../concepts/jsonnet.html">Jsonnet</a>, <a href="../concepts/hocon.html">Hocon</a>

* This question asks: Does this language have methods or standard libraries for writing to disk?

HTML of this page generated by Features.ts
 https://github.com/breck7/pldb/blob/main/code/Features.ts Features.ts

endColumns

keyboardNav canUseQuestionMarksAsPartOfIdentifier.html hasAbstractTypes.html

import ../footer.scroll
